{"ast":null,"code":"function isHexColor(hex) {\n  const HEX_REGEXP = /^#?([0-9A-F]{3}){1,2}$/i;\n  return HEX_REGEXP.test(hex);\n}\nfunction hexToRgba(color) {\n  let hexString = color.replace(\"#\", \"\");\n  if (hexString.length === 3) {\n    const shorthandHex = hexString.split(\"\");\n    hexString = [shorthandHex[0], shorthandHex[0], shorthandHex[1], shorthandHex[1], shorthandHex[2], shorthandHex[2]].join(\"\");\n  }\n  const parsed = parseInt(hexString, 16);\n  const r = parsed >> 16 & 255;\n  const g = parsed >> 8 & 255;\n  const b = parsed & 255;\n  return {\n    r,\n    g,\n    b,\n    a: 1\n  };\n}\nfunction rgbStringToRgba(color) {\n  const [r, g, b, a] = color.replace(/[^0-9,.]/g, \"\").split(\",\").map(Number);\n  return {\n    r,\n    g,\n    b,\n    a: a || 1\n  };\n}\nfunction toRgba(color) {\n  if (isHexColor(color)) {\n    return hexToRgba(color);\n  }\n  if (color.startsWith(\"rgb\")) {\n    return rgbStringToRgba(color);\n  }\n  return {\n    r: 0,\n    g: 0,\n    b: 0,\n    a: 1\n  };\n}\nexport { toRgba };","map":{"version":3,"sources":["../../../../src/theme/utils/to-rgba/to-rgba.ts"],"names":[],"mappings":"AAAA,SAAS,UAAU,CAAC,GAAG,EAAE;EACvB,MAAM,UAAU,GAAG,yBAAyB;EAC5C,OAAO,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC;AAC7B;AACA,SAAS,SAAS,CAAC,KAAK,EAAE;EACxB,IAAI,SAAS,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;EACtC,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;IAC1B,MAAM,YAAY,GAAG,SAAS,CAAC,KAAK,CAAC,EAAE,CAAC;IACxC,SAAS,GAAG,CACV,YAAY,CAAC,CAAC,CAAC,EACf,YAAY,CAAC,CAAC,CAAC,EACf,YAAY,CAAC,CAAC,CAAC,EACf,YAAY,CAAC,CAAC,CAAC,EACf,YAAY,CAAC,CAAC,CAAC,EACf,YAAY,CAAC,CAAC,CAAC,CAChB,CAAC,IAAI,CAAC,EAAE,CAAC;EACd;EACE,MAAM,MAAM,GAAG,QAAQ,CAAC,SAAS,EAAE,EAAE,CAAC;EACtC,MAAM,CAAC,GAAG,MAAM,IAAI,EAAE,GAAG,GAAG;EAC5B,MAAM,CAAC,GAAG,MAAM,IAAI,CAAC,GAAG,GAAG;EAC3B,MAAM,CAAC,GAAG,MAAM,GAAG,GAAG;EACtB,OAAO;IACL,CAAC;IACD,CAAC;IACD,CAAC;IACD,CAAC,EAAE;EACP,CAAG;AACH;AACA,SAAS,eAAe,CAAC,KAAK,EAAE;EAC9B,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC;EAC1E,OAAO;IAAE,CAAC;IAAE,CAAC;IAAE,CAAC;IAAE,CAAC,EAAE,CAAC,IAAI;EAAC,CAAE;AAC/B;AACO,SAAS,MAAM,CAAC,KAAK,EAAE;EAC5B,IAAI,UAAU,CAAC,KAAK,CAAC,EAAE;IACrB,OAAO,SAAS,CAAC,KAAK,CAAC;EAC3B;EACE,IAAI,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;IAC3B,OAAO,eAAe,CAAC,KAAK,CAAC;EACjC;EACE,OAAO;IACL,CAAC,EAAE,CAAC;IACJ,CAAC,EAAE,CAAC;IACJ,CAAC,EAAE,CAAC;IACJ,CAAC,EAAE;EACP,CAAG;AACH","sourcesContent":["/* eslint-disable no-bitwise */\n\ninterface RGBA {\n  r: number;\n  g: number;\n  b: number;\n  a: number;\n}\n\nfunction isHexColor(hex: string): boolean {\n  const HEX_REGEXP = /^#?([0-9A-F]{3}){1,2}$/i;\n\n  return HEX_REGEXP.test(hex);\n}\n\nfunction hexToRgba(color: string): RGBA {\n  let hexString = color.replace('#', '');\n\n  if (hexString.length === 3) {\n    const shorthandHex = hexString.split('');\n    hexString = [\n      shorthandHex[0],\n      shorthandHex[0],\n      shorthandHex[1],\n      shorthandHex[1],\n      shorthandHex[2],\n      shorthandHex[2],\n    ].join('');\n  }\n\n  const parsed = parseInt(hexString, 16);\n  const r = (parsed >> 16) & 255;\n  const g = (parsed >> 8) & 255;\n  const b = parsed & 255;\n\n  return {\n    r,\n    g,\n    b,\n    a: 1,\n  };\n}\n\nfunction rgbStringToRgba(color: string): RGBA {\n  const [r, g, b, a] = color\n    .replace(/[^0-9,.]/g, '')\n    .split(',')\n    .map(Number);\n\n  return { r, g, b, a: a || 1 };\n}\n\nexport function toRgba(color: string): RGBA {\n  if (isHexColor(color)) {\n    return hexToRgba(color);\n  }\n\n  if (color.startsWith('rgb')) {\n    return rgbStringToRgba(color);\n  }\n\n  return {\n    r: 0,\n    g: 0,\n    b: 0,\n    a: 1,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}