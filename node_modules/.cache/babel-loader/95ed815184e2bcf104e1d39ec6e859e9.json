{"ast":null,"code":"import { useRef } from 'react';\nimport { useWindowScroll } from '../use-window-scroll/use-window-scroll.js';\nimport { useIsomorphicEffect } from '../use-isomorphic-effect/use-isomorphic-effect.js';\nconst isFixed = (current, fixedAt) => current <= fixedAt;\nconst isPinned = (current, previous) => current <= previous;\nconst isReleased = (current, previous, fixedAt) => !isPinned(current, previous) && !isFixed(current, fixedAt);\nfunction useHeadroom() {\n  let {\n    fixedAt = 0,\n    onPin,\n    onFix,\n    onRelease\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const scrollRef = useRef(0);\n  const [{\n    y: scrollPosition\n  }] = useWindowScroll();\n  useIsomorphicEffect(() => {\n    if (isPinned(scrollPosition, scrollRef.current)) {\n      onPin == null ? void 0 : onPin();\n    }\n  }, [scrollPosition, onPin]);\n  useIsomorphicEffect(() => {\n    if (isFixed(scrollPosition, fixedAt)) {\n      onFix == null ? void 0 : onFix();\n    }\n  }, [scrollPosition, fixedAt, onFix]);\n  useIsomorphicEffect(() => {\n    if (isReleased(scrollPosition, scrollRef.current, fixedAt)) {\n      onRelease == null ? void 0 : onRelease();\n    }\n  }, [scrollPosition, onRelease]);\n  useIsomorphicEffect(() => {\n    scrollRef.current = window.scrollY;\n  }, [scrollPosition]);\n  if (isPinned(scrollPosition, scrollRef.current)) {\n    return true;\n  }\n  if (isFixed(scrollPosition, fixedAt)) {\n    return true;\n  }\n  return false;\n}\nexport { isFixed, isPinned, isReleased, useHeadroom };","map":{"version":3,"sources":["../../src/use-headroom/use-headroom.ts"],"names":[],"mappings":";;;AAGY,MAAC,OAAO,GAAG,CAAC,OAAO,EAAE,OAAO,KAAK,OAAO,IAAI,OAAA;AAC5C,MAAC,QAAQ,GAAG,CAAC,OAAO,EAAE,QAAQ,KAAK,OAAO,IAAI,QAAA;AAC9C,MAAC,UAAU,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,OAAO,KAAK,CAAC,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,OAAO,CAAA;AAC5G,SAAS,WAAW,CAAA,EAAgD;EAAA,IAA/C;IAAE,OAAO,GAAG,CAAC;IAAE,KAAK;IAAE,KAAK;IAAE;EAAS,CAAE,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAG,CAAA,CAAE;EACvE,MAAM,SAAS,GAAG,MAAM,CAAC,CAAC,CAAC;EAC3B,MAAM,CAAC;IAAE,CAAC,EAAE;EAAc,CAAE,CAAC,GAAG,eAAe,CAAA,CAAE;EACjD,mBAAmB,CAAC,MAAM;IACxB,IAAI,QAAQ,CAAC,cAAc,EAAE,SAAS,CAAC,OAAO,CAAC,EAAE;MAC/C,KAAK,IAAI,IAAI,GAAG,KAAK,CAAC,GAAG,KAAK,CAAA,CAAE;IACtC;EACA,CAAG,EAAE,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;EAC3B,mBAAmB,CAAC,MAAM;IACxB,IAAI,OAAO,CAAC,cAAc,EAAE,OAAO,CAAC,EAAE;MACpC,KAAK,IAAI,IAAI,GAAG,KAAK,CAAC,GAAG,KAAK,CAAA,CAAE;IACtC;EACA,CAAG,EAAE,CAAC,cAAc,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;EACpC,mBAAmB,CAAC,MAAM;IACxB,IAAI,UAAU,CAAC,cAAc,EAAE,SAAS,CAAC,OAAO,EAAE,OAAO,CAAC,EAAE;MAC1D,SAAS,IAAI,IAAI,GAAG,KAAK,CAAC,GAAG,SAAS,CAAA,CAAE;IAC9C;EACA,CAAG,EAAE,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC;EAC/B,mBAAmB,CAAC,MAAM;IACxB,SAAS,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO;EACtC,CAAG,EAAE,CAAC,cAAc,CAAC,CAAC;EACpB,IAAI,QAAQ,CAAC,cAAc,EAAE,SAAS,CAAC,OAAO,CAAC,EAAE;IAC/C,OAAO,IAAI;EACf;EACE,IAAI,OAAO,CAAC,cAAc,EAAE,OAAO,CAAC,EAAE;IACpC,OAAO,IAAI;EACf;EACE,OAAO,KAAK;AACd","sourcesContent":["import { useRef } from 'react';\nimport { useWindowScroll } from '../use-window-scroll/use-window-scroll';\nimport { useIsomorphicEffect } from '../use-isomorphic-effect/use-isomorphic-effect';\n\nexport const isFixed = (current: number, fixedAt: number) => current <= fixedAt;\nexport const isPinned = (current: number, previous: number) => current <= previous;\nexport const isReleased = (current: number, previous: number, fixedAt: number) =>\n  !isPinned(current, previous) && !isFixed(current, fixedAt);\n\ninterface UseHeadroomInput {\n  /** Number in px at which element should be fixed */\n  fixedAt?: number;\n\n  /** Called when element is pinned */\n  onPin?(): void;\n\n  /** Called when element is at fixed position */\n  onFix?(): void;\n\n  /** Called when element is unpinned */\n  onRelease?(): void;\n}\n\nexport function useHeadroom({ fixedAt = 0, onPin, onFix, onRelease }: UseHeadroomInput = {}) {\n  const scrollRef = useRef(0);\n  const [{ y: scrollPosition }] = useWindowScroll();\n\n  useIsomorphicEffect(() => {\n    if (isPinned(scrollPosition, scrollRef.current)) {\n      onPin?.();\n    }\n  }, [scrollPosition, onPin]);\n\n  useIsomorphicEffect(() => {\n    if (isFixed(scrollPosition, fixedAt)) {\n      onFix?.();\n    }\n  }, [scrollPosition, fixedAt, onFix]);\n\n  useIsomorphicEffect(() => {\n    if (isReleased(scrollPosition, scrollRef.current, fixedAt)) {\n      onRelease?.();\n    }\n  }, [scrollPosition, onRelease]);\n\n  useIsomorphicEffect(() => {\n    scrollRef.current = window.scrollY;\n  }, [scrollPosition]);\n\n  if (isPinned(scrollPosition, scrollRef.current)) {\n    return true;\n  }\n\n  if (isFixed(scrollPosition, fixedAt)) {\n    return true;\n  }\n\n  return false;\n}\n"]},"metadata":{},"sourceType":"module"}