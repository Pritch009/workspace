{"ast":null,"code":"import React, { useState } from 'react';\nimport { getSafeId } from '@mantine/utils';\nimport { useId, useUncontrolled } from '@mantine/hooks';\nimport { TabsContextProvider } from './Tabs.context.js';\nimport { TABS_ERRORS } from './Tabs.errors.js';\nfunction TabsProvider(_ref) {\n  let {\n    defaultValue,\n    value,\n    onTabChange,\n    orientation,\n    children,\n    loop,\n    id,\n    activateTabWithKeyboard,\n    allowTabDeactivation,\n    variant,\n    color,\n    radius,\n    inverted,\n    placement,\n    keepMounted = true,\n    classNames,\n    styles,\n    unstyled\n  } = _ref;\n  const uid = useId(id);\n  const [mountedPanelIds, setMountedPanelIds] = useState([]);\n  const [_value, onChange] = useUncontrolled({\n    value,\n    defaultValue,\n    finalValue: null,\n    onChange: onTabChange\n  });\n  return /* @__PURE__ */React.createElement(TabsContextProvider, {\n    value: {\n      placement,\n      value: _value,\n      orientation,\n      id: uid,\n      loop,\n      activateTabWithKeyboard,\n      getTabId: getSafeId(`${uid}-tab`, TABS_ERRORS.value),\n      getPanelId: getSafeId(`${uid}-panel`, TABS_ERRORS.value),\n      onTabChange: onChange,\n      setMountedPanelIds,\n      mountedPanelIds,\n      allowTabDeactivation,\n      variant,\n      color,\n      radius,\n      inverted,\n      keepMounted,\n      classNames,\n      styles,\n      unstyled\n    }\n  }, children);\n}\nTabsProvider.displayName = \"@mantine/core/TabsProvider\";\nexport { TabsProvider };","map":{"version":3,"sources":["../../src/Tabs/TabsProvider.tsx"],"names":[],"mappings":";;;;;AAKO,SAAS,YAAY,CAAA,IAAA,EAmBzB;EAAA,IAnB0B;IAC3B,YAAY;IACZ,KAAK;IACL,WAAW;IACX,WAAW;IACX,QAAQ;IACR,IAAI;IACJ,EAAE;IACF,uBAAuB;IACvB,oBAAoB;IACpB,OAAO;IACP,KAAK;IACL,MAAM;IACN,QAAQ;IACR,SAAS;IACT,WAAW,GAAG,IAAI;IAClB,UAAU;IACV,MAAM;IACN;EACF,CAAC,GAAA,IAAA;EACC,MAAM,GAAG,GAAG,KAAK,CAAC,EAAE,CAAC;EACrB,MAAM,CAAC,eAAe,EAAE,kBAAkB,CAAC,GAAG,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAAC,MAAM,EAAE,QAAQ,CAAC,GAAG,eAAe,CAAC;IACzC,KAAK;IACL,YAAY;IACZ,UAAU,EAAE,IAAI;IAChB,QAAQ,EAAE;EACd,CAAG,CAAC;EACF,OAAA,eAAuB,KAAK,CAAC,aAAa,CAAC,mBAAmB,EAAE;IAC9D,KAAK,EAAE;MACL,SAAS;MACT,KAAK,EAAE,MAAM;MACb,WAAW;MACX,EAAE,EAAE,GAAG;MACP,IAAI;MACJ,uBAAuB;MACvB,QAAQ,EAAE,SAAS,CAAE,GAAE,GAAI,MAAK,EAAE,WAAW,CAAC,KAAK,CAAC;MACpD,UAAU,EAAE,SAAS,CAAE,GAAE,GAAI,QAAO,EAAE,WAAW,CAAC,KAAK,CAAC;MACxD,WAAW,EAAE,QAAQ;MACrB,kBAAkB;MAClB,eAAe;MACf,oBAAoB;MACpB,OAAO;MACP,KAAK;MACL,MAAM;MACN,QAAQ;MACR,WAAW;MACX,UAAU;MACV,MAAM;MACN;IACN;EACA,CAAG,EAAE,QAAQ,CAAC;AACd;AACA,YAAY,CAAC,WAAW,GAAG,4BAA4B","sourcesContent":["import React, { useState } from 'react';\nimport { getSafeId } from '@mantine/utils';\nimport { useUncontrolled, useId } from '@mantine/hooks';\nimport { ClassNames, MantineColor, MantineNumberSize, Styles } from '@mantine/styles';\nimport { TabsContextProvider } from './Tabs.context';\nimport { TABS_ERRORS } from './Tabs.errors';\nimport {\n  TabsValue,\n  TabsOrientation,\n  TabsVariant,\n  TabsPlacement,\n  TabsStylesParams,\n} from './Tabs.types';\nimport type { TabsStylesNames } from './Tabs';\n\nexport interface TabsProviderProps {\n  /** Default value for uncontrolled component */\n  defaultValue?: TabsValue;\n\n  /** Value for controlled component */\n  value?: TabsValue;\n\n  /** Callback for controlled component */\n  onTabChange?(value: TabsValue): void;\n\n  /** Tabs orientation, vertical or horizontal */\n  orientation?: TabsOrientation;\n\n  /** Tabs.List placement relative to Tabs.Panel, applicable only for orientation=\"vertical\", left by default */\n  placement?: TabsPlacement;\n\n  /** Base id, used to generate ids that connect labels with controls, by default generated randomly */\n  id?: string;\n\n  /** Determines whether arrow key presses should loop though items (first to last and last to first) */\n  loop?: boolean;\n\n  /** Determines whether tab should be activated with arrow key press, defaults to true */\n  activateTabWithKeyboard?: boolean;\n\n  /** Determines whether tab can be deactivated, defaults to false */\n  allowTabDeactivation?: boolean;\n\n  /** Tabs content */\n  children: React.ReactNode;\n\n  /** Controls component visuals */\n  variant?: TabsVariant;\n\n  /** Key of theme.colors */\n  color?: MantineColor;\n\n  /** Key of theme.radius or any valid CSS value to set border-radius, theme.defaultRadius by default */\n  radius?: MantineNumberSize;\n\n  /** Determines whether tabs should have inverted styles */\n  inverted?: boolean;\n\n  /** If set to false, Tabs.Panel content will not stay mounted when tab is not active */\n  keepMounted?: boolean;\n}\n\ninterface _TabsProviderProps extends TabsProviderProps {\n  classNames?: ClassNames<TabsStylesNames>;\n  styles?: Styles<TabsStylesNames, TabsStylesParams>;\n  unstyled?: boolean;\n}\n\nexport function TabsProvider({\n  defaultValue,\n  value,\n  onTabChange,\n  orientation,\n  children,\n  loop,\n  id,\n  activateTabWithKeyboard,\n  allowTabDeactivation,\n  variant,\n  color,\n  radius,\n  inverted,\n  placement,\n  keepMounted = true,\n  classNames,\n  styles,\n  unstyled,\n}: _TabsProviderProps) {\n  const uid = useId(id);\n\n  const [mountedPanelIds, setMountedPanelIds] = useState([]);\n\n  const [_value, onChange] = useUncontrolled<TabsValue>({\n    value,\n    defaultValue,\n    finalValue: null,\n    onChange: onTabChange,\n  });\n\n  return (\n    <TabsContextProvider\n      value={{\n        placement,\n        value: _value,\n        orientation,\n        id: uid,\n        loop,\n        activateTabWithKeyboard,\n        getTabId: getSafeId(`${uid}-tab`, TABS_ERRORS.value),\n        getPanelId: getSafeId(`${uid}-panel`, TABS_ERRORS.value),\n        onTabChange: onChange,\n        setMountedPanelIds,\n        mountedPanelIds,\n        allowTabDeactivation,\n        variant,\n        color,\n        radius,\n        inverted,\n        keepMounted,\n        classNames,\n        styles,\n        unstyled,\n      }}\n    >\n      {children}\n    </TabsContextProvider>\n  );\n}\n\nTabsProvider.displayName = '@mantine/core/TabsProvider';\n"]},"metadata":{},"sourceType":"module"}