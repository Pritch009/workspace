{"ast":null,"code":"import { useCallback, useState, useEffect } from 'react';\nimport { useWindowEvent } from '../use-window-event/use-window-event.js';\nfunction serializeJSON(value, hookName) {\n  try {\n    return JSON.stringify(value);\n  } catch (error) {\n    throw new Error(`@mantine/hooks ${hookName}: Failed to serialize the value`);\n  }\n}\nfunction deserializeJSON(value) {\n  try {\n    return JSON.parse(value);\n  } catch (e) {\n    return value;\n  }\n}\nfunction createStorage(type, hookName) {\n  const eventName = type === \"localStorage\" ? \"mantine-local-storage\" : \"mantine-session-storage\";\n  return function useStorage(_ref) {\n    let {\n      key,\n      defaultValue = void 0,\n      getInitialValueInEffect = true,\n      deserialize = deserializeJSON,\n      serialize = value => serializeJSON(value, hookName)\n    } = _ref;\n    const readStorageValue = useCallback(skipStorage => {\n      if (typeof window === \"undefined\" || !(type in window) || window[type] === null || skipStorage) {\n        return defaultValue;\n      }\n      const storageValue = window[type].getItem(key);\n      return storageValue !== null ? deserialize(storageValue) : defaultValue;\n    }, [key, defaultValue]);\n    const [value, setValue] = useState(readStorageValue(getInitialValueInEffect));\n    const setStorageValue = useCallback(val => {\n      if (val instanceof Function) {\n        setValue(current => {\n          const result = val(current);\n          window[type].setItem(key, serialize(result));\n          window.dispatchEvent(new CustomEvent(eventName, {\n            detail: {\n              key,\n              value: val(current)\n            }\n          }));\n          return result;\n        });\n      } else {\n        window[type].setItem(key, serialize(val));\n        window.dispatchEvent(new CustomEvent(eventName, {\n          detail: {\n            key,\n            value: val\n          }\n        }));\n        setValue(val);\n      }\n    }, [key]);\n    const removeStorageValue = useCallback(() => {\n      window[type].removeItem(key);\n      window.dispatchEvent(new CustomEvent(eventName, {\n        detail: {\n          key,\n          value: defaultValue\n        }\n      }));\n    }, []);\n    useWindowEvent(\"storage\", event => {\n      var _a;\n      if (event.storageArea === window[type] && event.key === key) {\n        setValue(deserialize((_a = event.newValue) != null ? _a : void 0));\n      }\n    });\n    useWindowEvent(eventName, event => {\n      if (event.detail.key === key) {\n        setValue(event.detail.value);\n      }\n    });\n    useEffect(() => {\n      if (defaultValue !== void 0 && value === void 0) {\n        setStorageValue(defaultValue);\n      }\n    }, [defaultValue, value, setStorageValue]);\n    useEffect(() => {\n      if (getInitialValueInEffect) {\n        setValue(readStorageValue());\n      }\n    }, []);\n    return [value === void 0 ? defaultValue : value, setStorageValue, removeStorageValue];\n  };\n}\nexport { createStorage };","map":{"version":3,"sources":["../../src/use-local-storage/create-storage.ts"],"names":[],"mappings":"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","sourcesContent":["import { useState, useCallback, useEffect } from 'react';\nimport { useWindowEvent } from '../use-window-event/use-window-event';\n\nexport type StorageType = 'localStorage' | 'sessionStorage';\n\nexport interface IStorageProperties<T> {\n  /** Storage key */\n  key: string;\n\n  /** Default value that will be set if value is not found in storage */\n  defaultValue?: T;\n\n  /** If set to true, value will be updated in useEffect after mount */\n  getInitialValueInEffect?: boolean;\n\n  /** Function to serialize value into a string to be saved in storage */\n  serialize?(value: T): string;\n\n  /** Function to deserialize string value from storage to value */\n  deserialize?(value: string): T;\n}\n\nfunction serializeJSON<T>(value: T, hookName: string) {\n  try {\n    return JSON.stringify(value);\n  } catch (error) {\n    throw new Error(`@mantine/hooks ${hookName}: Failed to serialize the value`);\n  }\n}\n\nfunction deserializeJSON(value: string) {\n  try {\n    return JSON.parse(value);\n  } catch {\n    return value;\n  }\n}\n\nexport function createStorage<T>(type: StorageType, hookName: string) {\n  const eventName = type === 'localStorage' ? 'mantine-local-storage' : 'mantine-session-storage';\n\n  return function useStorage({\n    key,\n    defaultValue = undefined,\n    getInitialValueInEffect = true,\n    deserialize = deserializeJSON,\n    serialize = (value: T) => serializeJSON(value, hookName),\n  }: IStorageProperties<T>) {\n    const readStorageValue = useCallback(\n      (skipStorage?: boolean): T => {\n        if (\n          typeof window === 'undefined' ||\n          !(type in window) ||\n          window[type] === null ||\n          skipStorage\n        ) {\n          return defaultValue as T;\n        }\n\n        const storageValue = window[type].getItem(key);\n\n        return storageValue !== null ? deserialize(storageValue) : (defaultValue as T);\n      },\n      [key, defaultValue]\n    );\n\n    const [value, setValue] = useState<T>(readStorageValue(getInitialValueInEffect));\n\n    const setStorageValue = useCallback(\n      (val: T | ((prevState: T) => T)) => {\n        if (val instanceof Function) {\n          setValue((current) => {\n            const result = val(current);\n            window[type].setItem(key, serialize(result));\n            window.dispatchEvent(\n              new CustomEvent(eventName, { detail: { key, value: val(current) } })\n            );\n            return result;\n          });\n        } else {\n          window[type].setItem(key, serialize(val));\n          window.dispatchEvent(new CustomEvent(eventName, { detail: { key, value: val } }));\n          setValue(val);\n        }\n      },\n      [key]\n    );\n\n    const removeStorageValue = useCallback(() => {\n      window[type].removeItem(key);\n      window.dispatchEvent(new CustomEvent(eventName, { detail: { key, value: defaultValue } }));\n    }, []);\n\n    useWindowEvent('storage', (event) => {\n      if (event.storageArea === window[type] && event.key === key) {\n        setValue(deserialize(event.newValue ?? undefined));\n      }\n    });\n\n    useWindowEvent(eventName, (event) => {\n      if (event.detail.key === key) {\n        setValue(event.detail.value);\n      }\n    });\n\n    useEffect(() => {\n      if (defaultValue !== undefined && value === undefined) {\n        setStorageValue(defaultValue);\n      }\n    }, [defaultValue, value, setStorageValue]);\n\n    useEffect(() => {\n      if (getInitialValueInEffect) {\n        setValue(readStorageValue());\n      }\n    }, []);\n\n    return [\n      value === undefined ? defaultValue : value,\n      setStorageValue,\n      removeStorageValue,\n    ] as const;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}