{"ast":null,"code":"import React from 'react';\nimport { Global } from '@emotion/react';\nimport { rem, em } from './utils/rem/rem.js';\nfunction assignSizeVariables(variables, sizes, name) {\n  let targetUnitConverter = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : rem;\n  Object.keys(sizes).forEach(size => {\n    variables[`--mantine-${name}-${size}`] = targetUnitConverter(sizes[size]);\n  });\n}\nfunction MantineCssVariables(_ref) {\n  let {\n    theme\n  } = _ref;\n  const variables = {\n    \"--mantine-color-white\": theme.white,\n    \"--mantine-color-black\": theme.black,\n    \"--mantine-transition-timing-function\": theme.transitionTimingFunction,\n    \"--mantine-line-height\": `${theme.lineHeight}`,\n    \"--mantine-font-family\": theme.fontFamily,\n    \"--mantine-font-family-monospace\": theme.fontFamilyMonospace,\n    \"--mantine-font-family-headings\": theme.headings.fontFamily,\n    \"--mantine-heading-font-weight\": `${theme.headings.fontWeight}`\n  };\n  assignSizeVariables(variables, theme.shadows, \"shadow\");\n  assignSizeVariables(variables, theme.fontSizes, \"font-size\");\n  assignSizeVariables(variables, theme.radius, \"radius\");\n  assignSizeVariables(variables, theme.spacing, \"spacing\");\n  assignSizeVariables(variables, theme.breakpoints, \"breakpoints\", em);\n  Object.keys(theme.colors).forEach(color => {\n    theme.colors[color].forEach((shade, index) => {\n      variables[`--mantine-color-${color}-${index}`] = shade;\n    });\n  });\n  const headings = theme.headings.sizes;\n  Object.keys(headings).forEach(heading => {\n    variables[`--mantine-${heading}-font-size`] = headings[heading].fontSize;\n    variables[`--mantine-${heading}-line-height`] = `${headings[heading].lineHeight}`;\n  });\n  return /* @__PURE__ */React.createElement(Global, {\n    styles: {\n      \":root\": variables\n    }\n  });\n}\nexport { MantineCssVariables };","map":{"version":3,"sources":["../../src/theme/MantineCssVariables.tsx"],"names":[],"mappings":";;;AAGA,SAAS,mBAAmB,CAAC,SAAS,EAAE,KAAK,EAAE,IAAI,EAA6B;EAAA,IAA3B,mBAAmB,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAG,GAAG;EAC5E,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAE,IAAI,IAAK;IACnC,SAAS,CAAE,aAAY,IAAK,IAAG,IAAK,EAAC,CAAC,GAAG,mBAAmB,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;EAC7E,CAAG,CAAC;AACJ;AACO,SAAS,mBAAmB,CAAA,IAAA,EAAY;EAAA,IAAX;IAAE;EAAK,CAAE,GAAA,IAAA;EAC3C,MAAM,SAAS,GAAG;IAChB,uBAAuB,EAAE,KAAK,CAAC,KAAK;IACpC,uBAAuB,EAAE,KAAK,CAAC,KAAK;IACpC,sCAAsC,EAAE,KAAK,CAAC,wBAAwB;IACtE,uBAAuB,EAAG,GAAE,KAAK,CAAC,UAAW,EAAC;IAC9C,uBAAuB,EAAE,KAAK,CAAC,UAAU;IACzC,iCAAiC,EAAE,KAAK,CAAC,mBAAmB;IAC5D,gCAAgC,EAAE,KAAK,CAAC,QAAQ,CAAC,UAAU;IAC3D,+BAA+B,EAAG,GAAE,KAAK,CAAC,QAAQ,CAAC,UAAW;EAClE,CAAG;EACD,mBAAmB,CAAC,SAAS,EAAE,KAAK,CAAC,OAAO,EAAE,QAAQ,CAAC;EACvD,mBAAmB,CAAC,SAAS,EAAE,KAAK,CAAC,SAAS,EAAE,WAAW,CAAC;EAC5D,mBAAmB,CAAC,SAAS,EAAE,KAAK,CAAC,MAAM,EAAE,QAAQ,CAAC;EACtD,mBAAmB,CAAC,SAAS,EAAE,KAAK,CAAC,OAAO,EAAE,SAAS,CAAC;EACxD,mBAAmB,CAAC,SAAS,EAAE,KAAK,CAAC,WAAW,EAAE,aAAa,EAAE,EAAE,CAAC;EACpE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,OAAO,CAAE,KAAK,IAAK;IAC3C,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,KAAK,KAAK;MAC5C,SAAS,CAAE,mBAAkB,KAAM,IAAG,KAAM,EAAC,CAAC,GAAG,KAAK;IAC5D,CAAK,CAAC;EACN,CAAG,CAAC;EACF,MAAM,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC,KAAK;EACrC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAE,OAAO,IAAK;IACzC,SAAS,CAAE,aAAY,OAAQ,YAAW,CAAC,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC,QAAQ;IACxE,SAAS,CAAE,aAAY,OAAQ,cAAa,CAAC,GAAI,GAAE,QAAQ,CAAC,OAAO,CAAC,CAAC,UAAW,EAAC;EACrF,CAAG,CAAC;EACF,OAAA,eAAuB,KAAK,CAAC,aAAa,CAAC,MAAM,EAAE;IACjD,MAAM,EAAE;MACN,OAAO,EAAE;IACf;EACA,CAAG,CAAC;AACJ","sourcesContent":["import React from 'react';\nimport { Global } from '@emotion/react';\nimport type { MantineTheme, MantineSize } from './types';\nimport { rem, em } from './utils';\n\nfunction assignSizeVariables(\n  variables: Record<string, string>,\n  sizes: Record<MantineSize, number | string>,\n  name: string,\n  targetUnitConverter: typeof rem = rem\n) {\n  Object.keys(sizes).forEach((size) => {\n    // eslint-disable-next-line no-param-reassign\n    variables[`--mantine-${name}-${size}`] = targetUnitConverter(sizes[size]);\n  });\n}\n\nexport function MantineCssVariables({ theme }: { theme: MantineTheme }) {\n  const variables: Record<string, string> = {\n    '--mantine-color-white': theme.white,\n    '--mantine-color-black': theme.black,\n    '--mantine-transition-timing-function': theme.transitionTimingFunction,\n    '--mantine-line-height': `${theme.lineHeight}`,\n    '--mantine-font-family': theme.fontFamily,\n    '--mantine-font-family-monospace': theme.fontFamilyMonospace,\n    '--mantine-font-family-headings': theme.headings.fontFamily,\n    '--mantine-heading-font-weight': `${theme.headings.fontWeight}`,\n  };\n\n  assignSizeVariables(variables, theme.shadows, 'shadow');\n  assignSizeVariables(variables, theme.fontSizes, 'font-size');\n  assignSizeVariables(variables, theme.radius, 'radius');\n  assignSizeVariables(variables, theme.spacing, 'spacing');\n  assignSizeVariables(variables, theme.breakpoints, 'breakpoints', em);\n\n  Object.keys(theme.colors).forEach((color) => {\n    theme.colors[color].forEach((shade, index) => {\n      variables[`--mantine-color-${color}-${index}`] = shade;\n    });\n  });\n\n  const headings = theme.headings.sizes;\n\n  Object.keys(headings).forEach((heading) => {\n    variables[`--mantine-${heading}-font-size`] = headings[heading].fontSize;\n    variables[`--mantine-${heading}-line-height`] = `${headings[heading].lineHeight}`;\n  });\n\n  return (\n    <Global\n      styles={{\n        ':root': variables,\n      }}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}