{"ast":null,"code":"import { useState } from 'react';\nfunction useValidatedState(initialValue, validation, initialValidationState) {\n  const [value, setValue] = useState(initialValue);\n  const [lastValidValue, setLastValidValue] = useState(validation(initialValue) ? initialValue : void 0);\n  const [valid, setValid] = useState(typeof initialValidationState === \"boolean\" ? initialValidationState : validation(initialValue));\n  const onChange = val => {\n    if (validation(val)) {\n      setLastValidValue(val);\n      setValid(true);\n    } else {\n      setValid(false);\n    }\n    setValue(val);\n  };\n  return [{\n    value,\n    lastValidValue,\n    valid\n  }, onChange];\n}\nexport { useValidatedState };","map":{"version":3,"sources":["../../src/use-validated-state/use-validated-state.ts"],"names":[],"mappings":";AACO,SAAS,iBAAiB,CAAC,YAAY,EAAE,UAAU,EAAE,sBAAsB,EAAE;EAClF,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAC,YAAY,CAAC;EAChD,MAAM,CAAC,cAAc,EAAE,iBAAiB,CAAC,GAAG,QAAQ,CAAC,UAAU,CAAC,YAAY,CAAC,GAAG,YAAY,GAAG,KAAK,CAAC,CAAC;EACtG,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAC,OAAO,sBAAsB,KAAK,SAAS,GAAG,sBAAsB,GAAG,UAAU,CAAC,YAAY,CAAC,CAAC;EACnI,MAAM,QAAQ,GAAI,GAAG,IAAK;IACxB,IAAI,UAAU,CAAC,GAAG,CAAC,EAAE;MACnB,iBAAiB,CAAC,GAAG,CAAC;MACtB,QAAQ,CAAC,IAAI,CAAC;IACpB,CAAK,MAAM;MACL,QAAQ,CAAC,KAAK,CAAC;IACrB;IACI,QAAQ,CAAC,GAAG,CAAC;EACjB,CAAG;EACD,OAAO,CAAC;IAAE,KAAK;IAAE,cAAc;IAAE;EAAK,CAAE,EAAE,QAAQ,CAAC;AACrD","sourcesContent":["import { useState } from 'react';\n\nexport function useValidatedState<T>(\n  initialValue: T,\n  validation: (value: T) => boolean,\n  initialValidationState?: boolean\n) {\n  const [value, setValue] = useState<T>(initialValue);\n  const [lastValidValue, setLastValidValue] = useState<T>(\n    validation(initialValue) ? initialValue : undefined\n  );\n  const [valid, setValid] = useState<boolean>(\n    typeof initialValidationState === 'boolean' ? initialValidationState : validation(initialValue)\n  );\n\n  const onChange = (val: T) => {\n    if (validation(val)) {\n      setLastValidValue(val);\n      setValid(true);\n    } else {\n      setValid(false);\n    }\n\n    setValue(val);\n  };\n\n  return [{ value, lastValidValue, valid }, onChange] as const;\n}\n"]},"metadata":{},"sourceType":"module"}