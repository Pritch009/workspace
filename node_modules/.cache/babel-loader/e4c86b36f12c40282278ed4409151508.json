{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nfunction getCurves(_ref) {\n  let {\n    size,\n    thickness,\n    sections,\n    renderRoundedLineCaps,\n    rootColor\n  } = _ref;\n  const sum = sections.reduce((acc, current) => acc + current.value, 0);\n  const accumulated = Math.PI * ((size * 0.9 - thickness * 2) / 2) * 2;\n  let offset = accumulated;\n  const curves = [];\n  const curvesInOrder = [];\n  for (let i = 0; i < sections.length; i += 1) {\n    curves.push({\n      sum,\n      offset,\n      data: sections[i],\n      root: false\n    });\n    offset -= sections[i].value / 100 * accumulated;\n  }\n  curves.push({\n    sum,\n    offset,\n    data: {\n      color: rootColor\n    },\n    root: true\n  });\n  curvesInOrder.push(__spreadProps(__spreadValues({}, curves[curves.length - 1]), {\n    lineRoundCaps: false\n  }));\n  if (curves.length > 2) {\n    curvesInOrder.push(__spreadProps(__spreadValues({}, curves[0]), {\n      lineRoundCaps: renderRoundedLineCaps\n    }));\n    curvesInOrder.push(__spreadProps(__spreadValues({}, curves[curves.length - 2]), {\n      lineRoundCaps: renderRoundedLineCaps\n    }));\n    for (let i = 1; i <= curves.length - 3; i += 1) {\n      curvesInOrder.push(__spreadProps(__spreadValues({}, curves[i]), {\n        lineRoundCaps: false\n      }));\n    }\n  } else {\n    curvesInOrder.push(__spreadProps(__spreadValues({}, curves[0]), {\n      lineRoundCaps: renderRoundedLineCaps\n    }));\n  }\n  return curvesInOrder;\n}\nexport { getCurves };","map":{"version":3,"sources":["../../../src/RingProgress/get-curves/get-curves.ts"],"names":[],"mappings":"AAAA,IAAI,SAAS,GAAG,MAAM,CAAC,cAAc;AACrC,IAAI,UAAU,GAAG,MAAM,CAAC,gBAAgB;AACxC,IAAI,iBAAiB,GAAG,MAAM,CAAC,yBAAyB;AACxD,IAAI,mBAAmB,GAAG,MAAM,CAAC,qBAAqB;AACtD,IAAI,YAAY,GAAG,MAAM,CAAC,SAAS,CAAC,cAAc;AAClD,IAAI,YAAY,GAAG,MAAM,CAAC,SAAS,CAAC,oBAAoB;AACxD,IAAI,eAAe,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,KAAK,GAAG,IAAI,GAAG,GAAG,SAAS,CAAC,GAAG,EAAE,GAAG,EAAE;EAAE,UAAU,EAAE,IAAI;EAAE,YAAY,EAAE,IAAI;EAAE,QAAQ,EAAE,IAAI;EAAE;AAAK,CAAE,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK;AAC/J,IAAI,cAAc,GAAG,CAAC,CAAC,EAAE,CAAC,KAAK;EAC7B,KAAK,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAA,CAAE,CAAC,EAC5B,IAAI,YAAY,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,EAC5B,eAAe,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC;EACrC,IAAI,mBAAmB,EACrB,KAAK,IAAI,IAAI,IAAI,mBAAmB,CAAC,CAAC,CAAC,EAAE;IACvC,IAAI,YAAY,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,EAC5B,eAAe,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC;EACzC;EACE,OAAO,CAAC;AACV,CAAC;AACD,IAAI,aAAa,GAAG,CAAC,CAAC,EAAE,CAAC,KAAK,UAAU,CAAC,CAAC,EAAE,iBAAiB,CAAC,CAAC,CAAC,CAAC;AAC1D,SAAS,SAAS,CAAA,IAAA,EAMtB;EAAA,IANuB;IACxB,IAAI;IACJ,SAAS;IACT,QAAQ;IACR,qBAAqB;IACrB;EACF,CAAC,GAAA,IAAA;EACC,MAAM,GAAG,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,OAAO,KAAK,GAAG,GAAG,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC;EACrE,MAAM,WAAW,GAAG,IAAI,CAAC,EAAE,IAAI,CAAC,IAAI,GAAG,GAAG,GAAG,SAAS,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC;EACpE,IAAI,MAAM,GAAG,WAAW;EACxB,MAAM,MAAM,GAAG,EAAE;EACjB,MAAM,aAAa,GAAG,EAAE;EACxB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;IAC3C,MAAM,CAAC,IAAI,CAAC;MAAE,GAAG;MAAE,MAAM;MAAE,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC;MAAE,IAAI,EAAE;IAAK,CAAE,CAAC;IAC5D,MAAM,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,GAAG,WAAW;EACnD;EACE,MAAM,CAAC,IAAI,CAAC;IAAE,GAAG;IAAE,MAAM;IAAE,IAAI,EAAE;MAAE,KAAK,EAAE;IAAS,CAAE;IAAE,IAAI,EAAE;EAAI,CAAE,CAAC;EACpE,aAAa,CAAC,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAA,CAAE,EAAE,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,EAAE;IAAE,aAAa,EAAE;EAAK,CAAE,CAAC,CAAC;EAC1G,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;IACrB,aAAa,CAAC,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAA,CAAE,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE;MAAE,aAAa,EAAE;IAAqB,CAAE,CAAC,CAAC;IAC1G,aAAa,CAAC,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAA,CAAE,EAAE,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,EAAE;MAAE,aAAa,EAAE;IAAqB,CAAE,CAAC,CAAC;IAC1H,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE;MAC9C,aAAa,CAAC,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAA,CAAE,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE;QAAE,aAAa,EAAE;MAAK,CAAE,CAAC,CAAC;IAChG;EACA,CAAG,MAAM;IACL,aAAa,CAAC,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAA,CAAE,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE;MAAE,aAAa,EAAE;IAAqB,CAAE,CAAC,CAAC;EAC9G;EACE,OAAO,aAAa;AACtB","sourcesContent":["import type { MantineColor } from '@mantine/styles';\n\ninterface CurveData extends React.ComponentPropsWithRef<'circle'> {\n  value: number;\n  color: MantineColor;\n  tooltip?: React.ReactNode;\n}\n\ninterface RootCurveData extends React.ComponentPropsWithRef<'circle'> {\n  color?: MantineColor;\n}\n\ninterface GetCurves {\n  sections: CurveData[];\n  size: number;\n  thickness: number;\n  renderRoundedLineCaps: boolean;\n  rootColor?: MantineColor;\n}\n\ninterface Curve {\n  sum: number;\n  offset: number;\n  root: boolean;\n  data: CurveData | RootCurveData;\n  lineRoundCaps?: boolean;\n}\n\nexport function getCurves({\n  size,\n  thickness,\n  sections,\n  renderRoundedLineCaps,\n  rootColor,\n}: GetCurves) {\n  const sum = sections.reduce((acc, current) => acc + current.value, 0);\n  const accumulated = Math.PI * ((size * 0.9 - thickness * 2) / 2) * 2;\n  let offset = accumulated;\n  const curves: Curve[] = [];\n  const curvesInOrder: Curve[] = [];\n\n  for (let i = 0; i < sections.length; i += 1) {\n    curves.push({ sum, offset, data: sections[i], root: false });\n    offset -= (sections[i].value / 100) * accumulated;\n  }\n\n  curves.push({ sum, offset, data: { color: rootColor }, root: true });\n\n  // Reorder curves to layer appropriately and selectively set caps to round\n\n  curvesInOrder.push({ ...curves[curves.length - 1], lineRoundCaps: false });\n  if (curves.length > 2) {\n    curvesInOrder.push({ ...curves[0], lineRoundCaps: renderRoundedLineCaps });\n    curvesInOrder.push({ ...curves[curves.length - 2], lineRoundCaps: renderRoundedLineCaps });\n    for (let i = 1; i <= curves.length - 3; i += 1) {\n      curvesInOrder.push({ ...curves[i], lineRoundCaps: false });\n    }\n  } else {\n    curvesInOrder.push({ ...curves[0], lineRoundCaps: renderRoundedLineCaps });\n  }\n\n  return curvesInOrder;\n}\n"]},"metadata":{},"sourceType":"module"}