{"ast":null,"code":"function groupOptions(_ref) {\n  let {\n    data\n  } = _ref;\n  const sortedData = [];\n  const unGroupedData = [];\n  const groupedData = data.reduce((acc, item, index) => {\n    if (item.group) {\n      if (acc[item.group]) acc[item.group].push(index);else acc[item.group] = [index];\n    } else {\n      unGroupedData.push(index);\n    }\n    return acc;\n  }, {});\n  Object.keys(groupedData).forEach(groupName => {\n    sortedData.push(...groupedData[groupName].map(index => data[index]));\n  });\n  sortedData.push(...unGroupedData.map(itemIndex => data[itemIndex]));\n  return sortedData;\n}\nfunction getGroupedOptions(data) {\n  const sorted = groupOptions({\n    data\n  });\n  const unGrouped = [];\n  const grouped = [];\n  let groupName = null;\n  sorted.forEach((item, index) => {\n    if (!item.group) {\n      unGrouped.push({\n        type: \"item\",\n        item,\n        index\n      });\n    } else {\n      if (groupName !== item.group) {\n        groupName = item.group;\n        grouped.push({\n          type: \"label\",\n          label: groupName\n        });\n      }\n      grouped.push({\n        type: \"item\",\n        item,\n        index\n      });\n    }\n  });\n  return {\n    grouped,\n    unGrouped,\n    items: [...grouped, ...unGrouped],\n    hasItems: grouped.length > 0 || unGrouped.length > 0\n  };\n}\nexport { getGroupedOptions, groupOptions };","map":{"version":3,"sources":["../../src/group-options/group-options.ts"],"names":[],"mappings":"AAAO,SAAS,YAAY,CAAA,IAAA,EAAW;EAAA,IAAV;IAAE;EAAI,CAAE,GAAA,IAAA;EACnC,MAAM,UAAU,GAAG,EAAE;EACrB,MAAM,aAAa,GAAG,EAAE;EACxB,MAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,KAAK,KAAK;IACpD,IAAI,IAAI,CAAC,KAAK,EAAE;MACd,IAAI,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,EACjB,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,KAE5B,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC;IACjC,CAAK,MAAM;MACL,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC;IAC/B;IACI,OAAO,GAAG;EACd,CAAG,EAAE,CAAA,CAAE,CAAC;EACN,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,OAAO,CAAE,SAAS,IAAK;IAC9C,UAAU,CAAC,IAAI,CAAC,GAAG,WAAW,CAAC,SAAS,CAAC,CAAC,GAAG,CAAE,KAAK,IAAK,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;EAC1E,CAAG,CAAC;EACF,UAAU,CAAC,IAAI,CAAC,GAAG,aAAa,CAAC,GAAG,CAAE,SAAS,IAAK,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;EACrE,OAAO,UAAU;AACnB;AACO,SAAS,iBAAiB,CAAC,IAAI,EAAE;EACtC,MAAM,MAAM,GAAG,YAAY,CAAC;IAAE;EAAI,CAAE,CAAC;EACrC,MAAM,SAAS,GAAG,EAAE;EACpB,MAAM,OAAO,GAAG,EAAE;EAClB,IAAI,SAAS,GAAG,IAAI;EACpB,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,KAAK,KAAK;IAC9B,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;MACf,SAAS,CAAC,IAAI,CAAC;QAAE,IAAI,EAAE,MAAM;QAAE,IAAI;QAAE;MAAK,CAAE,CAAC;IACnD,CAAK,MAAM;MACL,IAAI,SAAS,KAAK,IAAI,CAAC,KAAK,EAAE;QAC5B,SAAS,GAAG,IAAI,CAAC,KAAK;QACtB,OAAO,CAAC,IAAI,CAAC;UAAE,IAAI,EAAE,OAAO;UAAE,KAAK,EAAE;QAAS,CAAE,CAAC;MACzD;MACM,OAAO,CAAC,IAAI,CAAC;QAAE,IAAI,EAAE,MAAM;QAAE,IAAI;QAAE;MAAK,CAAE,CAAC;IACjD;EACA,CAAG,CAAC;EACF,OAAO;IACL,OAAO;IACP,SAAS;IACT,KAAK,EAAE,CAAC,GAAG,OAAO,EAAE,GAAG,SAAS,CAAC;IACjC,QAAQ,EAAE,OAAO,CAAC,MAAM,GAAG,CAAC,IAAI,SAAS,CAAC,MAAM,GAAG;EACvD,CAAG;AACH","sourcesContent":["interface GroupData {\n  data: { group?: string }[];\n}\n\nexport function groupOptions({ data }: GroupData) {\n  const sortedData = [];\n  const unGroupedData = [];\n  const groupedData = data.reduce((acc, item, index) => {\n    if (item.group) {\n      if (acc[item.group]) acc[item.group].push(index);\n      else acc[item.group] = [index];\n    } else {\n      unGroupedData.push(index);\n    }\n    return acc;\n  }, {});\n\n  Object.keys(groupedData).forEach((groupName) => {\n    sortedData.push(...groupedData[groupName].map((index) => data[index]));\n  });\n\n  sortedData.push(...unGroupedData.map((itemIndex) => data[itemIndex]));\n\n  return sortedData;\n}\n\nexport function getGroupedOptions<T extends any[]>(data: T) {\n  type Item = { type: 'item'; item: T[number]; index: number };\n  type Label = { type: 'label'; label: string };\n\n  const sorted = groupOptions({ data });\n  const unGrouped: Item[] = [];\n  const grouped: (Item | Label)[] = [];\n  let groupName = null;\n\n  sorted.forEach((item, index) => {\n    if (!item.group) {\n      unGrouped.push({ type: 'item', item, index });\n    } else {\n      if (groupName !== item.group) {\n        groupName = item.group;\n        grouped.push({ type: 'label', label: groupName });\n      }\n      grouped.push({ type: 'item', item, index });\n    }\n  });\n\n  return {\n    grouped,\n    unGrouped,\n    items: [...grouped, ...unGrouped],\n    hasItems: grouped.length > 0 || unGrouped.length > 0,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}