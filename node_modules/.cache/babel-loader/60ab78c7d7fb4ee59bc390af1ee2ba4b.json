{"ast":null,"code":"import clsx from 'clsx';\nimport { serializeStyles } from '@emotion/serialize';\nimport { insertStyles, getRegisteredStyles } from '@emotion/utils';\nimport { useGuaranteedMemo } from './utils/use-guaranteed-memo/use-guaranteed-memo.js';\nimport { useEmotionCache } from './use-emotion-cache.js';\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nconst refPropertyName = \"ref\";\nfunction getRef(args) {\n  let ref;\n  if (args.length !== 1) {\n    return {\n      args,\n      ref\n    };\n  }\n  const [arg] = args;\n  if (!(arg instanceof Object)) {\n    return {\n      args,\n      ref\n    };\n  }\n  if (!(refPropertyName in arg)) {\n    return {\n      args,\n      ref\n    };\n  }\n  ref = arg[refPropertyName];\n  const argCopy = __spreadValues({}, arg);\n  delete argCopy[refPropertyName];\n  return {\n    args: [argCopy],\n    ref\n  };\n}\nconst {\n  cssFactory\n} = (() => {\n  function merge(registered, css, className) {\n    const registeredStyles = [];\n    const rawClassName = getRegisteredStyles(registered, registeredStyles, className);\n    if (registeredStyles.length < 2) {\n      return className;\n    }\n    return rawClassName + css(registeredStyles);\n  }\n  function _cssFactory(params) {\n    const {\n      cache\n    } = params;\n    const css = function () {\n      for (var _len = arguments.length, styles = new Array(_len), _key = 0; _key < _len; _key++) {\n        styles[_key] = arguments[_key];\n      }\n      const {\n        ref,\n        args\n      } = getRef(styles);\n      const serialized = serializeStyles(args, cache.registered);\n      insertStyles(cache, serialized, false);\n      return `${cache.key}-${serialized.name}${ref === void 0 ? \"\" : ` ${ref}`}`;\n    };\n    const cx = function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      return merge(cache.registered, css, clsx(args));\n    };\n    return {\n      css,\n      cx\n    };\n  }\n  return {\n    cssFactory: _cssFactory\n  };\n})();\nfunction useCss() {\n  const cache = useEmotionCache();\n  return useGuaranteedMemo(() => cssFactory({\n    cache\n  }), [cache]);\n}\nexport { cssFactory, useCss };","map":{"version":3,"sources":["../../src/tss/use-css.tsx"],"names":[],"mappings":"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","sourcesContent":["import clsx from 'clsx';\nimport { serializeStyles, RegisteredCache } from '@emotion/serialize';\nimport { insertStyles, getRegisteredStyles } from '@emotion/utils';\nimport type { EmotionCache } from '@emotion/cache';\nimport { useGuaranteedMemo } from './utils/use-guaranteed-memo/use-guaranteed-memo';\nimport type { CSS } from './types';\nimport { useEmotionCache } from './use-emotion-cache';\n\nconst refPropertyName = 'ref' as const;\n\nfunction getRef(args: any[]) {\n  let ref: string;\n\n  if (args.length !== 1) {\n    return { args, ref };\n  }\n\n  const [arg] = args;\n\n  if (!(arg instanceof Object)) {\n    return { args, ref };\n  }\n\n  if (!(refPropertyName in arg)) {\n    return { args, ref };\n  }\n\n  ref = arg[refPropertyName];\n  const argCopy = { ...arg };\n  delete argCopy[refPropertyName];\n  return { args: [argCopy], ref };\n}\n\nexport const { cssFactory } = (() => {\n  function merge(registered: RegisteredCache, css: CSS, className: string) {\n    const registeredStyles: string[] = [];\n\n    const rawClassName = getRegisteredStyles(registered, registeredStyles, className);\n\n    if (registeredStyles.length < 2) {\n      return className;\n    }\n\n    return rawClassName + css(registeredStyles);\n  }\n\n  function _cssFactory(params: { cache: EmotionCache }) {\n    const { cache } = params;\n\n    const css: CSS = (...styles: any) => {\n      const { ref, args } = getRef(styles);\n      const serialized = serializeStyles(args, cache.registered);\n      insertStyles(cache as any, serialized, false);\n      return `${cache.key}-${serialized.name}${ref === undefined ? '' : ` ${ref}`}`;\n    };\n\n    const cx = (...args: any) => merge(cache.registered, css, clsx(args));\n\n    return { css, cx };\n  }\n\n  return { cssFactory: _cssFactory };\n})();\n\nexport function useCss() {\n  const cache = useEmotionCache();\n  return useGuaranteedMemo(() => cssFactory({ cache }), [cache]);\n}\n"]},"metadata":{},"sourceType":"module"}