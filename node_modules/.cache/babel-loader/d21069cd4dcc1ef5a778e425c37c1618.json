{"ast":null,"code":"import { useState } from 'react';\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nfunction useListState() {\n  let initialValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  const [state, setState] = useState(initialValue);\n  const append = function () {\n    for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {\n      items[_key] = arguments[_key];\n    }\n    return setState(current => [...current, ...items]);\n  };\n  const prepend = function () {\n    for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      items[_key2] = arguments[_key2];\n    }\n    return setState(current => [...items, ...current]);\n  };\n  const insert = function (index) {\n    for (var _len3 = arguments.length, items = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      items[_key3 - 1] = arguments[_key3];\n    }\n    return setState(current => [...current.slice(0, index), ...items, ...current.slice(index)]);\n  };\n  const apply = fn => setState(current => current.map((item, index) => fn(item, index)));\n  const remove = function () {\n    for (var _len4 = arguments.length, indices = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      indices[_key4] = arguments[_key4];\n    }\n    return setState(current => current.filter((_, index) => !indices.includes(index)));\n  };\n  const pop = () => setState(current => {\n    const cloned = [...current];\n    cloned.pop();\n    return cloned;\n  });\n  const shift = () => setState(current => {\n    const cloned = [...current];\n    cloned.shift();\n    return cloned;\n  });\n  const reorder = _ref => {\n    let {\n      from,\n      to\n    } = _ref;\n    return setState(current => {\n      const cloned = [...current];\n      const item = current[from];\n      cloned.splice(from, 1);\n      cloned.splice(to, 0, item);\n      return cloned;\n    });\n  };\n  const setItem = (index, item) => setState(current => {\n    const cloned = [...current];\n    cloned[index] = item;\n    return cloned;\n  });\n  const setItemProp = (index, prop, value) => setState(current => {\n    const cloned = [...current];\n    cloned[index] = __spreadProps(__spreadValues({}, cloned[index]), {\n      [prop]: value\n    });\n    return cloned;\n  });\n  const applyWhere = (condition, fn) => setState(current => current.map((item, index) => condition(item, index) ? fn(item, index) : item));\n  const filter = fn => {\n    setState(current => current.filter(fn));\n  };\n  return [state, {\n    setState,\n    append,\n    prepend,\n    insert,\n    pop,\n    shift,\n    apply,\n    applyWhere,\n    remove,\n    reorder,\n    setItem,\n    setItemProp,\n    filter\n  }];\n}\nexport { useListState };","map":{"version":3,"sources":["../../src/use-list-state/use-list-state.ts"],"names":[],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\n\nexport interface UseListStateHandlers<T> {\n  setState: React.Dispatch<React.SetStateAction<T[]>>;\n  append: (...items: T[]) => void;\n  prepend: (...items: T[]) => void;\n  insert: (index: number, ...items: T[]) => void;\n  pop: () => void;\n  shift: () => void;\n  apply: (fn: (item: T, index?: number) => T) => void;\n  applyWhere: (\n    condition: (item: T, index: number) => boolean,\n    fn: (item: T, index?: number) => T\n  ) => void;\n  remove: (...indices: number[]) => void;\n  reorder: ({ from, to }: { from: number; to: number }) => void;\n  setItem: (index: number, item: T) => void;\n  setItemProp: <K extends keyof T, U extends T[K]>(index: number, prop: K, value: U) => void;\n  filter: (fn: (item: T, i: number) => boolean) => void;\n}\n\nexport type UseListState<T> = [T[], UseListStateHandlers<T>];\n\nexport function useListState<T>(initialValue: T[] = []): UseListState<T> {\n  const [state, setState] = useState(initialValue);\n\n  const append = (...items: T[]) => setState((current) => [...current, ...items]);\n  const prepend = (...items: T[]) => setState((current) => [...items, ...current]);\n\n  const insert = (index: number, ...items: T[]) =>\n    setState((current) => [...current.slice(0, index), ...items, ...current.slice(index)]);\n\n  const apply = (fn: (item: T, index?: number) => T) =>\n    setState((current) => current.map((item, index) => fn(item, index)));\n\n  const remove = (...indices: number[]) =>\n    setState((current) => current.filter((_, index) => !indices.includes(index)));\n\n  const pop = () =>\n    setState((current) => {\n      const cloned = [...current];\n      cloned.pop();\n      return cloned;\n    });\n\n  const shift = () =>\n    setState((current) => {\n      const cloned = [...current];\n      cloned.shift();\n      return cloned;\n    });\n\n  const reorder = ({ from, to }: { from: number; to: number }) =>\n    setState((current) => {\n      const cloned = [...current];\n      const item = current[from];\n\n      cloned.splice(from, 1);\n      cloned.splice(to, 0, item);\n\n      return cloned;\n    });\n\n  const setItem = (index: number, item: T) =>\n    setState((current) => {\n      const cloned = [...current];\n      cloned[index] = item;\n      return cloned;\n    });\n\n  const setItemProp = <K extends keyof T, U extends T[K]>(index: number, prop: K, value: U) =>\n    setState((current) => {\n      const cloned = [...current];\n      cloned[index] = { ...cloned[index], [prop]: value };\n      return cloned;\n    });\n\n  const applyWhere = (\n    condition: (item: T, index: number) => boolean,\n    fn: (item: T, index?: number) => T\n  ) =>\n    setState((current) =>\n      current.map((item, index) => (condition(item, index) ? fn(item, index) : item))\n    );\n\n  const filter = (fn: (item: T, i: number) => boolean) => {\n    setState((current) => current.filter(fn));\n  };\n\n  return [\n    state,\n    {\n      setState,\n      append,\n      prepend,\n      insert,\n      pop,\n      shift,\n      apply,\n      applyWhere,\n      remove,\n      reorder,\n      setItem,\n      setItemProp,\n      filter,\n    },\n  ];\n}\n"]},"metadata":{},"sourceType":"module"}