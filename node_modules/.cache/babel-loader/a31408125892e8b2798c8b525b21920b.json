{"ast":null,"code":"import { round } from './parsers.js';\nfunction hsvaToRgbaObject(_ref) {\n  let {\n    h,\n    s,\n    v,\n    a\n  } = _ref;\n  const _h = h / 360 * 6;\n  const _s = s / 100;\n  const _v = v / 100;\n  const hh = Math.floor(_h);\n  const l = _v * (1 - _s);\n  const c = _v * (1 - (_h - hh) * _s);\n  const d = _v * (1 - (1 - _h + hh) * _s);\n  const module = hh % 6;\n  return {\n    r: round([_v, c, l, l, d, _v][module] * 255),\n    g: round([d, _v, _v, c, l, l][module] * 255),\n    b: round([l, l, d, _v, _v, c][module] * 255),\n    a: round(a, 2)\n  };\n}\nfunction hsvaToRgba(color, includeAlpha) {\n  const {\n    r,\n    g,\n    b,\n    a\n  } = hsvaToRgbaObject(color);\n  if (!includeAlpha) {\n    return `rgb(${r}, ${g}, ${b})`;\n  }\n  return `rgba(${r}, ${g}, ${b}, ${round(a, 2)})`;\n}\nfunction hsvaToHsl(_ref2, includeAlpha) {\n  let {\n    h,\n    s,\n    v,\n    a\n  } = _ref2;\n  const hh = (200 - s) * v / 100;\n  const result = {\n    h: Math.round(h),\n    s: Math.round(hh > 0 && hh < 200 ? s * v / 100 / (hh <= 100 ? hh : 200 - hh) * 100 : 0),\n    l: Math.round(hh / 2)\n  };\n  if (!includeAlpha) {\n    return `hsl(${result.h}, ${result.s}%, ${result.l}%)`;\n  }\n  return `hsla(${result.h}, ${result.s}%, ${result.l}%, ${round(a, 2)})`;\n}\nfunction formatHexPart(number) {\n  const hex = number.toString(16);\n  return hex.length < 2 ? `0${hex}` : hex;\n}\nfunction hsvaToHex(color) {\n  const {\n    r,\n    g,\n    b\n  } = hsvaToRgbaObject(color);\n  return `#${formatHexPart(r)}${formatHexPart(g)}${formatHexPart(b)}`;\n}\nfunction hsvaToHexa(color) {\n  const a = Math.round(color.a * 255);\n  return `${hsvaToHex(color)}${formatHexPart(a)}`;\n}\nconst CONVERTERS = {\n  hex: hsvaToHex,\n  hexa: color => hsvaToHexa(color),\n  rgb: color => hsvaToRgba(color, false),\n  rgba: color => hsvaToRgba(color, true),\n  hsl: color => hsvaToHsl(color, false),\n  hsla: color => hsvaToHsl(color, true)\n};\nfunction convertHsvaTo(format, color) {\n  if (!color) {\n    return \"#000000\";\n  }\n  if (!(format in CONVERTERS)) {\n    return CONVERTERS.hex(color);\n  }\n  return CONVERTERS[format](color);\n}\nexport { convertHsvaTo, hsvaToHex, hsvaToHexa, hsvaToHsl, hsvaToRgba, hsvaToRgbaObject };","map":{"version":3,"sources":["../../../src/ColorPicker/converters/converters.ts"],"names":[],"mappings":"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","sourcesContent":["import { HsvaColor, RgbaColor, ColorFormat } from '../types';\nimport { round } from './parsers';\n\nexport function hsvaToRgbaObject({ h, s, v, a }: HsvaColor): RgbaColor {\n  const _h = (h / 360) * 6;\n  const _s = s / 100;\n  const _v = v / 100;\n\n  const hh = Math.floor(_h);\n  const l = _v * (1 - _s);\n  const c = _v * (1 - (_h - hh) * _s);\n  const d = _v * (1 - (1 - _h + hh) * _s);\n  const module = hh % 6;\n\n  return {\n    r: round([_v, c, l, l, d, _v][module] * 255),\n    g: round([d, _v, _v, c, l, l][module] * 255),\n    b: round([l, l, d, _v, _v, c][module] * 255),\n    a: round(a, 2),\n  };\n}\n\nexport function hsvaToRgba(color: HsvaColor, includeAlpha: boolean) {\n  const { r, g, b, a } = hsvaToRgbaObject(color);\n\n  if (!includeAlpha) {\n    return `rgb(${r}, ${g}, ${b})`;\n  }\n\n  return `rgba(${r}, ${g}, ${b}, ${round(a, 2)})`;\n}\n\nexport function hsvaToHsl({ h, s, v, a }: HsvaColor, includeAlpha: boolean) {\n  const hh = ((200 - s) * v) / 100;\n\n  const result = {\n    h: Math.round(h),\n    s: Math.round(hh > 0 && hh < 200 ? ((s * v) / 100 / (hh <= 100 ? hh : 200 - hh)) * 100 : 0),\n    l: Math.round(hh / 2),\n  };\n\n  if (!includeAlpha) {\n    return `hsl(${result.h}, ${result.s}%, ${result.l}%)`;\n  }\n\n  return `hsla(${result.h}, ${result.s}%, ${result.l}%, ${round(a, 2)})`;\n}\n\nfunction formatHexPart(number: number) {\n  const hex = number.toString(16);\n  return hex.length < 2 ? `0${hex}` : hex;\n}\n\nexport function hsvaToHex(color: HsvaColor) {\n  const { r, g, b } = hsvaToRgbaObject(color);\n  return `#${formatHexPart(r)}${formatHexPart(g)}${formatHexPart(b)}`;\n}\n\nexport function hsvaToHexa(color: HsvaColor) {\n  const a = Math.round(color.a * 255);\n\n  return `${hsvaToHex(color)}${formatHexPart(a)}`;\n}\n\nconst CONVERTERS: Record<ColorFormat, (color: HsvaColor) => string> = {\n  hex: hsvaToHex,\n  hexa: (color) => hsvaToHexa(color),\n  rgb: (color) => hsvaToRgba(color, false),\n  rgba: (color) => hsvaToRgba(color, true),\n  hsl: (color) => hsvaToHsl(color, false),\n  hsla: (color) => hsvaToHsl(color, true),\n};\n\nexport function convertHsvaTo(format: ColorFormat, color: HsvaColor) {\n  if (!color) {\n    return '#000000';\n  }\n\n  if (!(format in CONVERTERS)) {\n    return CONVERTERS.hex(color);\n  }\n\n  return CONVERTERS[format](color);\n}\n"]},"metadata":{},"sourceType":"module"}