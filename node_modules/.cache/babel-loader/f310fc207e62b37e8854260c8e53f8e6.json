{"ast":null,"code":"import { useRef, useState, useMemo, useEffect } from 'react';\nconst defaultState = {\n  x: 0,\n  y: 0,\n  width: 0,\n  height: 0,\n  top: 0,\n  left: 0,\n  bottom: 0,\n  right: 0\n};\nfunction useResizeObserver() {\n  const frameID = useRef(0);\n  const ref = useRef(null);\n  const [rect, setRect] = useState(defaultState);\n  const observer = useMemo(() => typeof window !== \"undefined\" ? new ResizeObserver(entries => {\n    const entry = entries[0];\n    if (entry) {\n      cancelAnimationFrame(frameID.current);\n      frameID.current = requestAnimationFrame(() => {\n        if (ref.current) {\n          setRect(entry.contentRect);\n        }\n      });\n    }\n  }) : null, []);\n  useEffect(() => {\n    if (ref.current) {\n      observer.observe(ref.current);\n    }\n    return () => {\n      observer.disconnect();\n      if (frameID.current) {\n        cancelAnimationFrame(frameID.current);\n      }\n    };\n  }, [ref.current]);\n  return [ref, rect];\n}\nfunction useElementSize() {\n  const [ref, {\n    width,\n    height\n  }] = useResizeObserver();\n  return {\n    ref,\n    width,\n    height\n  };\n}\nexport { useElementSize, useResizeObserver };","map":{"version":3,"sources":["../../src/use-resize-observer/use-resize-observer.ts"],"names":[],"mappings":";AACA,MAAM,YAAY,GAAG;EACnB,CAAC,EAAE,CAAC;EACJ,CAAC,EAAE,CAAC;EACJ,KAAK,EAAE,CAAC;EACR,MAAM,EAAE,CAAC;EACT,GAAG,EAAE,CAAC;EACN,IAAI,EAAE,CAAC;EACP,MAAM,EAAE,CAAC;EACT,KAAK,EAAE;AACT,CAAC;AACM,SAAS,iBAAiB,CAAA,EAAG;EAClC,MAAM,OAAO,GAAG,MAAM,CAAC,CAAC,CAAC;EACzB,MAAM,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC;EACxB,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,GAAG,QAAQ,CAAC,YAAY,CAAC;EAC9C,MAAM,QAAQ,GAAG,OAAO,CAAC,MAAM,OAAO,MAAM,KAAK,WAAW,GAAG,IAAI,cAAc,CAAE,OAAO,IAAK;IAC7F,MAAM,KAAK,GAAG,OAAO,CAAC,CAAC,CAAC;IACxB,IAAI,KAAK,EAAE;MACT,oBAAoB,CAAC,OAAO,CAAC,OAAO,CAAC;MACrC,OAAO,CAAC,OAAO,GAAG,qBAAqB,CAAC,MAAM;QAC5C,IAAI,GAAG,CAAC,OAAO,EAAE;UACf,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC;QACpC;MACA,CAAO,CAAC;IACR;EACA,CAAG,CAAC,GAAG,IAAI,EAAE,EAAE,CAAC;EACd,SAAS,CAAC,MAAM;IACd,IAAI,GAAG,CAAC,OAAO,EAAE;MACf,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC;IACnC;IACI,OAAO,MAAM;MACX,QAAQ,CAAC,UAAU,CAAA,CAAE;MACrB,IAAI,OAAO,CAAC,OAAO,EAAE;QACnB,oBAAoB,CAAC,OAAO,CAAC,OAAO,CAAC;MAC7C;IACA,CAAK;EACL,CAAG,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;EACjB,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC;AACpB;AACO,SAAS,cAAc,CAAA,EAAG;EAC/B,MAAM,CAAC,GAAG,EAAE;IAAE,KAAK;IAAE;EAAM,CAAE,CAAC,GAAG,iBAAiB,CAAA,CAAE;EACpD,OAAO;IAAE,GAAG;IAAE,KAAK;IAAE;EAAM,CAAE;AAC/B","sourcesContent":["import { useEffect, useMemo, useRef, useState } from 'react';\n\ntype ObserverRect = Omit<DOMRectReadOnly, 'toJSON'>;\n\nconst defaultState: ObserverRect = {\n  x: 0,\n  y: 0,\n  width: 0,\n  height: 0,\n  top: 0,\n  left: 0,\n  bottom: 0,\n  right: 0,\n};\n\nexport function useResizeObserver<T extends HTMLElement = any>() {\n  const frameID = useRef(0);\n  const ref = useRef<T>(null);\n\n  const [rect, setRect] = useState<ObserverRect>(defaultState);\n\n  const observer = useMemo(\n    () =>\n      typeof window !== 'undefined'\n        ? new ResizeObserver((entries: any) => {\n            const entry = entries[0];\n\n            if (entry) {\n              cancelAnimationFrame(frameID.current);\n\n              frameID.current = requestAnimationFrame(() => {\n                if (ref.current) {\n                  setRect(entry.contentRect);\n                }\n              });\n            }\n          })\n        : null,\n    []\n  );\n\n  useEffect(() => {\n    if (ref.current) {\n      observer.observe(ref.current);\n    }\n\n    return () => {\n      observer.disconnect();\n\n      if (frameID.current) {\n        cancelAnimationFrame(frameID.current);\n      }\n    };\n  }, [ref.current]);\n\n  return [ref, rect] as const;\n}\n\nexport function useElementSize<T extends HTMLElement = any>() {\n  const [ref, { width, height }] = useResizeObserver<T>();\n  return { ref, width, height };\n}\n"]},"metadata":{},"sourceType":"module"}