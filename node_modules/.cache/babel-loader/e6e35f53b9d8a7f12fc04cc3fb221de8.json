{"ast":null,"code":"import { getBreakpointValue, getSize } from '@mantine/styles';\nfunction getSortedKeys(value, theme) {\n  const sorted = Object.keys(value).filter(breakpoint => breakpoint !== \"base\").sort((a, b) => getBreakpointValue(getSize({\n    size: a,\n    sizes: theme.breakpoints\n  })) - getBreakpointValue(getSize({\n    size: b,\n    sizes: theme.breakpoints\n  })));\n  return \"base\" in value ? [\"base\", ...sorted] : sorted;\n}\nfunction getResponsiveValue(_ref) {\n  let {\n    value,\n    theme,\n    getValue,\n    property\n  } = _ref;\n  if (value == null) {\n    return void 0;\n  }\n  if (typeof value === \"object\") {\n    const result = getSortedKeys(value, theme).reduce((acc, breakpointKey) => {\n      if (breakpointKey === \"base\" && value.base !== void 0) {\n        const baseValue = getValue(value.base, theme);\n        if (Array.isArray(property)) {\n          property.forEach(prop => {\n            acc[prop] = baseValue;\n          });\n          return acc;\n        }\n        acc[property] = baseValue;\n        return acc;\n      }\n      const breakpointValue = getValue(value[breakpointKey], theme);\n      if (Array.isArray(property)) {\n        acc[theme.fn.largerThan(breakpointKey)] = {};\n        property.forEach(prop => {\n          acc[theme.fn.largerThan(breakpointKey)][prop] = breakpointValue;\n        });\n        return acc;\n      }\n      acc[theme.fn.largerThan(breakpointKey)] = {\n        [property]: breakpointValue\n      };\n      return acc;\n    }, {});\n    return result;\n  }\n  const cssValue = getValue(value, theme);\n  if (Array.isArray(property)) {\n    return property.reduce((acc, prop) => {\n      acc[prop] = cssValue;\n      return acc;\n    }, {});\n  }\n  return {\n    [property]: cssValue\n  };\n}\nexport { getResponsiveValue };","map":{"version":3,"sources":["../../../../src/Box/style-system-props/get-responsive-value/get-responsive-value.ts"],"names":[],"mappings":";AACA,SAAS,aAAa,CAAC,KAAK,EAAE,KAAK,EAAE;EACnC,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,CAAE,UAAU,IAAK,UAAU,KAAK,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,kBAAkB,CAAC,OAAO,CAAC;IAAE,IAAI,EAAE,CAAC;IAAE,KAAK,EAAE,KAAK,CAAC;EAAW,CAAE,CAAC,CAAC,GAAG,kBAAkB,CAAC,OAAO,CAAC;IAAE,IAAI,EAAE,CAAC;IAAE,KAAK,EAAE,KAAK,CAAC;EAAW,CAAE,CAAC,CAAC,CAAC;EACvO,OAAO,MAAM,IAAI,KAAK,GAAG,CAAC,MAAM,EAAE,GAAG,MAAM,CAAC,GAAG,MAAM;AACvD;AACO,SAAS,kBAAkB,CAAA,IAAA,EAAuC;EAAA,IAAtC;IAAE,KAAK;IAAE,KAAK;IAAE,QAAQ;IAAE;EAAQ,CAAE,GAAA,IAAA;EACrE,IAAI,KAAK,IAAI,IAAI,EAAE;IACjB,OAAO,KAAK,CAAC;EACjB;EACE,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;IAC7B,MAAM,MAAM,GAAG,aAAa,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,aAAa,KAAK;MACxE,IAAI,aAAa,KAAK,MAAM,IAAI,KAAK,CAAC,IAAI,KAAK,KAAK,CAAC,EAAE;QACrD,MAAM,SAAS,GAAG,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC;QAC7C,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;UAC3B,QAAQ,CAAC,OAAO,CAAE,IAAI,IAAK;YACzB,GAAG,CAAC,IAAI,CAAC,GAAG,SAAS;UACjC,CAAW,CAAC;UACF,OAAO,GAAG;QACpB;QACQ,GAAG,CAAC,QAAQ,CAAC,GAAG,SAAS;QACzB,OAAO,GAAG;MAClB;MACM,MAAM,eAAe,GAAG,QAAQ,CAAC,KAAK,CAAC,aAAa,CAAC,EAAE,KAAK,CAAC;MAC7D,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;QAC3B,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,GAAG,CAAA,CAAE;QAC5C,QAAQ,CAAC,OAAO,CAAE,IAAI,IAAK;UACzB,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,eAAe;QACzE,CAAS,CAAC;QACF,OAAO,GAAG;MAClB;MACM,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,GAAG;QACxC,CAAC,QAAQ,GAAG;MACpB,CAAO;MACD,OAAO,GAAG;IAChB,CAAK,EAAE,CAAA,CAAE,CAAC;IACN,OAAO,MAAM;EACjB;EACE,MAAM,QAAQ,GAAG,QAAQ,CAAC,KAAK,EAAE,KAAK,CAAC;EACvC,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;IAC3B,OAAO,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,KAAK;MACpC,GAAG,CAAC,IAAI,CAAC,GAAG,QAAQ;MACpB,OAAO,GAAG;IAChB,CAAK,EAAE,CAAA,CAAE,CAAC;EACV;EACE,OAAO;IAAE,CAAC,QAAQ,GAAG;EAAQ,CAAE;AACjC","sourcesContent":["import { MantineTheme, CSSObject, getSize, getBreakpointValue } from '@mantine/styles';\n\nfunction getSortedKeys(value: Record<string, any>, theme: MantineTheme) {\n  const sorted = Object.keys(value)\n    .filter((breakpoint) => breakpoint !== 'base')\n    .sort(\n      (a, b) =>\n        getBreakpointValue(getSize({ size: a, sizes: theme.breakpoints })) -\n        getBreakpointValue(getSize({ size: b, sizes: theme.breakpoints }))\n    );\n  return 'base' in value ? ['base', ...sorted] : sorted;\n}\n\nexport type StyleProperty = string | string[];\n\ninterface GetResponsiveStyles {\n  value: any;\n  theme: MantineTheme;\n  getValue: (value: any, theme: MantineTheme) => any;\n  property: StyleProperty;\n}\n\nexport function getResponsiveValue({ value, theme, getValue, property }: GetResponsiveStyles) {\n  if (value == null) {\n    return undefined;\n  }\n\n  if (typeof value === 'object') {\n    const result = getSortedKeys(value, theme).reduce<CSSObject>((acc, breakpointKey) => {\n      if (breakpointKey === 'base' && value.base !== undefined) {\n        const baseValue = getValue(value.base, theme);\n\n        if (Array.isArray(property)) {\n          property.forEach((prop) => {\n            acc[prop] = baseValue;\n          });\n          return acc;\n        }\n\n        acc[property] = baseValue;\n        return acc;\n      }\n\n      const breakpointValue = getValue(value[breakpointKey], theme);\n\n      if (Array.isArray(property)) {\n        acc[theme.fn.largerThan(breakpointKey)] = {};\n        property.forEach((prop) => {\n          acc[theme.fn.largerThan(breakpointKey)][prop] = breakpointValue;\n        });\n\n        return acc;\n      }\n\n      acc[theme.fn.largerThan(breakpointKey)] = {\n        [property]: breakpointValue,\n      };\n\n      return acc;\n    }, {});\n\n    return result;\n  }\n\n  const cssValue = getValue(value, theme);\n\n  if (Array.isArray(property)) {\n    return property.reduce((acc, prop) => {\n      acc[prop] = cssValue;\n      return acc;\n    }, {});\n  }\n\n  return { [property]: cssValue };\n}\n"]},"metadata":{},"sourceType":"module"}