{"ast":null,"code":"import React, { useState } from 'react';\nimport { RemoveScroll } from 'react-remove-scroll';\nimport { useId, useWindowEvent, useFocusReturn } from '@mantine/hooks';\nimport { getDefaultZIndex, useComponentDefaultProps } from '@mantine/styles';\nimport { ModalBaseProvider } from './ModalBase.context.js';\nimport { ModalBaseCloseButton } from './ModalBaseCloseButton/ModalBaseCloseButton.js';\nimport { ModalBaseOverlay } from './ModalBaseOverlay/ModalBaseOverlay.js';\nimport { ModalBaseContent } from './ModalBaseContent/ModalBaseContent.js';\nimport { ModalBaseHeader } from './ModalBaseHeader/ModalBaseHeader.js';\nimport { ModalBaseTitle } from './ModalBaseTitle/ModalBaseTitle.js';\nimport { ModalBaseBody } from './ModalBaseBody/ModalBaseBody.js';\nimport { NativeScrollArea } from './NativeScrollArea/NativeScrollArea.js';\nimport { useLockScroll } from './use-lock-scroll.js';\nimport useStyles from './ModalBase.styles.js';\nimport { OptionalPortal } from '../Portal/OptionalPortal.js';\nimport { Box } from '../Box/Box.js';\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source) if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)) {\n    if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n};\nconst ModalBaseDefaultProps = {\n  closeOnClickOutside: true,\n  withinPortal: true,\n  lockScroll: true,\n  trapFocus: true,\n  returnFocus: true,\n  closeOnEscape: true,\n  keepMounted: false,\n  zIndex: getDefaultZIndex(\"modal\"),\n  padding: \"md\",\n  size: \"md\",\n  shadow: \"xl\"\n};\nfunction ModalBase(props) {\n  const _a = useComponentDefaultProps(\"ModalBase\", ModalBaseDefaultProps, props),\n    {\n      opened,\n      onClose,\n      children,\n      closeOnClickOutside,\n      __staticSelector,\n      transitionProps,\n      withinPortal,\n      portalProps,\n      keepMounted,\n      target,\n      zIndex,\n      lockScroll,\n      trapFocus,\n      closeOnEscape,\n      returnFocus,\n      padding,\n      shadow,\n      id,\n      size,\n      variant,\n      classNames,\n      unstyled,\n      styles,\n      className\n    } = _a,\n    others = __objRest(_a, [\"opened\", \"onClose\", \"children\", \"closeOnClickOutside\", \"__staticSelector\", \"transitionProps\", \"withinPortal\", \"portalProps\", \"keepMounted\", \"target\", \"zIndex\", \"lockScroll\", \"trapFocus\", \"closeOnEscape\", \"returnFocus\", \"padding\", \"shadow\", \"id\", \"size\", \"variant\", \"classNames\", \"unstyled\", \"styles\", \"className\"]);\n  const {\n    classes,\n    cx\n  } = useStyles(null, {\n    name: __staticSelector,\n    classNames,\n    styles,\n    unstyled,\n    variant,\n    size\n  });\n  const _id = useId(id);\n  const [titleMounted, setTitleMounted] = useState(false);\n  const [bodyMounted, setBodyMounted] = useState(false);\n  const transitionDuration = typeof (transitionProps == null ? void 0 : transitionProps.duration) === \"number\" ? transitionProps == null ? void 0 : transitionProps.duration : 200;\n  const shouldLockScroll = useLockScroll({\n    opened,\n    transitionDuration\n  });\n  useWindowEvent(\"keydown\", event => {\n    if (!trapFocus && event.key === \"Escape\" && closeOnEscape) {\n      onClose();\n    }\n  });\n  useFocusReturn({\n    opened,\n    shouldReturnFocus: trapFocus && returnFocus\n  });\n  return /* @__PURE__ */React.createElement(OptionalPortal, __spreadProps(__spreadValues({}, portalProps), {\n    withinPortal,\n    target\n  }), /* @__PURE__ */React.createElement(ModalBaseProvider, {\n    value: {\n      __staticSelector,\n      opened,\n      onClose,\n      closeOnClickOutside,\n      transitionProps: __spreadProps(__spreadValues({}, transitionProps), {\n        duration: transitionDuration,\n        keepMounted\n      }),\n      zIndex,\n      padding,\n      id: _id,\n      getTitleId: () => `${_id}-title`,\n      getBodyId: () => `${_id}-body`,\n      titleMounted,\n      bodyMounted,\n      setTitleMounted,\n      setBodyMounted,\n      trapFocus,\n      closeOnEscape,\n      shadow,\n      stylesApi: {\n        name: __staticSelector,\n        size,\n        variant,\n        classNames,\n        styles,\n        unstyled\n      }\n    }\n  }, /* @__PURE__ */React.createElement(RemoveScroll, {\n    enabled: shouldLockScroll && lockScroll\n  }, /* @__PURE__ */React.createElement(Box, __spreadValues({\n    className: cx(classes.root, className)\n  }, others), children))));\n}\nModalBase.CloseButton = ModalBaseCloseButton;\nModalBase.Overlay = ModalBaseOverlay;\nModalBase.Content = ModalBaseContent;\nModalBase.Header = ModalBaseHeader;\nModalBase.Title = ModalBaseTitle;\nModalBase.Body = ModalBaseBody;\nModalBase.NativeScrollArea = NativeScrollArea;\nexport { ModalBase, ModalBaseDefaultProps };","map":{"version":3,"sources":["../../src/ModalBase/ModalBase.tsx"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable react/no-unused-prop-types */\nimport React, { useState } from 'react';\nimport { RemoveScroll } from 'react-remove-scroll';\nimport { useId, useWindowEvent, useFocusReturn } from '@mantine/hooks';\nimport {\n  getDefaultZIndex,\n  MantineNumberSize,\n  useComponentDefaultProps,\n  ClassNames,\n  Styles,\n  MantineShadow,\n  Selectors,\n  DefaultProps,\n} from '@mantine/styles';\nimport { OptionalPortal, PortalProps } from '../Portal';\nimport { TransitionOverride } from '../Transition';\nimport { Box } from '../Box';\nimport { ModalBaseProvider } from './ModalBase.context';\nimport {\n  ModalBaseCloseButton,\n  ModalBaseCloseButtonStylesNames,\n} from './ModalBaseCloseButton/ModalBaseCloseButton';\nimport { ModalBaseOverlay, ModalBaseOverlayStylesNames } from './ModalBaseOverlay/ModalBaseOverlay';\nimport { ModalBaseContent, ModalBaseContentStylesNames } from './ModalBaseContent/ModalBaseContent';\nimport { ModalBaseHeader, ModalBaseHeaderStylesNames } from './ModalBaseHeader/ModalBaseHeader';\nimport { ModalBaseTitle, ModalBaseTitleStylesNames } from './ModalBaseTitle/ModalBaseTitle';\nimport { ModalBaseBody, ModalBaseBodyStylesNames } from './ModalBaseBody/ModalBaseBody';\nimport { NativeScrollArea } from './NativeScrollArea/NativeScrollArea';\nimport { useLockScroll } from './use-lock-scroll';\nimport useStyles from './ModalBase.styles';\n\nexport type ModalBaseStylesNames =\n  | Selectors<typeof useStyles>\n  | ModalBaseCloseButtonStylesNames\n  | ModalBaseOverlayStylesNames\n  | ModalBaseContentStylesNames\n  | ModalBaseHeaderStylesNames\n  | ModalBaseTitleStylesNames\n  | ModalBaseBodyStylesNames;\n\nexport interface ModalBaseSettings extends DefaultProps, React.ComponentPropsWithoutRef<'div'> {\n  variant?: string;\n  classNames?: ClassNames<ModalBaseStylesNames>;\n  styles?: Styles<ModalBaseStylesNames>;\n  unstyled?: boolean;\n\n  /** If set modal/drawer will not be unmounted from the DOM when it is hidden, display: none styles will be added instead */\n  keepMounted?: boolean;\n\n  /** Determines whether modal/drawer is opened */\n  opened: boolean;\n\n  /** Called when modal/drawer is closed */\n  onClose(): void;\n\n  /** Child component */\n  children?: React.ReactNode;\n\n  /** Determines whether the modal/drawer should be closed when user clicks on the overlay, true by default */\n  closeOnClickOutside?: boolean;\n\n  /** Props added to Transition component that used to animate overlay and body, use to configure duration and animation type, { duration: 200, transition: 'pop' } by default */\n  transitionProps?: TransitionOverride;\n\n  /** Determines whether component should be rendered inside Portal, true by default */\n  withinPortal?: boolean;\n\n  /** Props to pass down to the portal when withinPortal is true */\n  portalProps?: Omit<PortalProps, 'children' | 'withinPortal' | 'target'>;\n\n  /** Target element or selector where Portal should be rendered, by default new element is created and appended to the document.body */\n  target?: HTMLElement | string;\n\n  /** Determines whether scroll should be locked when opened={true}, defaults to true */\n  lockScroll?: boolean;\n\n  /** Determines whether focus should be trapped, true by default */\n  trapFocus?: boolean;\n\n  /** z-index CSS property of root element, 200 by default */\n  zIndex?: number;\n\n  /** Key of theme.spacing or any valid CSS value to set content, header and footer padding, 'md' by default */\n  padding?: MantineNumberSize;\n\n  /** Id used to connect modal/drawer with body and title */\n  id?: string;\n\n  /** Determines whether focus should be returned to the last active element onClose is called, true by default */\n  returnFocus?: boolean;\n\n  /** Determines whether onClose should be called when user presses escape key, true by default */\n  closeOnEscape?: boolean;\n\n  /** Controls content width, 'md' by default */\n  size?: MantineNumberSize;\n\n  /** Key of theme.shadows or any valid css box-shadow value, 'xl' by default */\n  shadow?: MantineShadow;\n}\n\nexport interface ModalBaseProps extends ModalBaseSettings {\n  /** Base component name for styles and components default props */\n  __staticSelector: string;\n}\n\nexport const ModalBaseDefaultProps: Partial<ModalBaseProps> = {\n  closeOnClickOutside: true,\n  withinPortal: true,\n  lockScroll: true,\n  trapFocus: true,\n  returnFocus: true,\n  closeOnEscape: true,\n  keepMounted: false,\n  zIndex: getDefaultZIndex('modal'),\n  padding: 'md',\n  size: 'md',\n  shadow: 'xl',\n};\n\nexport function ModalBase(props: ModalBaseProps) {\n  const {\n    opened,\n    onClose,\n    children,\n    closeOnClickOutside,\n    __staticSelector,\n    transitionProps,\n    withinPortal,\n    portalProps,\n    keepMounted,\n    target,\n    zIndex,\n    lockScroll,\n    trapFocus,\n    closeOnEscape,\n    returnFocus,\n    padding,\n    shadow,\n    id,\n    size,\n    variant,\n    classNames,\n    unstyled,\n    styles,\n    className,\n    ...others\n  } = useComponentDefaultProps('ModalBase', ModalBaseDefaultProps, props);\n\n  const { classes, cx } = useStyles(null, {\n    name: __staticSelector,\n    classNames,\n    styles,\n    unstyled,\n    variant,\n    size,\n  });\n\n  const _id = useId(id);\n  const [titleMounted, setTitleMounted] = useState(false);\n  const [bodyMounted, setBodyMounted] = useState(false);\n\n  const transitionDuration =\n    typeof transitionProps?.duration === 'number' ? transitionProps?.duration : 200;\n\n  const shouldLockScroll = useLockScroll({ opened, transitionDuration });\n\n  useWindowEvent('keydown', (event) => {\n    if (!trapFocus && event.key === 'Escape' && closeOnEscape) {\n      onClose();\n    }\n  });\n\n  useFocusReturn({ opened, shouldReturnFocus: trapFocus && returnFocus });\n\n  return (\n    <OptionalPortal {...portalProps} withinPortal={withinPortal} target={target}>\n      <ModalBaseProvider\n        value={{\n          __staticSelector,\n          opened,\n          onClose,\n          closeOnClickOutside,\n          transitionProps: { ...transitionProps, duration: transitionDuration, keepMounted },\n          zIndex,\n          padding,\n          id: _id,\n          getTitleId: () => `${_id}-title`,\n          getBodyId: () => `${_id}-body`,\n          titleMounted,\n          bodyMounted,\n          setTitleMounted,\n          setBodyMounted,\n          trapFocus,\n          closeOnEscape,\n          shadow,\n          stylesApi: {\n            name: __staticSelector,\n            size,\n            variant,\n            classNames,\n            styles,\n            unstyled,\n          },\n        }}\n      >\n        <RemoveScroll enabled={shouldLockScroll && lockScroll}>\n          <Box className={cx(classes.root, className)} {...others}>\n            {children}\n          </Box>\n        </RemoveScroll>\n      </ModalBaseProvider>\n    </OptionalPortal>\n  );\n}\n\nModalBase.CloseButton = ModalBaseCloseButton;\nModalBase.Overlay = ModalBaseOverlay;\nModalBase.Content = ModalBaseContent;\nModalBase.Header = ModalBaseHeader;\nModalBase.Title = ModalBaseTitle;\nModalBase.Body = ModalBaseBody;\nModalBase.NativeScrollArea = NativeScrollArea;\n"]},"metadata":{},"sourceType":"module"}