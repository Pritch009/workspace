{"ast":null,"code":"import { useRef, useState, useEffect } from 'react';\nfunction containsRelatedTarget(event) {\n  if (event.currentTarget instanceof HTMLElement && event.relatedTarget instanceof HTMLElement) {\n    return event.currentTarget.contains(event.relatedTarget);\n  }\n  return false;\n}\nfunction useFocusWithin() {\n  let {\n    onBlur,\n    onFocus\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const ref = useRef();\n  const [focused, _setFocused] = useState(false);\n  const focusedRef = useRef(false);\n  const setFocused = value => {\n    _setFocused(value);\n    focusedRef.current = value;\n  };\n  const handleFocusIn = event => {\n    if (!focusedRef.current) {\n      setFocused(true);\n      onFocus == null ? void 0 : onFocus(event);\n    }\n  };\n  const handleFocusOut = event => {\n    if (focusedRef.current && !containsRelatedTarget(event)) {\n      setFocused(false);\n      onBlur == null ? void 0 : onBlur(event);\n    }\n  };\n  useEffect(() => {\n    if (ref.current) {\n      ref.current.addEventListener(\"focusin\", handleFocusIn);\n      ref.current.addEventListener(\"focusout\", handleFocusOut);\n      return () => {\n        var _a, _b;\n        (_a = ref.current) == null ? void 0 : _a.removeEventListener(\"focusin\", handleFocusIn);\n        (_b = ref.current) == null ? void 0 : _b.removeEventListener(\"focusout\", handleFocusOut);\n      };\n    }\n    return void 0;\n  }, [handleFocusIn, handleFocusOut]);\n  return {\n    ref,\n    focused\n  };\n}\nexport { useFocusWithin };","map":{"version":3,"sources":["../../src/use-focus-within/use-focus-within.ts"],"names":[],"mappings":";AACA,SAAS,qBAAqB,CAAC,KAAK,EAAE;EACpC,IAAI,KAAK,CAAC,aAAa,YAAY,WAAW,IAAI,KAAK,CAAC,aAAa,YAAY,WAAW,EAAE;IAC5F,OAAO,KAAK,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,aAAa,CAAC;EAC5D;EACE,OAAO,KAAK;AACd;AACO,SAAS,cAAc,CAAA,EAGtB;EAAA,IAHuB;IAC7B,MAAM;IACN;EACF,CAAC,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAG,CAAA,CAAE;EACJ,MAAM,GAAG,GAAG,MAAM,CAAA,CAAE;EACpB,MAAM,CAAC,OAAO,EAAE,WAAW,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC;EAC9C,MAAM,UAAU,GAAG,MAAM,CAAC,KAAK,CAAC;EAChC,MAAM,UAAU,GAAI,KAAK,IAAK;IAC5B,WAAW,CAAC,KAAK,CAAC;IAClB,UAAU,CAAC,OAAO,GAAG,KAAK;EAC9B,CAAG;EACD,MAAM,aAAa,GAAI,KAAK,IAAK;IAC/B,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE;MACvB,UAAU,CAAC,IAAI,CAAC;MAChB,OAAO,IAAI,IAAI,GAAG,KAAK,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC;IAC/C;EACA,CAAG;EACD,MAAM,cAAc,GAAI,KAAK,IAAK;IAChC,IAAI,UAAU,CAAC,OAAO,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,EAAE;MACvD,UAAU,CAAC,KAAK,CAAC;MACjB,MAAM,IAAI,IAAI,GAAG,KAAK,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC;IAC7C;EACA,CAAG;EACD,SAAS,CAAC,MAAM;IACd,IAAI,GAAG,CAAC,OAAO,EAAE;MACf,GAAG,CAAC,OAAO,CAAC,gBAAgB,CAAC,SAAS,EAAE,aAAa,CAAC;MACtD,GAAG,CAAC,OAAO,CAAC,gBAAgB,CAAC,UAAU,EAAE,cAAc,CAAC;MACxD,OAAO,MAAM;QACX,IAAI,EAAE,EAAE,EAAE;QACV,CAAC,EAAE,GAAG,GAAG,CAAC,OAAO,KAAK,IAAI,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC,mBAAmB,CAAC,SAAS,EAAE,aAAa,CAAC;QACtF,CAAC,EAAE,GAAG,GAAG,CAAC,OAAO,KAAK,IAAI,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC,mBAAmB,CAAC,UAAU,EAAE,cAAc,CAAC;MAChG,CAAO;IACP;IACI,OAAO,KAAK,CAAC;EACjB,CAAG,EAAE,CAAC,aAAa,EAAE,cAAc,CAAC,CAAC;EACnC,OAAO;IAAE,GAAG;IAAE;EAAO,CAAE;AACzB","sourcesContent":["import { useRef, useState, useEffect } from 'react';\n\nexport interface UseFocusWithinOptions {\n  onFocus?(event: FocusEvent): void;\n  onBlur?(event: FocusEvent): void;\n}\n\nfunction containsRelatedTarget(event: FocusEvent) {\n  if (event.currentTarget instanceof HTMLElement && event.relatedTarget instanceof HTMLElement) {\n    return event.currentTarget.contains(event.relatedTarget);\n  }\n\n  return false;\n}\n\nexport function useFocusWithin<T extends HTMLElement = any>({\n  onBlur,\n  onFocus,\n}: UseFocusWithinOptions = {}): { ref: React.MutableRefObject<T>; focused: boolean } {\n  const ref = useRef<T>();\n  const [focused, _setFocused] = useState(false);\n  const focusedRef = useRef(false);\n  const setFocused = (value: boolean) => {\n    _setFocused(value);\n    focusedRef.current = value;\n  };\n\n  const handleFocusIn = (event: FocusEvent) => {\n    if (!focusedRef.current) {\n      setFocused(true);\n      onFocus?.(event);\n    }\n  };\n\n  const handleFocusOut = (event: FocusEvent) => {\n    if (focusedRef.current && !containsRelatedTarget(event)) {\n      setFocused(false);\n      onBlur?.(event);\n    }\n  };\n\n  useEffect(() => {\n    if (ref.current) {\n      ref.current.addEventListener('focusin', handleFocusIn);\n      ref.current.addEventListener('focusout', handleFocusOut);\n\n      return () => {\n        ref.current?.removeEventListener('focusin', handleFocusIn);\n        ref.current?.removeEventListener('focusout', handleFocusOut);\n      };\n    }\n\n    return undefined;\n  }, [handleFocusIn, handleFocusOut]);\n\n  return { ref, focused };\n}\n"]},"metadata":{},"sourceType":"module"}