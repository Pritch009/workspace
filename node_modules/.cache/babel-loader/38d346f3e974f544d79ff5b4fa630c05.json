{"ast":null,"code":"import { useState } from 'react';\nimport { useIsomorphicEffect } from '../use-isomorphic-effect/use-isomorphic-effect.js';\nfunction getOS() {\n  if (typeof window === \"undefined\") {\n    return \"undetermined\";\n  }\n  const {\n    userAgent\n  } = window.navigator;\n  const macosPlatforms = /(Macintosh)|(MacIntel)|(MacPPC)|(Mac68K)/i;\n  const windowsPlatforms = /(Win32)|(Win64)|(Windows)|(WinCE)/i;\n  const iosPlatforms = /(iPhone)|(iPad)|(iPod)/i;\n  if (macosPlatforms.test(userAgent)) {\n    return \"macos\";\n  }\n  if (iosPlatforms.test(userAgent)) {\n    return \"ios\";\n  }\n  if (windowsPlatforms.test(userAgent)) {\n    return \"windows\";\n  }\n  if (/Android/i.test(userAgent)) {\n    return \"android\";\n  }\n  if (/Linux/i.test(userAgent)) {\n    return \"linux\";\n  }\n  return \"undetermined\";\n}\nfunction useOs() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    getValueInEffect: true\n  };\n  const [value, setValue] = useState(options.getValueInEffect ? \"undetermined\" : getOS());\n  useIsomorphicEffect(() => {\n    if (options.getValueInEffect) {\n      setValue(getOS);\n    }\n  }, []);\n  return value;\n}\nexport { useOs };","map":{"version":3,"sources":["../../src/use-os/use-os.ts"],"names":[],"mappings":";;AAEA,SAAS,KAAK,CAAA,EAAG;EACf,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;IACjC,OAAO,cAAc;EACzB;EACE,MAAM;IAAE;EAAS,CAAE,GAAG,MAAM,CAAC,SAAS;EACtC,MAAM,cAAc,GAAG,2CAA2C;EAClE,MAAM,gBAAgB,GAAG,oCAAoC;EAC7D,MAAM,YAAY,GAAG,yBAAyB;EAC9C,IAAI,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;IAClC,OAAO,OAAO;EAClB;EACE,IAAI,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;IAChC,OAAO,KAAK;EAChB;EACE,IAAI,gBAAgB,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;IACpC,OAAO,SAAS;EACpB;EACE,IAAI,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;IAC9B,OAAO,SAAS;EACpB;EACE,IAAI,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;IAC5B,OAAO,OAAO;EAClB;EACE,OAAO,cAAc;AACvB;AACO,SAAS,KAAK,CAAA,EAAuC;EAAA,IAAtC,OAAO,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAG;IAAE,gBAAgB,EAAE;EAAI,CAAE;EACxD,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAC,OAAO,CAAC,gBAAgB,GAAG,cAAc,GAAG,KAAK,CAAA,CAAE,CAAC;EACvF,mBAAmB,CAAC,MAAM;IACxB,IAAI,OAAO,CAAC,gBAAgB,EAAE;MAC5B,QAAQ,CAAC,KAAK,CAAC;IACrB;EACA,CAAG,EAAE,EAAE,CAAC;EACN,OAAO,KAAK;AACd","sourcesContent":["import { useState } from 'react';\nimport { useIsomorphicEffect } from '../use-isomorphic-effect/use-isomorphic-effect';\n\nexport type OS = 'undetermined' | 'macos' | 'ios' | 'windows' | 'android' | 'linux';\n\nfunction getOS(): OS {\n  if (typeof window === 'undefined') {\n    return 'undetermined';\n  }\n\n  const { userAgent } = window.navigator;\n  const macosPlatforms = /(Macintosh)|(MacIntel)|(MacPPC)|(Mac68K)/i;\n  const windowsPlatforms = /(Win32)|(Win64)|(Windows)|(WinCE)/i;\n  const iosPlatforms = /(iPhone)|(iPad)|(iPod)/i;\n\n  if (macosPlatforms.test(userAgent)) {\n    return 'macos';\n  }\n  if (iosPlatforms.test(userAgent)) {\n    return 'ios';\n  }\n  if (windowsPlatforms.test(userAgent)) {\n    return 'windows';\n  }\n  if (/Android/i.test(userAgent)) {\n    return 'android';\n  }\n  if (/Linux/i.test(userAgent)) {\n    return 'linux';\n  }\n\n  return 'undetermined';\n}\n\ninterface UseOsOptions {\n  getValueInEffect: boolean;\n}\n\nexport function useOs(options: UseOsOptions = { getValueInEffect: true }): OS {\n  const [value, setValue] = useState<OS>(options.getValueInEffect ? 'undetermined' : getOS());\n\n  useIsomorphicEffect(() => {\n    if (options.getValueInEffect) {\n      setValue(getOS);\n    }\n  }, []);\n\n  return value;\n}\n"]},"metadata":{},"sourceType":"module"}