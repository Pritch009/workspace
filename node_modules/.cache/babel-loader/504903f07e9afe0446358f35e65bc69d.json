{"ast":null,"code":"const TABBABLE_NODES = /input|select|textarea|button|object/;\nconst FOCUS_SELECTOR = \"a, input, select, textarea, button, object, [tabindex]\";\nfunction hidden(element) {\n  if (process.env.NODE_ENV === \"test\") {\n    return false;\n  }\n  return element.style.display === \"none\";\n}\nfunction visible(element) {\n  const isHidden = element.getAttribute(\"aria-hidden\") || element.getAttribute(\"hidden\") || element.getAttribute(\"type\") === \"hidden\";\n  if (isHidden) {\n    return false;\n  }\n  let parentElement = element;\n  while (parentElement) {\n    if (parentElement === document.body || parentElement.nodeType === 11) {\n      break;\n    }\n    if (hidden(parentElement)) {\n      return false;\n    }\n    parentElement = parentElement.parentNode;\n  }\n  return true;\n}\nfunction getElementTabIndex(element) {\n  let tabIndex = element.getAttribute(\"tabindex\");\n  if (tabIndex === null) {\n    tabIndex = void 0;\n  }\n  return parseInt(tabIndex, 10);\n}\nfunction focusable(element) {\n  const nodeName = element.nodeName.toLowerCase();\n  const isTabIndexNotNaN = !Number.isNaN(getElementTabIndex(element));\n  const res = TABBABLE_NODES.test(nodeName) && !element.disabled || (element instanceof HTMLAnchorElement ? element.href || isTabIndexNotNaN : isTabIndexNotNaN);\n  return res && visible(element);\n}\nfunction tabbable(element) {\n  const tabIndex = getElementTabIndex(element);\n  const isTabIndexNaN = Number.isNaN(tabIndex);\n  return (isTabIndexNaN || tabIndex >= 0) && focusable(element);\n}\nfunction findTabbableDescendants(element) {\n  return Array.from(element.querySelectorAll(FOCUS_SELECTOR)).filter(tabbable);\n}\nexport { FOCUS_SELECTOR, findTabbableDescendants, focusable, tabbable };","map":{"version":3,"sources":["../../src/use-focus-trap/tabbable.ts"],"names":[],"mappings":"AAAA,MAAM,cAAc,GAAG,qCAAqC;AAChD,MAAC,cAAc,GAAG,wDAAA;AAC9B,SAAS,MAAM,CAAC,OAAO,EAAE;EACvB,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,MAAM,EAAE;IACnC,OAAO,KAAK;EAChB;EACE,OAAO,OAAO,CAAC,KAAK,CAAC,OAAO,KAAK,MAAM;AACzC;AACA,SAAS,OAAO,CAAC,OAAO,EAAE;EACxB,MAAM,QAAQ,GAAG,OAAO,CAAC,YAAY,CAAC,aAAa,CAAC,IAAI,OAAO,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,OAAO,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,QAAQ;EACnI,IAAI,QAAQ,EAAE;IACZ,OAAO,KAAK;EAChB;EACE,IAAI,aAAa,GAAG,OAAO;EAC3B,OAAO,aAAa,EAAE;IACpB,IAAI,aAAa,KAAK,QAAQ,CAAC,IAAI,IAAI,aAAa,CAAC,QAAQ,KAAK,EAAE,EAAE;MACpE;IACN;IACI,IAAI,MAAM,CAAC,aAAa,CAAC,EAAE;MACzB,OAAO,KAAK;IAClB;IACI,aAAa,GAAG,aAAa,CAAC,UAAU;EAC5C;EACE,OAAO,IAAI;AACb;AACA,SAAS,kBAAkB,CAAC,OAAO,EAAE;EACnC,IAAI,QAAQ,GAAG,OAAO,CAAC,YAAY,CAAC,UAAU,CAAC;EAC/C,IAAI,QAAQ,KAAK,IAAI,EAAE;IACrB,QAAQ,GAAG,KAAK,CAAC;EACrB;EACE,OAAO,QAAQ,CAAC,QAAQ,EAAE,EAAE,CAAC;AAC/B;AACO,SAAS,SAAS,CAAC,OAAO,EAAE;EACjC,MAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAA,CAAE;EAC/C,MAAM,gBAAgB,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;EACnE,MAAM,GAAG,GAAG,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,KAAK,OAAO,YAAY,iBAAiB,GAAG,OAAO,CAAC,IAAI,IAAI,gBAAgB,GAAG,gBAAgB,CAAC;EAC9J,OAAO,GAAG,IAAI,OAAO,CAAC,OAAO,CAAC;AAChC;AACO,SAAS,QAAQ,CAAC,OAAO,EAAE;EAChC,MAAM,QAAQ,GAAG,kBAAkB,CAAC,OAAO,CAAC;EAC5C,MAAM,aAAa,GAAG,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC;EAC5C,OAAO,CAAC,aAAa,IAAI,QAAQ,IAAI,CAAC,KAAK,SAAS,CAAC,OAAO,CAAC;AAC/D;AACO,SAAS,uBAAuB,CAAC,OAAO,EAAE;EAC/C,OAAO,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,cAAc,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC;AAC9E","sourcesContent":["const TABBABLE_NODES = /input|select|textarea|button|object/;\nexport const FOCUS_SELECTOR = 'a, input, select, textarea, button, object, [tabindex]';\n\nfunction hidden(element: HTMLElement) {\n  if (process.env.NODE_ENV === 'test') {\n    return false;\n  }\n\n  return element.style.display === 'none';\n}\n\nfunction visible(element: HTMLElement) {\n  const isHidden =\n    element.getAttribute('aria-hidden') ||\n    element.getAttribute('hidden') ||\n    element.getAttribute('type') === 'hidden';\n\n  if (isHidden) {\n    return false;\n  }\n\n  let parentElement: HTMLElement = element;\n  while (parentElement) {\n    if (parentElement === document.body || parentElement.nodeType === 11) {\n      break;\n    }\n\n    if (hidden(parentElement)) {\n      return false;\n    }\n\n    parentElement = parentElement.parentNode as HTMLElement;\n  }\n\n  return true;\n}\n\nfunction getElementTabIndex(element: HTMLElement) {\n  let tabIndex = element.getAttribute('tabindex');\n  if (tabIndex === null) {\n    tabIndex = undefined;\n  }\n  return parseInt(tabIndex, 10);\n}\n\nexport function focusable(element: HTMLElement) {\n  const nodeName = element.nodeName.toLowerCase();\n  const isTabIndexNotNaN = !Number.isNaN(getElementTabIndex(element));\n  const res =\n    // @ts-ignore\n    (TABBABLE_NODES.test(nodeName) && !element.disabled) ||\n    (element instanceof HTMLAnchorElement ? element.href || isTabIndexNotNaN : isTabIndexNotNaN);\n\n  return res && visible(element);\n}\n\nexport function tabbable(element: HTMLElement) {\n  const tabIndex = getElementTabIndex(element);\n  const isTabIndexNaN = Number.isNaN(tabIndex);\n  return (isTabIndexNaN || tabIndex >= 0) && focusable(element);\n}\n\nexport function findTabbableDescendants(element: HTMLElement): HTMLElement[] {\n  return Array.from(element.querySelectorAll<HTMLElement>(FOCUS_SELECTOR)).filter(tabbable);\n}\n"]},"metadata":{},"sourceType":"module"}