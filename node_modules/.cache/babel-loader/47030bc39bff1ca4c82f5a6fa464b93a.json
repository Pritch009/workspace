{"ast":null,"code":"import React, { forwardRef, useState, useRef, useEffect } from 'react';\nimport { useId, useUncontrolled } from '@mantine/hooks';\nimport { useComponentDefaultProps } from '@mantine/styles';\nimport { createPinArray } from './create-pin-array/create-pin-array.js';\nimport useStyles from './PinInput.styles.js';\nimport { Group } from '../Group/Group.js';\nimport { Input } from '../Input/Input.js';\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source) if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)) {\n    if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n};\nconst regex = {\n  number: /^[0-9]+$/,\n  alphanumeric: /^[a-zA-Z0-9]+$/i\n};\nconst defaultProps = {\n  spacing: \"sm\",\n  size: \"sm\",\n  length: 4,\n  manageFocus: true,\n  placeholder: \"\\u25CB\",\n  type: \"alphanumeric\"\n};\nconst PinInput = forwardRef((props, ref) => {\n  const _a = useComponentDefaultProps(\"PinInput\", defaultProps, props),\n    {\n      name,\n      form,\n      className,\n      value,\n      defaultValue,\n      variant,\n      spacing,\n      size,\n      classNames,\n      styles,\n      unstyled,\n      sx,\n      length,\n      onChange,\n      onComplete,\n      manageFocus,\n      autoFocus,\n      error,\n      radius,\n      disabled,\n      oneTimeCode,\n      placeholder,\n      type,\n      mask,\n      \"aria-label\": ariaLabel,\n      readOnly,\n      inputType,\n      inputMode\n    } = _a,\n    others = __objRest(_a, [\"name\", \"form\", \"className\", \"value\", \"defaultValue\", \"variant\", \"spacing\", \"size\", \"classNames\", \"styles\", \"unstyled\", \"sx\", \"length\", \"onChange\", \"onComplete\", \"manageFocus\", \"autoFocus\", \"error\", \"radius\", \"disabled\", \"oneTimeCode\", \"placeholder\", \"type\", \"mask\", \"aria-label\", \"readOnly\", \"inputType\", \"inputMode\"]);\n  const uuid = useId(name);\n  const {\n    classes,\n    cx\n  } = useStyles(null, {\n    name: \"PinInput\",\n    classNames,\n    styles,\n    unstyled,\n    variant,\n    size\n  });\n  const [focusedIndex, setFocusedIndex] = useState(-1);\n  const [_value, setValues] = useUncontrolled({\n    value,\n    defaultValue,\n    finalValue: \"\",\n    onChange\n  });\n  const inputsRef = useRef([]);\n  const validate = code => {\n    const re = type instanceof RegExp ? type : type in regex ? regex[type] : null;\n    return re == null ? void 0 : re.test(code);\n  };\n  const focusInputField = (dir, index) => {\n    if (!manageFocus) return;\n    if (dir === \"next\") {\n      const nextIndex = index + 1;\n      inputsRef.current[nextIndex < length ? nextIndex : index].focus();\n    }\n    if (dir === \"prev\") {\n      const nextIndex = index - 1;\n      inputsRef.current[nextIndex > -1 ? nextIndex : index].focus();\n    }\n  };\n  const setFieldValue = (val, index) => {\n    const values = [...createPinArray(length, _value)];\n    values[index] = val;\n    setValues(values.join(\"\"));\n  };\n  const handleChange = (event, index) => {\n    const inputValue = event.target.value;\n    const nextChar = inputValue.length > 1 ? inputValue.split(\"\")[inputValue.length - 1] : inputValue;\n    const isValid = validate(nextChar);\n    if (isValid) {\n      setFieldValue(nextChar, index);\n      focusInputField(\"next\", index);\n    } else {\n      setFieldValue(\"\", index);\n    }\n  };\n  const handleKeyDown = (event, index) => {\n    if (event.key === \"ArrowLeft\") {\n      event.preventDefault();\n      focusInputField(\"prev\", index);\n    } else if (event.key === \"ArrowRight\") {\n      event.preventDefault();\n      focusInputField(\"next\", index);\n    } else if (event.key === \"Delete\") {\n      event.preventDefault();\n      setFieldValue(\"\", index);\n    } else if (event.key === \"Backspace\") {\n      event.preventDefault();\n      if (event.target.value !== \"\") {\n        setFieldValue(\"\", index);\n      } else {\n        focusInputField(\"prev\", index);\n      }\n    }\n  };\n  const handleFocus = (event, index) => {\n    event.target.select();\n    setFocusedIndex(index);\n  };\n  const handleBlur = () => {\n    setFocusedIndex(-1);\n  };\n  const handlePaste = event => {\n    event.preventDefault();\n    const copyValue = event.clipboardData.getData(\"Text\");\n    const isValid = validate(copyValue);\n    if (isValid) {\n      setValues(copyValue);\n    }\n  };\n  useEffect(() => {\n    if (_value.length !== length) return;\n    onComplete == null ? void 0 : onComplete(_value);\n  }, [_value]);\n  return /* @__PURE__ */React.createElement(React.Fragment, null, /* @__PURE__ */React.createElement(Group, __spreadValues({\n    role: \"group\",\n    spacing,\n    ref,\n    className: cx(classes.root, className),\n    sx,\n    unstyled,\n    id: uuid,\n    noWrap: true\n  }, others), createPinArray(length, _value).map((char, index) => /* @__PURE__ */React.createElement(Input, {\n    __staticSelector: \"PinInput\",\n    id: `${uuid}-${index + 1}`,\n    key: `${uuid}-${index}`,\n    inputMode: inputMode || (type === \"number\" ? \"numeric\" : \"text\"),\n    onChange: event => handleChange(event, index),\n    onKeyDown: event => handleKeyDown(event, index),\n    onFocus: event => handleFocus(event, index),\n    onBlur: handleBlur,\n    onPaste: handlePaste,\n    type: inputType || (mask ? \"password\" : type === \"number\" ? \"tel\" : \"text\"),\n    radius,\n    error,\n    variant,\n    size,\n    disabled,\n    ref: node => {\n      inputsRef.current[index] = node;\n    },\n    autoComplete: oneTimeCode ? \"one-time-code\" : \"off\",\n    placeholder: focusedIndex === index ? \"\" : placeholder,\n    value: char,\n    autoFocus: autoFocus && index === 0,\n    classNames: __spreadProps(__spreadValues({}, classNames), {\n      input: cx(classes.input, classNames == null ? void 0 : classNames.input)\n    }),\n    styles,\n    unstyled,\n    \"aria-label\": ariaLabel,\n    readOnly\n  }))), /* @__PURE__ */React.createElement(\"input\", {\n    type: \"hidden\",\n    name,\n    form,\n    value: _value\n  }));\n});\nPinInput.displayName = \"@mantine/core/PinInput\";\nexport { PinInput };","map":{"version":3,"sources":["../../src/PinInput/PinInput.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { forwardRef, useRef, useState, useEffect } from 'react';\nimport { useUncontrolled, useId } from '@mantine/hooks';\nimport {\n  DefaultProps,\n  MantineNumberSize,\n  MantineSize,\n  useComponentDefaultProps,\n  Selectors,\n} from '@mantine/styles';\nimport { Group } from '../Group';\nimport { Input, InputSharedProps, InputStylesNames } from '../Input';\nimport { createPinArray } from './create-pin-array/create-pin-array';\nimport useStyles from './PinInput.styles';\n\nconst regex = {\n  number: /^[0-9]+$/,\n  alphanumeric: /^[a-zA-Z0-9]+$/i,\n};\n\nexport type PinInputStylesNames = Selectors<typeof useStyles> | InputStylesNames;\n\nexport interface PinInputProps\n  extends DefaultProps<PinInputStylesNames>,\n    InputSharedProps,\n    Omit<React.ComponentPropsWithoutRef<'div'>, 'onChange'> {\n  /** Hidden input name attribute */\n  name?: string;\n\n  /** Hidden input form attribute */\n  form?: string;\n\n  /** Key of theme.spacing or any valid CSS value to set spacing between inputs */\n  spacing?: MantineNumberSize;\n\n  /** Key of theme.radius or any valid CSS value to set border-radius, theme.defaultRadius by default */\n  radius?: MantineNumberSize;\n\n  /** Input width and height */\n  size?: MantineSize;\n\n  /** If set, first input is focused when component is mounted */\n  autoFocus?: boolean;\n\n  /** Value for controlled component */\n  value?: string;\n\n  /** Default value for uncontrolled component */\n  defaultValue?: string;\n\n  /** Called when value changes */\n  onChange?: (value: string) => void;\n\n  /** Called when user enters value to all inputs */\n  onComplete?(value: string): void;\n\n  /** Placeholder for every input field */\n  placeholder?: string;\n\n  /** Determines whether focus should be moved automatically to the next input once filled */\n  manageFocus?: boolean;\n\n  /** Determines whether autocomplete=\"one-time-code\" attribute should be set on all inputs */\n  oneTimeCode?: boolean;\n\n  /** The top-level id that is used as a base in all input fields */\n  id?: string;\n\n  /** Sets inputs disabled attribute */\n  disabled?: boolean;\n\n  /** Adds error styles to all inputs */\n  error?: boolean;\n\n  /** The type of allowed values */\n  type?: 'alphanumeric' | 'number' | RegExp;\n\n  /** Changes input type to \"password\" */\n  mask?: boolean;\n\n  /** Number of input boxes */\n  length?: number;\n\n  /** Determines whether the user can edit input content */\n  readOnly?: boolean;\n\n  /** Inputs type attribute, inferred from type prop if not specified */\n  inputType?: React.HTMLInputTypeAttribute;\n\n  /** inputmode attr, inferred from type prop if not specified */\n  inputMode?:\n    | 'none'\n    | 'text'\n    | 'tel'\n    | 'url'\n    | 'email'\n    | 'numeric'\n    | 'decimal'\n    | 'search'\n    | undefined;\n}\n\nconst defaultProps: Partial<PinInputProps> = {\n  spacing: 'sm',\n  size: 'sm',\n  length: 4,\n  manageFocus: true,\n  placeholder: '○',\n  type: 'alphanumeric',\n};\n\nexport const PinInput = forwardRef<HTMLDivElement, PinInputProps>((props, ref) => {\n  const {\n    name,\n    form,\n    className,\n    value,\n    defaultValue,\n    variant,\n    spacing,\n    size,\n    classNames,\n    styles,\n    unstyled,\n    sx,\n    length,\n    onChange,\n    onComplete,\n    manageFocus,\n    autoFocus,\n    error,\n    radius,\n    disabled,\n    oneTimeCode,\n    placeholder,\n    type,\n    mask,\n    'aria-label': ariaLabel,\n    readOnly,\n    inputType,\n    inputMode,\n    ...others\n  } = useComponentDefaultProps('PinInput', defaultProps, props);\n\n  const uuid = useId(name);\n  const { classes, cx } = useStyles(null, {\n    name: 'PinInput',\n    classNames,\n    styles,\n    unstyled,\n    variant,\n    size,\n  });\n\n  const [focusedIndex, setFocusedIndex] = useState(-1);\n\n  const [_value, setValues] = useUncontrolled({\n    value,\n    defaultValue,\n    finalValue: '',\n    onChange,\n  });\n\n  const inputsRef = useRef<Array<HTMLInputElement>>([]);\n\n  const validate = (code: string) => {\n    const re = type instanceof RegExp ? type : type in regex ? regex[type] : null;\n    return re?.test(code);\n  };\n\n  const focusInputField = (dir: 'next' | 'prev', index: number) => {\n    if (!manageFocus) return;\n\n    if (dir === 'next') {\n      const nextIndex = index + 1;\n      inputsRef.current[nextIndex < length ? nextIndex : index].focus();\n    }\n\n    if (dir === 'prev') {\n      const nextIndex = index - 1;\n\n      inputsRef.current[nextIndex > -1 ? nextIndex : index].focus();\n    }\n  };\n\n  const setFieldValue = (val: string, index: number) => {\n    const values = [...createPinArray(length, _value)];\n    values[index] = val;\n    setValues(values.join(''));\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>, index: number) => {\n    const inputValue = event.target.value;\n    const nextChar =\n      inputValue.length > 1 ? inputValue.split('')[inputValue.length - 1] : inputValue;\n\n    const isValid = validate(nextChar);\n\n    if (isValid) {\n      setFieldValue(nextChar, index);\n      focusInputField('next', index);\n    } else {\n      setFieldValue('', index);\n    }\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>, index: number) => {\n    if (event.key === 'ArrowLeft') {\n      event.preventDefault();\n      focusInputField('prev', index);\n    } else if (event.key === 'ArrowRight') {\n      event.preventDefault();\n      focusInputField('next', index);\n    } else if (event.key === 'Delete') {\n      event.preventDefault();\n      setFieldValue('', index);\n    } else if (event.key === 'Backspace') {\n      event.preventDefault();\n\n      if ((event.target as HTMLInputElement).value !== '') {\n        setFieldValue('', index);\n      } else {\n        focusInputField('prev', index);\n      }\n    }\n  };\n\n  const handleFocus = (event: React.FocusEvent<HTMLInputElement>, index: number) => {\n    event.target.select();\n    setFocusedIndex(index);\n  };\n\n  const handleBlur = () => {\n    setFocusedIndex(-1);\n  };\n\n  const handlePaste = (event: React.ClipboardEvent<HTMLInputElement>) => {\n    event.preventDefault();\n    const copyValue = event.clipboardData.getData('Text');\n    const isValid = validate(copyValue);\n\n    if (isValid) {\n      setValues(copyValue);\n    }\n  };\n\n  useEffect(() => {\n    if (_value.length !== length) return;\n\n    onComplete?.(_value);\n  }, [_value]);\n\n  return (\n    <>\n      <Group\n        role=\"group\"\n        spacing={spacing}\n        ref={ref}\n        className={cx(classes.root, className)}\n        sx={sx}\n        unstyled={unstyled}\n        id={uuid}\n        noWrap\n        {...others}\n      >\n        {createPinArray(length, _value).map((char, index) => (\n          <Input<'input'>\n            __staticSelector=\"PinInput\"\n            id={`${uuid}-${index + 1}`}\n            key={`${uuid}-${index}`}\n            inputMode={inputMode || (type === 'number' ? 'numeric' : 'text')}\n            onChange={(event) => handleChange(event, index)}\n            onKeyDown={(event) => handleKeyDown(event, index)}\n            onFocus={(event) => handleFocus(event, index)}\n            onBlur={handleBlur}\n            onPaste={handlePaste}\n            type={inputType || (mask ? 'password' : type === 'number' ? 'tel' : 'text')}\n            radius={radius}\n            error={error}\n            variant={variant}\n            size={size}\n            disabled={disabled}\n            ref={(node) => {\n              inputsRef.current[index] = node;\n            }}\n            autoComplete={oneTimeCode ? 'one-time-code' : 'off'}\n            placeholder={focusedIndex === index ? '' : placeholder}\n            value={char}\n            autoFocus={autoFocus && index === 0}\n            classNames={{\n              ...classNames,\n              input: cx(classes.input, classNames?.input),\n            }}\n            styles={styles}\n            unstyled={unstyled}\n            aria-label={ariaLabel}\n            readOnly={readOnly}\n          />\n        ))}\n      </Group>\n      <input type=\"hidden\" name={name} form={form} value={_value} />\n    </>\n  );\n});\n\nPinInput.displayName = '@mantine/core/PinInput';\n"]},"metadata":{},"sourceType":"module"}