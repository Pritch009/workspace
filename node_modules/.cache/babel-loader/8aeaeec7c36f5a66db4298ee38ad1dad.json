{"ast":null,"code":"import { useRef, useCallback, useEffect } from 'react';\nfunction useTimeout(callback, delay) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    autoInvoke: false\n  };\n  const callbackRef = useRef(null);\n  const timeoutRef = useRef(null);\n  const start = useCallback(function () {\n    for (var _len = arguments.length, callbackParams = new Array(_len), _key = 0; _key < _len; _key++) {\n      callbackParams[_key] = arguments[_key];\n    }\n    if (!timeoutRef.current) {\n      timeoutRef.current = window.setTimeout(() => {\n        callbackRef.current(callbackParams);\n        timeoutRef.current = null;\n      }, delay);\n    }\n  }, [delay]);\n  const clear = useCallback(() => {\n    if (timeoutRef.current) {\n      window.clearTimeout(timeoutRef.current);\n      timeoutRef.current = null;\n    }\n  }, []);\n  useEffect(() => {\n    callbackRef.current = callback;\n  }, [callback]);\n  useEffect(() => {\n    if (options.autoInvoke) {\n      start();\n    }\n    return clear;\n  }, [clear, delay, options.autoInvoke, start]);\n  return {\n    start,\n    clear\n  };\n}\nexport { useTimeout };","map":{"version":3,"sources":["../../src/use-timeout/use-timeout.ts"],"names":[],"mappings":";AACO,SAAS,UAAU,CAAC,QAAQ,EAAE,KAAK,EAAmC;EAAA,IAAjC,OAAO,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAG;IAAE,UAAU,EAAE;EAAK,CAAE;EACzE,MAAM,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC;EAChC,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC;EAC/B,MAAM,KAAK,GAAG,WAAW,CAAC,YAAuB;IAAA,SAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAAnB,cAAc,OAAA,KAAA,CAAA,IAAA,GAAA,IAAA,MAAA,IAAA,GAAA,IAAA,EAAA,IAAA;MAAd,cAAc,CAAA,IAAA,IAAA,SAAA,CAAA,IAAA;IAAA;IAC1C,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE;MACvB,UAAU,CAAC,OAAO,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM;QAC3C,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC;QACnC,UAAU,CAAC,OAAO,GAAG,IAAI;MACjC,CAAO,EAAE,KAAK,CAAC;IACf;EACA,CAAG,EAAE,CAAC,KAAK,CAAC,CAAC;EACX,MAAM,KAAK,GAAG,WAAW,CAAC,MAAM;IAC9B,IAAI,UAAU,CAAC,OAAO,EAAE;MACtB,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,OAAO,CAAC;MACvC,UAAU,CAAC,OAAO,GAAG,IAAI;IAC/B;EACA,CAAG,EAAE,EAAE,CAAC;EACN,SAAS,CAAC,MAAM;IACd,WAAW,CAAC,OAAO,GAAG,QAAQ;EAClC,CAAG,EAAE,CAAC,QAAQ,CAAC,CAAC;EACd,SAAS,CAAC,MAAM;IACd,IAAI,OAAO,CAAC,UAAU,EAAE;MACtB,KAAK,CAAA,CAAE;IACb;IACI,OAAO,KAAK;EAChB,CAAG,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,OAAO,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;EAC7C,OAAO;IAAE,KAAK;IAAE;EAAK,CAAE;AACzB","sourcesContent":["import { useCallback, useEffect, useRef } from 'react';\n\nexport function useTimeout(\n  callback: (...callbackParams: any[]) => void,\n  delay: number,\n  options: { autoInvoke: boolean } = { autoInvoke: false }\n) {\n  const callbackRef = useRef<Function>(null);\n  const timeoutRef = useRef<number>(null);\n\n  const start = useCallback(\n    (...callbackParams: any[]) => {\n      if (!timeoutRef.current) {\n        timeoutRef.current = window.setTimeout(() => {\n          callbackRef.current(callbackParams);\n          timeoutRef.current = null;\n        }, delay);\n      }\n    },\n    [delay]\n  );\n\n  const clear = useCallback(() => {\n    if (timeoutRef.current) {\n      window.clearTimeout(timeoutRef.current);\n      timeoutRef.current = null;\n    }\n  }, []);\n\n  useEffect(() => {\n    callbackRef.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    if (options.autoInvoke) {\n      start();\n    }\n\n    return clear;\n  }, [clear, delay, options.autoInvoke, start]);\n\n  return { start, clear };\n}\n"]},"metadata":{},"sourceType":"module"}