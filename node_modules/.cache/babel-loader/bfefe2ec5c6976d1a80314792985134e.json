{"ast":null,"code":"import { createStyles, rem, getSize } from '@mantine/styles';\nconst sizes = {\n  xs: rem(1),\n  sm: rem(2),\n  md: rem(3),\n  lg: rem(4),\n  xl: rem(5)\n};\nfunction getColor(theme, color) {\n  const themeColor = theme.fn.variant({\n    variant: \"outline\",\n    color\n  }).border;\n  return typeof color === \"string\" && (color in theme.colors || color.split(\".\")[0] in theme.colors) ? themeColor : color === void 0 ? theme.colorScheme === \"dark\" ? theme.colors.dark[4] : theme.colors.gray[4] : color;\n}\nvar useStyles = createStyles((theme, _ref, _ref2) => {\n  let {\n    color\n  } = _ref;\n  let {\n    size,\n    variant\n  } = _ref2;\n  return {\n    root: {},\n    withLabel: {\n      borderTop: \"0 !important\"\n    },\n    left: {\n      \"&::before\": {\n        display: \"none\"\n      }\n    },\n    right: {\n      \"&::after\": {\n        display: \"none\"\n      }\n    },\n    label: {\n      display: \"flex\",\n      alignItems: \"center\",\n      \"&::before\": {\n        content: '\"\"',\n        flex: 1,\n        height: rem(1),\n        borderTop: `${getSize({\n          size,\n          sizes\n        })} ${variant} ${getColor(theme, color)}`,\n        marginRight: theme.spacing.xs\n      },\n      \"&::after\": {\n        content: '\"\"',\n        flex: 1,\n        borderTop: `${getSize({\n          size,\n          sizes\n        })} ${variant} ${getColor(theme, color)}`,\n        marginLeft: theme.spacing.xs\n      }\n    },\n    labelDefaultStyles: {\n      color: color === \"dark\" ? theme.colors.dark[1] : theme.fn.themeColor(color, theme.colorScheme === \"dark\" ? 5 : theme.fn.primaryShade(), false)\n    },\n    horizontal: {\n      border: 0,\n      borderTopWidth: rem(getSize({\n        size,\n        sizes\n      })),\n      borderTopColor: getColor(theme, color),\n      borderTopStyle: variant,\n      margin: 0\n    },\n    vertical: {\n      border: 0,\n      alignSelf: \"stretch\",\n      height: \"auto\",\n      borderLeftWidth: rem(getSize({\n        size,\n        sizes\n      })),\n      borderLeftColor: getColor(theme, color),\n      borderLeftStyle: variant\n    }\n  };\n});\nexport default useStyles;","map":{"version":3,"sources":["../../src/Divider/Divider.styles.ts"],"names":[],"mappings":"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","sourcesContent":["import { createStyles, MantineColor, MantineTheme, rem, getSize } from '@mantine/styles';\n\nexport interface DividerStylesParams {\n  color: MantineColor;\n}\n\nconst sizes = {\n  xs: rem(1),\n  sm: rem(2),\n  md: rem(3),\n  lg: rem(4),\n  xl: rem(5),\n};\n\nfunction getColor(theme: MantineTheme, color: MantineColor) {\n  const themeColor = theme.fn.variant({ variant: 'outline', color }).border;\n\n  return typeof color === 'string' && (color in theme.colors || color.split('.')[0] in theme.colors)\n    ? themeColor\n    : color === undefined\n    ? theme.colorScheme === 'dark'\n      ? theme.colors.dark[4]\n      : theme.colors.gray[4]\n    : color;\n}\n\nexport default createStyles((theme, { color }: DividerStylesParams, { size, variant }) => ({\n  root: {},\n\n  withLabel: {\n    borderTop: '0 !important',\n  },\n\n  left: {\n    '&::before': {\n      display: 'none',\n    },\n  },\n\n  right: {\n    '&::after': {\n      display: 'none',\n    },\n  },\n\n  label: {\n    display: 'flex',\n    alignItems: 'center',\n\n    '&::before': {\n      content: '\"\"',\n      flex: 1,\n      height: rem(1),\n      borderTop: `${getSize({ size, sizes })} ${variant} ${getColor(theme, color)}`,\n      marginRight: theme.spacing.xs,\n    },\n\n    '&::after': {\n      content: '\"\"',\n      flex: 1,\n      borderTop: `${getSize({ size, sizes })} ${variant} ${getColor(theme, color)}`,\n      marginLeft: theme.spacing.xs,\n    },\n  },\n\n  labelDefaultStyles: {\n    color:\n      color === 'dark'\n        ? theme.colors.dark[1]\n        : theme.fn.themeColor(\n            color,\n            theme.colorScheme === 'dark' ? 5 : theme.fn.primaryShade(),\n            false\n          ),\n  },\n\n  horizontal: {\n    border: 0,\n    borderTopWidth: rem(getSize({ size, sizes })),\n    borderTopColor: getColor(theme, color),\n    borderTopStyle: variant as any,\n    margin: 0,\n  },\n\n  vertical: {\n    border: 0,\n    alignSelf: 'stretch',\n    height: 'auto',\n    borderLeftWidth: rem(getSize({ size, sizes })),\n    borderLeftColor: getColor(theme, color),\n    borderLeftStyle: variant as any,\n  },\n}));\n"]},"metadata":{},"sourceType":"module"}