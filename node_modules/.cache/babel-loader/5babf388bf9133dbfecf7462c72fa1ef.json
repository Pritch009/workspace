{"ast":null,"code":"function mergeClassNames(_ref) {\n  let {\n    cx,\n    classes,\n    context,\n    classNames,\n    name,\n    cache\n  } = _ref;\n  const contextClassNames = context.reduce((acc, item) => {\n    Object.keys(item.classNames).forEach(key => {\n      if (typeof acc[key] !== \"string\") {\n        acc[key] = `${item.classNames[key]}`;\n      } else {\n        acc[key] = `${acc[key]} ${item.classNames[key]}`;\n      }\n    });\n    return acc;\n  }, {});\n  return Object.keys(classes).reduce((acc, className) => {\n    acc[className] = cx(classes[className], contextClassNames[className], classNames != null && classNames[className], Array.isArray(name) ? name.filter(Boolean).map(part => `${(cache == null ? void 0 : cache.key) || \"mantine\"}-${part}-${className}`).join(\" \") : name ? `${(cache == null ? void 0 : cache.key) || \"mantine\"}-${name}-${className}` : null);\n    return acc;\n  }, {});\n}\nexport { mergeClassNames };","map":{"version":3,"sources":["../../../../src/tss/utils/merge-class-names/merge-class-names.ts"],"names":[],"mappings":"AAAO,SAAS,eAAe,CAAA,IAAA,EAO5B;EAAA,IAP6B;IAC9B,EAAE;IACF,OAAO;IACP,OAAO;IACP,UAAU;IACV,IAAI;IACJ;EACF,CAAC,GAAA,IAAA;EACC,MAAM,iBAAiB,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,KAAK;IACtD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,OAAO,CAAE,GAAG,IAAK;MAC5C,IAAI,OAAO,GAAG,CAAC,GAAG,CAAC,KAAK,QAAQ,EAAE;QAChC,GAAG,CAAC,GAAG,CAAC,GAAI,GAAE,IAAI,CAAC,UAAU,CAAC,GAAG,CAAE,EAAC;MAC5C,CAAO,MAAM;QACL,GAAG,CAAC,GAAG,CAAC,GAAI,GAAE,GAAG,CAAC,GAAG,CAAE,IAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAE,EAAC;MACxD;IACA,CAAK,CAAC;IACF,OAAO,GAAG;EACd,CAAG,EAAE,CAAA,CAAE,CAAC;EACN,OAAO,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,SAAS,KAAK;IACrD,GAAG,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE,iBAAiB,CAAC,SAAS,CAAC,EAAE,UAAU,IAAI,IAAI,IAAI,UAAU,CAAC,SAAS,CAAC,EAAE,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,GAAG,CAAE,IAAI,IAAM,GAAE,CAAC,KAAK,IAAI,IAAI,GAAG,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,KAAK,SAAU,IAAG,IAAK,IAAG,SAAU,EAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,GAAI,GAAE,CAAC,KAAK,IAAI,IAAI,GAAG,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,KAAK,SAAU,IAAG,IAAK,IAAG,SAAU,EAAC,GAAG,IAAI,CAAC;IAC/V,OAAO,GAAG;EACd,CAAG,EAAE,CAAA,CAAE,CAAC;AACR","sourcesContent":["import type { EmotionCache } from '@emotion/cache';\nimport { useMantineProviderStyles } from '../../../theme/MantineProvider';\n\ninterface Input<T extends Record<string, string>> {\n  cx(...classNames: any): string;\n  classes: T;\n  context: ReturnType<typeof useMantineProviderStyles>;\n  classNames: Partial<T>;\n  name: string | string[];\n  cache: EmotionCache;\n}\n\nexport function mergeClassNames<T extends Record<string, string>>({\n  cx,\n  classes,\n  context,\n  classNames,\n  name,\n  cache,\n}: Input<T>) {\n  const contextClassNames = context.reduce<Record<string, string>>((acc, item) => {\n    Object.keys(item.classNames).forEach((key) => {\n      if (typeof acc[key] !== 'string') {\n        acc[key] = `${item.classNames[key]}`;\n      } else {\n        acc[key] = `${acc[key]} ${item.classNames[key]}`;\n      }\n    });\n\n    return acc;\n  }, {});\n\n  return Object.keys(classes).reduce((acc, className) => {\n    acc[className] = cx(\n      classes[className],\n      contextClassNames[className],\n      classNames != null && classNames[className],\n      Array.isArray(name)\n        ? name\n            .filter(Boolean)\n            .map((part) => `${cache?.key || 'mantine'}-${part}-${className}`)\n            .join(' ')\n        : name\n        ? `${cache?.key || 'mantine'}-${name}-${className}`\n        : null\n    );\n    return acc;\n  }, {}) as T;\n}\n"]},"metadata":{},"sourceType":"module"}