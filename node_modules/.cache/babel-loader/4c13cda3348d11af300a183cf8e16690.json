{"ast":null,"code":"import { useState, useRef, useEffect } from 'react';\nfunction useDebouncedState(defaultValue, wait) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    leading: false\n  };\n  const [value, setValue] = useState(defaultValue);\n  const timeoutRef = useRef(null);\n  const leadingRef = useRef(true);\n  const clearTimeout = () => window.clearTimeout(timeoutRef.current);\n  useEffect(() => clearTimeout, []);\n  const debouncedSetValue = newValue => {\n    clearTimeout();\n    if (leadingRef.current && options.leading) {\n      setValue(newValue);\n    } else {\n      timeoutRef.current = window.setTimeout(() => {\n        leadingRef.current = true;\n        setValue(newValue);\n      }, wait);\n    }\n    leadingRef.current = false;\n  };\n  return [value, debouncedSetValue];\n}\nexport { useDebouncedState };","map":{"version":3,"sources":["../../src/use-debounced-state/use-debounced-state.ts"],"names":[],"mappings":";AACO,SAAS,iBAAiB,CAAC,YAAY,EAAE,IAAI,EAAgC;EAAA,IAA9B,OAAO,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAG;IAAE,OAAO,EAAE;EAAK,CAAE;EAChF,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAC,YAAY,CAAC;EAChD,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC;EAC/B,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC;EAC/B,MAAM,YAAY,GAAG,CAAA,KAAM,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,OAAO,CAAC;EAClE,SAAS,CAAC,MAAM,YAAY,EAAE,EAAE,CAAC;EACjC,MAAM,iBAAiB,GAAI,QAAQ,IAAK;IACtC,YAAY,CAAA,CAAE;IACd,IAAI,UAAU,CAAC,OAAO,IAAI,OAAO,CAAC,OAAO,EAAE;MACzC,QAAQ,CAAC,QAAQ,CAAC;IACxB,CAAK,MAAM;MACL,UAAU,CAAC,OAAO,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM;QAC3C,UAAU,CAAC,OAAO,GAAG,IAAI;QACzB,QAAQ,CAAC,QAAQ,CAAC;MAC1B,CAAO,EAAE,IAAI,CAAC;IACd;IACI,UAAU,CAAC,OAAO,GAAG,KAAK;EAC9B,CAAG;EACD,OAAO,CAAC,KAAK,EAAE,iBAAiB,CAAC;AACnC","sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\nexport function useDebouncedState<T = any>(\n  defaultValue: T,\n  wait: number,\n  options = { leading: false }\n) {\n  const [value, setValue] = useState(defaultValue);\n  const timeoutRef = useRef<number>(null);\n  const leadingRef = useRef(true);\n\n  const clearTimeout = () => window.clearTimeout(timeoutRef.current);\n  useEffect(() => clearTimeout, []);\n\n  const debouncedSetValue = (newValue: T) => {\n    clearTimeout();\n    if (leadingRef.current && options.leading) {\n      setValue(newValue);\n    } else {\n      timeoutRef.current = window.setTimeout(() => {\n        leadingRef.current = true;\n        setValue(newValue);\n      }, wait);\n    }\n    leadingRef.current = false;\n  };\n\n  return [value, debouncedSetValue] as const;\n}\n"]},"metadata":{},"sourceType":"module"}