{"ast":null,"code":"import React, { forwardRef, useRef } from 'react';\nimport { useComponentDefaultProps } from '@mantine/styles';\nimport { assignRef, useMergedRef } from '@mantine/hooks';\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source) if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)) {\n    if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n};\nconst defaultProps = {\n  multiple: false\n};\nconst FileButton = forwardRef((props, ref) => {\n  const _a = useComponentDefaultProps(\"FileButton\", defaultProps, props),\n    {\n      onChange,\n      children,\n      multiple,\n      accept,\n      name,\n      form,\n      resetRef,\n      disabled,\n      capture,\n      inputProps\n    } = _a,\n    others = __objRest(_a, [\"onChange\", \"children\", \"multiple\", \"accept\", \"name\", \"form\", \"resetRef\", \"disabled\", \"capture\", \"inputProps\"]);\n  const inputRef = useRef();\n  const onClick = () => {\n    !disabled && inputRef.current.click();\n  };\n  const handleChange = event => {\n    if (multiple) {\n      onChange(Array.from(event.currentTarget.files));\n    } else {\n      onChange(event.currentTarget.files[0] || null);\n    }\n  };\n  const reset = () => {\n    inputRef.current.value = \"\";\n  };\n  assignRef(resetRef, reset);\n  return /* @__PURE__ */React.createElement(React.Fragment, null, children(__spreadValues({\n    onClick\n  }, others)), /* @__PURE__ */React.createElement(\"input\", __spreadValues({\n    style: {\n      display: \"none\"\n    },\n    type: \"file\",\n    accept,\n    multiple,\n    onChange: handleChange,\n    ref: useMergedRef(ref, inputRef),\n    name,\n    form,\n    capture\n  }, inputProps)));\n});\nFileButton.displayName = \"@mantine/core/FileButton\";\nexport { FileButton };","map":{"version":3,"sources":["../../src/FileButton/FileButton.tsx"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable react/no-unused-prop-types */\nimport React, { useRef, forwardRef } from 'react';\nimport { useComponentDefaultProps } from '@mantine/styles';\nimport { assignRef, useMergedRef } from '@mantine/hooks';\n\nexport interface FileButtonProps<Multiple extends boolean = false> {\n  /** Called when files are picked */\n  onChange(payload: Multiple extends true ? File[] : File | null): void;\n\n  /** Function that receives button props and returns react node that should be rendered */\n  children(props: { onClick(): void }): React.ReactNode;\n\n  /** Determines whether user can pick more than one file */\n  multiple?: Multiple;\n\n  /** File input accept attribute, for example, \"image/png,image/jpeg\" */\n  accept?: string;\n\n  /** Input name attribute */\n  name?: string;\n\n  /** Input form attribute */\n  form?: string;\n\n  /** Function that should be called when value changes to null or empty array */\n  resetRef?: React.ForwardedRef<() => void>;\n\n  /** Disables file picker */\n  disabled?: boolean;\n\n  /** Specifies that, optionally, a new file should be captured, and which device should be used to capture that new media of a type defined by the accept attribute. */\n  capture?: boolean | 'user' | 'environment';\n\n  /** Spreads props to input element used to capture files */\n  inputProps?: React.ComponentPropsWithoutRef<'input'>;\n}\n\nconst defaultProps: Partial<FileButtonProps> = {\n  multiple: false,\n};\n\ntype FileButtonComponent = (<Multiple extends boolean = false>(\n  props: FileButtonProps<Multiple>\n) => React.ReactElement) & { displayName?: string };\n\nexport const FileButton: FileButtonComponent = forwardRef<HTMLInputElement, FileButtonProps>(\n  (props, ref) => {\n    const {\n      onChange,\n      children,\n      multiple,\n      accept,\n      name,\n      form,\n      resetRef,\n      disabled,\n      capture,\n      inputProps,\n      ...others\n    } = useComponentDefaultProps('FileButton', defaultProps, props);\n\n    const inputRef = useRef<HTMLInputElement>();\n\n    const onClick = () => {\n      !disabled && inputRef.current.click();\n    };\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n      if (multiple) {\n        onChange(Array.from(event.currentTarget.files) as any);\n      } else {\n        onChange(event.currentTarget.files[0] || null);\n      }\n    };\n\n    const reset = () => {\n      inputRef.current.value = '';\n    };\n\n    assignRef(resetRef, reset);\n\n    return (\n      <>\n        {children({ onClick, ...others })}\n\n        <input\n          style={{ display: 'none' }}\n          type=\"file\"\n          accept={accept}\n          multiple={multiple}\n          onChange={handleChange}\n          ref={useMergedRef(ref, inputRef)}\n          name={name}\n          form={form}\n          capture={capture}\n          {...inputProps}\n        />\n      </>\n    );\n  }\n) as any;\n\nFileButton.displayName = '@mantine/core/FileButton';\n"]},"metadata":{},"sourceType":"module"}