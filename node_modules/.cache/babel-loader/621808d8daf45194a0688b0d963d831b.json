{"ast":null,"code":"import { useState, useCallback, useEffect } from 'react';\nimport { useWindowEvent } from '../use-window-event/use-window-event.js';\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nfunction getConnection() {\n  if (typeof navigator === \"undefined\") {\n    return {};\n  }\n  const _navigator = navigator;\n  const connection = _navigator.connection || _navigator.mozConnection || _navigator.webkitConnection;\n  if (!connection) {\n    return {};\n  }\n  return {\n    downlink: connection == null ? void 0 : connection.downlink,\n    downlinkMax: connection == null ? void 0 : connection.downlinkMax,\n    effectiveType: connection == null ? void 0 : connection.effectiveType,\n    rtt: connection == null ? void 0 : connection.rtt,\n    saveData: connection == null ? void 0 : connection.saveData,\n    type: connection == null ? void 0 : connection.type\n  };\n}\nfunction useNetwork() {\n  const [status, setStatus] = useState({\n    online: true\n  });\n  const handleConnectionChange = useCallback(() => setStatus(current => __spreadValues(__spreadValues({}, current), getConnection())), []);\n  useWindowEvent(\"online\", () => setStatus(__spreadValues({\n    online: true\n  }, getConnection())));\n  useWindowEvent(\"offline\", () => setStatus(__spreadValues({\n    online: false\n  }, getConnection())));\n  useEffect(() => {\n    const _navigator = navigator;\n    if (_navigator.connection) {\n      setStatus(__spreadValues({\n        online: _navigator.onLine\n      }, getConnection()));\n      _navigator.connection.addEventListener(\"change\", handleConnectionChange);\n      return () => _navigator.connection.removeEventListener(\"change\", handleConnectionChange);\n    }\n    return void 0;\n  }, []);\n  return status;\n}\nexport { useNetwork };","map":{"version":3,"sources":["../../src/use-network/use-network.ts"],"names":[],"mappings":"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","sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { useWindowEvent } from '../use-window-event/use-window-event';\n\ninterface NetworkStatus {\n  downlink?: number;\n  downlinkMax?: number;\n  effectiveType?: 'slow-2g' | '2g' | '3g' | '4g';\n  rtt?: number;\n  saveData?: boolean;\n  type?: 'bluetooth' | 'cellular' | 'ethernet' | 'wifi' | 'wimax' | 'none' | 'other' | 'unknown';\n}\n\nfunction getConnection(): NetworkStatus {\n  if (typeof navigator === 'undefined') {\n    return {};\n  }\n\n  const _navigator = navigator as any;\n  const connection: any =\n    _navigator.connection || _navigator.mozConnection || _navigator.webkitConnection;\n\n  if (!connection) {\n    return {};\n  }\n\n  return {\n    downlink: connection?.downlink,\n    downlinkMax: connection?.downlinkMax,\n    effectiveType: connection?.effectiveType,\n    rtt: connection?.rtt,\n    saveData: connection?.saveData,\n    type: connection?.type,\n  };\n}\n\nexport function useNetwork() {\n  const [status, setStatus] = useState<{ online: boolean } & NetworkStatus>({\n    online: true,\n  });\n  const handleConnectionChange = useCallback(\n    () => setStatus((current) => ({ ...current, ...getConnection() })),\n    []\n  );\n\n  useWindowEvent('online', () => setStatus({ online: true, ...getConnection() }));\n  useWindowEvent('offline', () => setStatus({ online: false, ...getConnection() }));\n\n  useEffect(() => {\n    const _navigator = navigator as any;\n\n    if (_navigator.connection) {\n      setStatus({ online: _navigator.onLine, ...getConnection() });\n      _navigator.connection.addEventListener('change', handleConnectionChange);\n      return () => _navigator.connection.removeEventListener('change', handleConnectionChange);\n    }\n\n    return undefined;\n  }, []);\n\n  return status;\n}\n"]},"metadata":{},"sourceType":"module"}