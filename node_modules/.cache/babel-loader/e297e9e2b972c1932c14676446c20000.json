{"ast":null,"code":"import { useState, useRef, useEffect } from 'react';\nfunction useDebouncedValue(value, wait) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    leading: false\n  };\n  const [_value, setValue] = useState(value);\n  const mountedRef = useRef(false);\n  const timeoutRef = useRef(null);\n  const cooldownRef = useRef(false);\n  const cancel = () => window.clearTimeout(timeoutRef.current);\n  useEffect(() => {\n    if (mountedRef.current) {\n      if (!cooldownRef.current && options.leading) {\n        cooldownRef.current = true;\n        setValue(value);\n      } else {\n        cancel();\n        timeoutRef.current = window.setTimeout(() => {\n          cooldownRef.current = false;\n          setValue(value);\n        }, wait);\n      }\n    }\n  }, [value, options.leading, wait]);\n  useEffect(() => {\n    mountedRef.current = true;\n    return cancel;\n  }, []);\n  return [_value, cancel];\n}\nexport { useDebouncedValue };","map":{"version":3,"sources":["../../src/use-debounced-value/use-debounced-value.ts"],"names":[],"mappings":";AACO,SAAS,iBAAiB,CAAC,KAAK,EAAE,IAAI,EAAgC;EAAA,IAA9B,OAAO,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAG;IAAE,OAAO,EAAE;EAAK,CAAE;EACzE,MAAM,CAAC,MAAM,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC;EAC1C,MAAM,UAAU,GAAG,MAAM,CAAC,KAAK,CAAC;EAChC,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC;EAC/B,MAAM,WAAW,GAAG,MAAM,CAAC,KAAK,CAAC;EACjC,MAAM,MAAM,GAAG,CAAA,KAAM,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,OAAO,CAAC;EAC5D,SAAS,CAAC,MAAM;IACd,IAAI,UAAU,CAAC,OAAO,EAAE;MACtB,IAAI,CAAC,WAAW,CAAC,OAAO,IAAI,OAAO,CAAC,OAAO,EAAE;QAC3C,WAAW,CAAC,OAAO,GAAG,IAAI;QAC1B,QAAQ,CAAC,KAAK,CAAC;MACvB,CAAO,MAAM;QACL,MAAM,CAAA,CAAE;QACR,UAAU,CAAC,OAAO,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM;UAC3C,WAAW,CAAC,OAAO,GAAG,KAAK;UAC3B,QAAQ,CAAC,KAAK,CAAC;QACzB,CAAS,EAAE,IAAI,CAAC;MAChB;IACA;EACA,CAAG,EAAE,CAAC,KAAK,EAAE,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;EAClC,SAAS,CAAC,MAAM;IACd,UAAU,CAAC,OAAO,GAAG,IAAI;IACzB,OAAO,MAAM;EACjB,CAAG,EAAE,EAAE,CAAC;EACN,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC;AACzB","sourcesContent":["import { useEffect, useState, useRef } from 'react';\n\nexport function useDebouncedValue<T = any>(value: T, wait: number, options = { leading: false }) {\n  const [_value, setValue] = useState(value);\n  const mountedRef = useRef(false);\n  const timeoutRef = useRef<number>(null);\n  const cooldownRef = useRef(false);\n\n  const cancel = () => window.clearTimeout(timeoutRef.current);\n\n  useEffect(() => {\n    if (mountedRef.current) {\n      if (!cooldownRef.current && options.leading) {\n        cooldownRef.current = true;\n        setValue(value);\n      } else {\n        cancel();\n        timeoutRef.current = window.setTimeout(() => {\n          cooldownRef.current = false;\n          setValue(value);\n        }, wait);\n      }\n    }\n  }, [value, options.leading, wait]);\n\n  useEffect(() => {\n    mountedRef.current = true;\n    return cancel;\n  }, []);\n\n  return [_value, cancel] as const;\n}\n"]},"metadata":{},"sourceType":"module"}