{"ast":null,"code":"import { useState, useRef, useEffect } from 'react';\nimport { useReducedMotion } from '@mantine/hooks';\nfunction useLockScroll(_ref) {\n  let {\n    opened,\n    transitionDuration\n  } = _ref;\n  const [shouldLockScroll, setShouldLockScroll] = useState(opened);\n  const timeout = useRef();\n  const reduceMotion = useReducedMotion();\n  const _transitionDuration = reduceMotion ? 0 : transitionDuration;\n  useEffect(() => {\n    if (opened) {\n      setShouldLockScroll(true);\n      window.clearTimeout(timeout.current);\n    } else if (_transitionDuration === 0) {\n      setShouldLockScroll(false);\n    } else {\n      timeout.current = window.setTimeout(() => setShouldLockScroll(false), _transitionDuration);\n    }\n    return () => window.clearTimeout(timeout.current);\n  }, [opened, _transitionDuration]);\n  return shouldLockScroll;\n}\nexport { useLockScroll };","map":{"version":3,"sources":["../../src/ModalBase/use-lock-scroll.ts"],"names":[],"mappings":";;AAEO,SAAS,aAAa,CAAA,IAAA,EAAiC;EAAA,IAAhC;IAAE,MAAM;IAAE;EAAkB,CAAE,GAAA,IAAA;EAC1D,MAAM,CAAC,gBAAgB,EAAE,mBAAmB,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC;EAChE,MAAM,OAAO,GAAG,MAAM,CAAA,CAAE;EACxB,MAAM,YAAY,GAAG,gBAAgB,CAAA,CAAE;EACvC,MAAM,mBAAmB,GAAG,YAAY,GAAG,CAAC,GAAG,kBAAkB;EACjE,SAAS,CAAC,MAAM;IACd,IAAI,MAAM,EAAE;MACV,mBAAmB,CAAC,IAAI,CAAC;MACzB,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC;IAC1C,CAAK,MAAM,IAAI,mBAAmB,KAAK,CAAC,EAAE;MACpC,mBAAmB,CAAC,KAAK,CAAC;IAChC,CAAK,MAAM;MACL,OAAO,CAAC,OAAO,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM,mBAAmB,CAAC,KAAK,CAAC,EAAE,mBAAmB,CAAC;IAChG;IACI,OAAO,MAAM,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC;EACrD,CAAG,EAAE,CAAC,MAAM,EAAE,mBAAmB,CAAC,CAAC;EACjC,OAAO,gBAAgB;AACzB","sourcesContent":["import { useState, useEffect, useRef } from 'react';\nimport { useReducedMotion } from '@mantine/hooks';\n\ninterface UseScrollLock {\n  opened: boolean;\n  transitionDuration: number;\n}\n\nexport function useLockScroll({ opened, transitionDuration }: UseScrollLock) {\n  const [shouldLockScroll, setShouldLockScroll] = useState(opened);\n  const timeout = useRef<number>();\n  const reduceMotion = useReducedMotion();\n  const _transitionDuration = reduceMotion ? 0 : transitionDuration;\n\n  useEffect(() => {\n    if (opened) {\n      setShouldLockScroll(true);\n      window.clearTimeout(timeout.current);\n    } else if (_transitionDuration === 0) {\n      setShouldLockScroll(false);\n    } else {\n      timeout.current = window.setTimeout(() => setShouldLockScroll(false), _transitionDuration);\n    }\n\n    return () => window.clearTimeout(timeout.current);\n  }, [opened, _transitionDuration]);\n\n  return shouldLockScroll;\n}\n"]},"metadata":{},"sourceType":"module"}