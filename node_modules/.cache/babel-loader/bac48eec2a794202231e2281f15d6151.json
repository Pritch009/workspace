{"ast":null,"code":"import { useRef } from 'react';\nimport { useDidUpdate } from '../use-did-update/use-did-update.js';\nfunction useFocusReturn(_ref) {\n  let {\n    opened,\n    shouldReturnFocus = true\n  } = _ref;\n  const lastActiveElement = useRef();\n  const returnFocus = () => {\n    var _a;\n    if (lastActiveElement.current && \"focus\" in lastActiveElement.current && typeof lastActiveElement.current.focus === \"function\") {\n      (_a = lastActiveElement.current) == null ? void 0 : _a.focus({\n        preventScroll: true\n      });\n    }\n  };\n  useDidUpdate(() => {\n    let timeout = -1;\n    const clearFocusTimeout = event => {\n      if (event.key === \"Tab\") {\n        window.clearTimeout(timeout);\n      }\n    };\n    document.addEventListener(\"keydown\", clearFocusTimeout);\n    if (opened) {\n      lastActiveElement.current = document.activeElement;\n    } else if (shouldReturnFocus) {\n      timeout = window.setTimeout(returnFocus, 10);\n    }\n    return () => {\n      window.clearTimeout(timeout);\n      document.removeEventListener(\"keydown\", clearFocusTimeout);\n    };\n  }, [opened, shouldReturnFocus]);\n  return returnFocus;\n}\nexport { useFocusReturn };","map":{"version":3,"sources":["../../src/use-focus-return/use-focus-return.ts"],"names":[],"mappings":";;AAEO,SAAS,cAAc,CAAA,IAAA,EAAuC;EAAA,IAAtC;IAAE,MAAM;IAAE,iBAAiB,GAAG;EAAI,CAAE,GAAA,IAAA;EACjE,MAAM,iBAAiB,GAAG,MAAM,CAAA,CAAE;EAClC,MAAM,WAAW,GAAG,CAAA,KAAM;IACxB,IAAI,EAAE;IACN,IAAI,iBAAiB,CAAC,OAAO,IAAI,OAAO,IAAI,iBAAiB,CAAC,OAAO,IAAI,OAAO,iBAAiB,CAAC,OAAO,CAAC,KAAK,KAAK,UAAU,EAAE;MAC9H,CAAC,EAAE,GAAG,iBAAiB,CAAC,OAAO,KAAK,IAAI,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC;QAAE,aAAa,EAAE;MAAI,CAAE,CAAC;IAC3F;EACA,CAAG;EACD,YAAY,CAAC,MAAM;IACjB,IAAI,OAAO,GAAG,CAAC,CAAC;IAChB,MAAM,iBAAiB,GAAI,KAAK,IAAK;MACnC,IAAI,KAAK,CAAC,GAAG,KAAK,KAAK,EAAE;QACvB,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC;MACpC;IACA,CAAK;IACD,QAAQ,CAAC,gBAAgB,CAAC,SAAS,EAAE,iBAAiB,CAAC;IACvD,IAAI,MAAM,EAAE;MACV,iBAAiB,CAAC,OAAO,GAAG,QAAQ,CAAC,aAAa;IACxD,CAAK,MAAM,IAAI,iBAAiB,EAAE;MAC5B,OAAO,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,EAAE,EAAE,CAAC;IAClD;IACI,OAAO,MAAM;MACX,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC;MAC5B,QAAQ,CAAC,mBAAmB,CAAC,SAAS,EAAE,iBAAiB,CAAC;IAChE,CAAK;EACL,CAAG,EAAE,CAAC,MAAM,EAAE,iBAAiB,CAAC,CAAC;EAC/B,OAAO,WAAW;AACpB","sourcesContent":["import { useRef } from 'react';\nimport { useDidUpdate } from '../use-did-update/use-did-update';\n\ninterface UseFocusReturn {\n  opened: boolean;\n  shouldReturnFocus?: boolean;\n}\n\n/** Returns focus to last active element, used in Modal and Drawer */\nexport function useFocusReturn({ opened, shouldReturnFocus = true }: UseFocusReturn) {\n  const lastActiveElement = useRef<HTMLElement>();\n  const returnFocus = () => {\n    if (\n      lastActiveElement.current &&\n      'focus' in lastActiveElement.current &&\n      typeof lastActiveElement.current.focus === 'function'\n    ) {\n      lastActiveElement.current?.focus({ preventScroll: true });\n    }\n  };\n\n  useDidUpdate(() => {\n    let timeout = -1;\n\n    const clearFocusTimeout = (event: KeyboardEvent) => {\n      if (event.key === 'Tab') {\n        window.clearTimeout(timeout);\n      }\n    };\n\n    document.addEventListener('keydown', clearFocusTimeout);\n\n    if (opened) {\n      lastActiveElement.current = document.activeElement as HTMLElement;\n    } else if (shouldReturnFocus) {\n      timeout = window.setTimeout(returnFocus, 10);\n    }\n\n    return () => {\n      window.clearTimeout(timeout);\n      document.removeEventListener('keydown', clearFocusTimeout);\n    };\n  }, [opened, shouldReturnFocus]);\n\n  return returnFocus;\n}\n"]},"metadata":{},"sourceType":"module"}