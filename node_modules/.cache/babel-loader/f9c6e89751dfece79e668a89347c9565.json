{"ast":null,"code":"import { useState, useRef, useEffect } from 'react';\nfunction useInterval(fn, interval) {\n  const [active, setActive] = useState(false);\n  const intervalRef = useRef();\n  const fnRef = useRef();\n  useEffect(() => {\n    fnRef.current = fn;\n  }, [fn]);\n  const start = () => {\n    setActive(old => {\n      if (!old && !intervalRef.current) {\n        intervalRef.current = window.setInterval(fnRef.current, interval);\n      }\n      return true;\n    });\n  };\n  const stop = () => {\n    setActive(false);\n    window.clearInterval(intervalRef.current);\n    intervalRef.current = void 0;\n  };\n  const toggle = () => {\n    if (active) {\n      stop();\n    } else {\n      start();\n    }\n  };\n  return {\n    start,\n    stop,\n    toggle,\n    active\n  };\n}\nexport { useInterval };","map":{"version":3,"sources":["../../src/use-interval/use-interval.ts"],"names":[],"mappings":";AACO,SAAS,WAAW,CAAC,EAAE,EAAE,QAAQ,EAAE;EACxC,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC;EAC3C,MAAM,WAAW,GAAG,MAAM,CAAA,CAAE;EAC5B,MAAM,KAAK,GAAG,MAAM,CAAA,CAAE;EACtB,SAAS,CAAC,MAAM;IACd,KAAK,CAAC,OAAO,GAAG,EAAE;EACtB,CAAG,EAAE,CAAC,EAAE,CAAC,CAAC;EACR,MAAM,KAAK,GAAG,CAAA,KAAM;IAClB,SAAS,CAAE,GAAG,IAAK;MACjB,IAAI,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;QAChC,WAAW,CAAC,OAAO,GAAG,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,OAAO,EAAE,QAAQ,CAAC;MACzE;MACM,OAAO,IAAI;IACjB,CAAK,CAAC;EACN,CAAG;EACD,MAAM,IAAI,GAAG,CAAA,KAAM;IACjB,SAAS,CAAC,KAAK,CAAC;IAChB,MAAM,CAAC,aAAa,CAAC,WAAW,CAAC,OAAO,CAAC;IACzC,WAAW,CAAC,OAAO,GAAG,KAAK,CAAC;EAChC,CAAG;EACD,MAAM,MAAM,GAAG,CAAA,KAAM;IACnB,IAAI,MAAM,EAAE;MACV,IAAI,CAAA,CAAE;IACZ,CAAK,MAAM;MACL,KAAK,CAAA,CAAE;IACb;EACA,CAAG;EACD,OAAO;IAAE,KAAK;IAAE,IAAI;IAAE,MAAM;IAAE;EAAM,CAAE;AACxC","sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\nexport function useInterval(fn: () => void, interval: number) {\n  const [active, setActive] = useState(false);\n  const intervalRef = useRef<number>();\n  const fnRef = useRef<() => void>();\n\n  useEffect(() => {\n    fnRef.current = fn;\n  }, [fn]);\n\n  const start = () => {\n    setActive((old) => {\n      if (!old && !intervalRef.current) {\n        intervalRef.current = window.setInterval(fnRef.current, interval);\n      }\n      return true;\n    });\n  };\n\n  const stop = () => {\n    setActive(false);\n    window.clearInterval(intervalRef.current);\n    intervalRef.current = undefined;\n  };\n\n  const toggle = () => {\n    if (active) {\n      stop();\n    } else {\n      start();\n    }\n  };\n\n  return { start, stop, toggle, active };\n}\n"]},"metadata":{},"sourceType":"module"}