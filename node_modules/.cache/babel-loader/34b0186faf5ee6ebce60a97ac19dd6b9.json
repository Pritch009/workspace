{"ast":null,"code":"import { useRef, useCallback, useEffect } from 'react';\nimport { FOCUS_SELECTOR, tabbable, focusable } from './tabbable.js';\nimport { scopeTab } from './scope-tab.js';\nimport { createAriaHider } from './create-aria-hider.js';\nfunction useFocusTrap() {\n  let active = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  const ref = useRef();\n  const restoreAria = useRef(null);\n  const focusNode = node => {\n    let focusElement = node.querySelector(\"[data-autofocus]\");\n    if (!focusElement) {\n      const children = Array.from(node.querySelectorAll(FOCUS_SELECTOR));\n      focusElement = children.find(tabbable) || children.find(focusable) || null;\n      if (!focusElement && focusable(node)) focusElement = node;\n    }\n    if (focusElement) {\n      focusElement.focus({\n        preventScroll: true\n      });\n    } else if (process.env.NODE_ENV === \"development\") {\n      console.warn(\"[@mantine/hooks/use-focus-trap] Failed to find focusable element within provided node\", node);\n    }\n  };\n  const setRef = useCallback(node => {\n    if (!active) {\n      return;\n    }\n    if (node === null) {\n      if (restoreAria.current) {\n        restoreAria.current();\n        restoreAria.current = null;\n      }\n      return;\n    }\n    restoreAria.current = createAriaHider(node);\n    if (ref.current === node) {\n      return;\n    }\n    if (node) {\n      setTimeout(() => {\n        if (node.getRootNode()) {\n          focusNode(node);\n        } else if (process.env.NODE_ENV === \"development\") {\n          console.warn(\"[@mantine/hooks/use-focus-trap] Ref node is not part of the dom\", node);\n        }\n      });\n      ref.current = node;\n    } else {\n      ref.current = null;\n    }\n  }, [active]);\n  useEffect(() => {\n    if (!active) {\n      return void 0;\n    }\n    ref.current && setTimeout(() => focusNode(ref.current));\n    const handleKeyDown = event => {\n      if (event.key === \"Tab\" && ref.current) {\n        scopeTab(ref.current, event);\n      }\n    };\n    document.addEventListener(\"keydown\", handleKeyDown);\n    return () => {\n      document.removeEventListener(\"keydown\", handleKeyDown);\n      if (restoreAria.current) {\n        restoreAria.current();\n      }\n    };\n  }, [active]);\n  return setRef;\n}\nexport { useFocusTrap };","map":{"version":3,"sources":["../../src/use-focus-trap/use-focus-trap.ts"],"names":[],"mappings":";;;;AAIO,SAAS,YAAY,CAAA,EAAgB;EAAA,IAAf,MAAM,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAG,IAAI;EACxC,MAAM,GAAG,GAAG,MAAM,CAAA,CAAE;EACpB,MAAM,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC;EAChC,MAAM,SAAS,GAAI,IAAI,IAAK;IAC1B,IAAI,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC;IACzD,IAAI,CAAC,YAAY,EAAE;MACjB,MAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,CAAC;MAClE,YAAY,GAAG,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,IAAI;MAC1E,IAAI,CAAC,YAAY,IAAI,SAAS,CAAC,IAAI,CAAC,EAClC,YAAY,GAAG,IAAI;IAC3B;IACI,IAAI,YAAY,EAAE;MAChB,YAAY,CAAC,KAAK,CAAC;QAAE,aAAa,EAAE;MAAI,CAAE,CAAC;IACjD,CAAK,MAAM,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa,EAAE;MACjD,OAAO,CAAC,IAAI,CAAC,uFAAuF,EAAE,IAAI,CAAC;IACjH;EACA,CAAG;EACD,MAAM,MAAM,GAAG,WAAW,CAAE,IAAI,IAAK;IACnC,IAAI,CAAC,MAAM,EAAE;MACX;IACN;IACI,IAAI,IAAI,KAAK,IAAI,EAAE;MACjB,IAAI,WAAW,CAAC,OAAO,EAAE;QACvB,WAAW,CAAC,OAAO,CAAA,CAAE;QACrB,WAAW,CAAC,OAAO,GAAG,IAAI;MAClC;MACM;IACN;IACI,WAAW,CAAC,OAAO,GAAG,eAAe,CAAC,IAAI,CAAC;IAC3C,IAAI,GAAG,CAAC,OAAO,KAAK,IAAI,EAAE;MACxB;IACN;IACI,IAAI,IAAI,EAAE;MACR,UAAU,CAAC,MAAM;QACf,IAAI,IAAI,CAAC,WAAW,CAAA,CAAE,EAAE;UACtB,SAAS,CAAC,IAAI,CAAC;QACzB,CAAS,MAAM,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa,EAAE;UACjD,OAAO,CAAC,IAAI,CAAC,iEAAiE,EAAE,IAAI,CAAC;QAC/F;MACA,CAAO,CAAC;MACF,GAAG,CAAC,OAAO,GAAG,IAAI;IACxB,CAAK,MAAM;MACL,GAAG,CAAC,OAAO,GAAG,IAAI;IACxB;EACA,CAAG,EAAE,CAAC,MAAM,CAAC,CAAC;EACZ,SAAS,CAAC,MAAM;IACd,IAAI,CAAC,MAAM,EAAE;MACX,OAAO,KAAK,CAAC;IACnB;IACI,GAAG,CAAC,OAAO,IAAI,UAAU,CAAC,MAAM,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IACvD,MAAM,aAAa,GAAI,KAAK,IAAK;MAC/B,IAAI,KAAK,CAAC,GAAG,KAAK,KAAK,IAAI,GAAG,CAAC,OAAO,EAAE;QACtC,QAAQ,CAAC,GAAG,CAAC,OAAO,EAAE,KAAK,CAAC;MACpC;IACA,CAAK;IACD,QAAQ,CAAC,gBAAgB,CAAC,SAAS,EAAE,aAAa,CAAC;IACnD,OAAO,MAAM;MACX,QAAQ,CAAC,mBAAmB,CAAC,SAAS,EAAE,aAAa,CAAC;MACtD,IAAI,WAAW,CAAC,OAAO,EAAE;QACvB,WAAW,CAAC,OAAO,CAAA,CAAE;MAC7B;IACA,CAAK;EACL,CAAG,EAAE,CAAC,MAAM,CAAC,CAAC;EACZ,OAAO,MAAM;AACf","sourcesContent":["import { useCallback, useEffect, useRef } from 'react';\nimport { FOCUS_SELECTOR, focusable, tabbable } from './tabbable';\nimport { scopeTab } from './scope-tab';\nimport { createAriaHider } from './create-aria-hider';\n\nexport function useFocusTrap(active = true): (instance: HTMLElement | null) => void {\n  const ref = useRef<HTMLElement | null>();\n  const restoreAria = useRef<Function | null>(null);\n\n  const focusNode = (node: HTMLElement) => {\n    let focusElement: HTMLElement = node.querySelector('[data-autofocus]');\n\n    if (!focusElement) {\n      const children = Array.from<HTMLElement>(node.querySelectorAll(FOCUS_SELECTOR));\n      focusElement = children.find(tabbable) || children.find(focusable) || null;\n      if (!focusElement && focusable(node)) focusElement = node;\n    }\n\n    if (focusElement) {\n      focusElement.focus({ preventScroll: true });\n    } else if (process.env.NODE_ENV === 'development') {\n      // eslint-disable-next-line no-console\n      console.warn(\n        '[@mantine/hooks/use-focus-trap] Failed to find focusable element within provided node',\n        node\n      );\n    }\n  };\n\n  const setRef = useCallback(\n    (node: HTMLElement | null) => {\n      if (!active) {\n        return;\n      }\n\n      if (node === null) {\n        if (restoreAria.current) {\n          restoreAria.current();\n          restoreAria.current = null;\n        }\n        return;\n      }\n\n      restoreAria.current = createAriaHider(node);\n      if (ref.current === node) {\n        return;\n      }\n\n      if (node) {\n        // Delay processing the HTML node by a frame. This ensures focus is assigned correctly.\n        setTimeout(() => {\n          if (node.getRootNode()) {\n            focusNode(node);\n          } else if (process.env.NODE_ENV === 'development') {\n            // eslint-disable-next-line no-console\n            console.warn('[@mantine/hooks/use-focus-trap] Ref node is not part of the dom', node);\n          }\n        });\n\n        ref.current = node;\n      } else {\n        ref.current = null;\n      }\n    },\n    [active]\n  );\n\n  useEffect(() => {\n    if (!active) {\n      return undefined;\n    }\n\n    ref.current && setTimeout(() => focusNode(ref.current));\n\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === 'Tab' && ref.current) {\n        scopeTab(ref.current, event);\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n\n      if (restoreAria.current) {\n        restoreAria.current();\n      }\n    };\n  }, [active]);\n\n  return setRef;\n}\n"]},"metadata":{},"sourceType":"module"}