{"ast":null,"code":"import { useState } from 'react';\nimport { clamp } from '../utils/clamp/clamp.js';\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nconst DEFAULT_OPTIONS = {\n  min: -Infinity,\n  max: Infinity\n};\nfunction useCounter() {\n  let initialValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  let options = arguments.length > 1 ? arguments[1] : undefined;\n  const {\n    min,\n    max\n  } = __spreadValues(__spreadValues({}, DEFAULT_OPTIONS), options);\n  const [count, setCount] = useState(clamp(initialValue, min, max));\n  const increment = () => setCount(current => clamp(current + 1, min, max));\n  const decrement = () => setCount(current => clamp(current - 1, min, max));\n  const set = value => setCount(clamp(value, min, max));\n  const reset = () => setCount(clamp(initialValue, min, max));\n  return [count, {\n    increment,\n    decrement,\n    set,\n    reset\n  }];\n}\nexport { useCounter };","map":{"version":3,"sources":["../../src/use-counter/use-counter.ts"],"names":[],"mappings":";;AAAA,IAAI,SAAS,GAAG,MAAM,CAAC,cAAc;AACrC,IAAI,mBAAmB,GAAG,MAAM,CAAC,qBAAqB;AACtD,IAAI,YAAY,GAAG,MAAM,CAAC,SAAS,CAAC,cAAc;AAClD,IAAI,YAAY,GAAG,MAAM,CAAC,SAAS,CAAC,oBAAoB;AACxD,IAAI,eAAe,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,KAAK,GAAG,IAAI,GAAG,GAAG,SAAS,CAAC,GAAG,EAAE,GAAG,EAAE;EAAE,UAAU,EAAE,IAAI;EAAE,YAAY,EAAE,IAAI;EAAE,QAAQ,EAAE,IAAI;EAAE;AAAK,CAAE,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK;AAC/J,IAAI,cAAc,GAAG,CAAC,CAAC,EAAE,CAAC,KAAK;EAC7B,KAAK,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAA,CAAE,CAAC,EAC5B,IAAI,YAAY,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,EAC5B,eAAe,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC;EACrC,IAAI,mBAAmB,EACrB,KAAK,IAAI,IAAI,IAAI,mBAAmB,CAAC,CAAC,CAAC,EAAE;IACvC,IAAI,YAAY,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,EAC5B,eAAe,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC;EACzC;EACE,OAAO,CAAC;AACV,CAAC;AAGD,MAAM,eAAe,GAAG;EACtB,GAAG,EAAE,CAAC,QAAQ;EACd,GAAG,EAAE;AACP,CAAC;AACM,SAAS,UAAU,CAAA,EAA4B;EAAA,IAA3B,YAAY,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAG,CAAC;EAAA,IAAE,OAAO,GAAA,SAAA,CAAA,MAAA,OAAA,SAAA,MAAA,SAAA;EAClD,MAAM;IAAE,GAAG;IAAE;EAAG,CAAE,GAAG,cAAc,CAAC,cAAc,CAAC,CAAA,CAAE,EAAE,eAAe,CAAC,EAAE,OAAO,CAAC;EACjF,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,YAAY,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;EACjE,MAAM,SAAS,GAAG,CAAA,KAAM,QAAQ,CAAE,OAAO,IAAK,KAAK,CAAC,OAAO,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;EAC3E,MAAM,SAAS,GAAG,CAAA,KAAM,QAAQ,CAAE,OAAO,IAAK,KAAK,CAAC,OAAO,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;EAC3E,MAAM,GAAG,GAAI,KAAK,IAAK,QAAQ,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;EACvD,MAAM,KAAK,GAAG,CAAA,KAAM,QAAQ,CAAC,KAAK,CAAC,YAAY,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;EAC3D,OAAO,CAAC,KAAK,EAAE;IAAE,SAAS;IAAE,SAAS;IAAE,GAAG;IAAE;EAAK,CAAE,CAAC;AACtD","sourcesContent":["import { useState } from 'react';\nimport { clamp } from '../utils';\n\nconst DEFAULT_OPTIONS = {\n  min: -Infinity,\n  max: Infinity,\n};\n\nexport function useCounter(initialValue = 0, options?: Partial<{ min: number; max: number }>) {\n  const { min, max } = { ...DEFAULT_OPTIONS, ...options };\n  const [count, setCount] = useState<number>(clamp(initialValue, min, max));\n\n  const increment = () => setCount((current) => clamp(current + 1, min, max));\n  const decrement = () => setCount((current) => clamp(current - 1, min, max));\n  const set = (value: number) => setCount(clamp(value, min, max));\n  const reset = () => setCount(clamp(initialValue, min, max));\n\n  return [count, { increment, decrement, set, reset }] as const;\n}\n"]},"metadata":{},"sourceType":"module"}