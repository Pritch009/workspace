{"ast":null,"code":"import { useState } from 'react';\nfunction getInputOnChange(setValue) {\n  return val => {\n    if (!val) {\n      setValue(val);\n    } else if (typeof val === \"function\") {\n      setValue(val);\n    } else if (typeof val === \"object\" && \"nativeEvent\" in val) {\n      const {\n        currentTarget\n      } = val;\n      if (currentTarget.type === \"checkbox\") {\n        setValue(currentTarget.checked);\n      } else {\n        setValue(currentTarget.value);\n      }\n    } else {\n      setValue(val);\n    }\n  };\n}\nfunction useInputState(initialState) {\n  const [value, setValue] = useState(initialState);\n  return [value, getInputOnChange(setValue)];\n}\nexport { getInputOnChange, useInputState };","map":{"version":3,"sources":["../../src/use-input-state/use-input-state.ts"],"names":[],"mappings":";AACO,SAAS,gBAAgB,CAAC,QAAQ,EAAE;EACzC,OAAQ,GAAG,IAAK;IACd,IAAI,CAAC,GAAG,EAAE;MACR,QAAQ,CAAC,GAAG,CAAC;IACnB,CAAK,MAAM,IAAI,OAAO,GAAG,KAAK,UAAU,EAAE;MACpC,QAAQ,CAAC,GAAG,CAAC;IACnB,CAAK,MAAM,IAAI,OAAO,GAAG,KAAK,QAAQ,IAAI,aAAa,IAAI,GAAG,EAAE;MAC1D,MAAM;QAAE;MAAa,CAAE,GAAG,GAAG;MAC7B,IAAI,aAAa,CAAC,IAAI,KAAK,UAAU,EAAE;QACrC,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC;MACvC,CAAO,MAAM;QACL,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC;MACrC;IACA,CAAK,MAAM;MACL,QAAQ,CAAC,GAAG,CAAC;IACnB;EACA,CAAG;AACH;AACO,SAAS,aAAa,CAAC,YAAY,EAAE;EAC1C,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAC,YAAY,CAAC;EAChD,OAAO,CAAC,KAAK,EAAE,gBAAgB,CAAC,QAAQ,CAAC,CAAC;AAC5C","sourcesContent":["import React, { useState } from 'react';\n\nexport function getInputOnChange<T>(\n  setValue: (value: null | undefined | T | ((current: T) => T)) => void\n) {\n  return (val: null | undefined | T | React.ChangeEvent<any> | ((current: T) => T)) => {\n    if (!val) {\n      setValue(val as T);\n    } else if (typeof val === 'function') {\n      setValue(val);\n    } else if (typeof val === 'object' && 'nativeEvent' in val) {\n      const { currentTarget } = val;\n\n      if (currentTarget.type === 'checkbox') {\n        setValue((currentTarget as any).checked as any);\n      } else {\n        setValue(currentTarget.value as any);\n      }\n    } else {\n      setValue(val);\n    }\n  };\n}\n\nexport function useInputState<T>(initialState: T) {\n  const [value, setValue] = useState(initialState);\n  return [value, getInputOnChange<T>(setValue)] as [\n    T,\n    (value: null | undefined | T | React.ChangeEvent<any>) => void\n  ];\n}\n"]},"metadata":{},"sourceType":"module"}