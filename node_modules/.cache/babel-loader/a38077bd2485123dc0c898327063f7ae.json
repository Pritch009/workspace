{"ast":null,"code":"import React, { Children } from 'react';\nimport { useComponentDefaultProps } from '@mantine/styles';\nimport useStyles from './MediaQuery.styles.js';\nfunction MediaQuery(props) {\n  var _a;\n  const {\n    children,\n    smallerThan,\n    largerThan,\n    query,\n    styles,\n    className\n  } = useComponentDefaultProps(\"MediaQuery\", {}, props);\n  const {\n    classes,\n    cx\n  } = useStyles({\n    smallerThan,\n    largerThan,\n    query,\n    styles\n  }, {\n    name: \"MediaQuery\"\n  });\n  const child = Children.only(children);\n  if (typeof child === \"object\" && child !== null && \"props\" in child) {\n    return React.cloneElement(child, {\n      className: cx(classes.media, (_a = child.props) == null ? void 0 : _a.className, className)\n    });\n  }\n  return child;\n}\nMediaQuery.displayName = \"@mantine/core/MediaQuery\";\nexport { MediaQuery };","map":{"version":3,"sources":["../../src/MediaQuery/MediaQuery.tsx"],"names":[],"mappings":";;;AAKO,SAAS,UAAU,CAAC,KAAK,EAAE;EAChC,IAAI,EAAE;EACN,MAAM;IAAE,QAAQ;IAAE,WAAW;IAAE,UAAU;IAAE,KAAK;IAAE,MAAM;IAAE;EAAS,CAAE,GAAG,wBAAwB,CAAC,YAAY,EAAE,CAAA,CAAE,EAAE,KAAK,CAAC;EACzH,MAAM;IAAE,OAAO;IAAE;EAAE,CAAE,GAAG,SAAS,CAAC;IAAE,WAAW;IAAE,UAAU;IAAE,KAAK;IAAE;EAAM,CAAE,EAAE;IAAE,IAAI,EAAE;EAAY,CAAE,CAAC;EACrG,MAAM,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC;EACrC,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,KAAK,IAAI,IAAI,OAAO,IAAI,KAAK,EAAE;IACnE,OAAO,KAAK,CAAC,YAAY,CAAC,KAAK,EAAE;MAC/B,SAAS,EAAE,EAAE,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,EAAE,GAAG,KAAK,CAAC,KAAK,KAAK,IAAI,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC,SAAS,EAAE,SAAS;IAChG,CAAK,CAAC;EACN;EACE,OAAO,KAAK;AACd;AACA,UAAU,CAAC,WAAW,GAAG,0BAA0B","sourcesContent":["import React, { Children } from 'react';\nimport {\n  MantineNumberSize,\n  CSSObject,\n  useComponentDefaultProps,\n  MantineTheme,\n} from '@mantine/styles';\nimport useStyles from './MediaQuery.styles';\n\nexport interface MediaQueryProps {\n  className?: string;\n\n  /** Child that should be shown at given breakpoint, it must accept className prop */\n  children: React.ReactNode;\n\n  /** Styles applied to child when viewport is smaller than given breakpoint */\n  smallerThan?: MantineNumberSize;\n\n  /** Styles applied to child when viewport is larger than given breakpoint */\n  largerThan?: MantineNumberSize;\n\n  /** Any other media query */\n  query?: string;\n\n  /** Styles applied to child when breakpoint matches */\n  styles: CSSObject | ((theme: MantineTheme) => CSSObject);\n}\n\nexport function MediaQuery(props: MediaQueryProps) {\n  const { children, smallerThan, largerThan, query, styles, className } = useComponentDefaultProps(\n    'MediaQuery',\n    {},\n    props\n  );\n\n  const { classes, cx } = useStyles(\n    { smallerThan, largerThan, query, styles },\n    { name: 'MediaQuery' }\n  );\n\n  const child = Children.only(children) as React.ReactElement;\n\n  if (typeof child === 'object' && child !== null && 'props' in child) {\n    return React.cloneElement(child, {\n      className: cx(classes.media, child.props?.className, className),\n    });\n  }\n\n  return child;\n}\n\nMediaQuery.displayName = '@mantine/core/MediaQuery';\n"]},"metadata":{},"sourceType":"module"}