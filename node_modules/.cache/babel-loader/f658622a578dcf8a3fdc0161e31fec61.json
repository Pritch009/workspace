{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nfunction parseHotkey(hotkey) {\n  const keys = hotkey.toLowerCase().split(\"+\").map(part => part.trim());\n  const modifiers = {\n    alt: keys.includes(\"alt\"),\n    ctrl: keys.includes(\"ctrl\"),\n    meta: keys.includes(\"meta\"),\n    mod: keys.includes(\"mod\"),\n    shift: keys.includes(\"shift\")\n  };\n  const reservedKeys = [\"alt\", \"ctrl\", \"meta\", \"shift\", \"mod\"];\n  const freeKey = keys.find(key => !reservedKeys.includes(key));\n  return __spreadProps(__spreadValues({}, modifiers), {\n    key: freeKey\n  });\n}\nfunction isExactHotkey(hotkey, event) {\n  const {\n    alt,\n    ctrl,\n    meta,\n    mod,\n    shift,\n    key\n  } = hotkey;\n  const {\n    altKey,\n    ctrlKey,\n    metaKey,\n    shiftKey,\n    key: pressedKey\n  } = event;\n  if (alt !== altKey) {\n    return false;\n  }\n  if (mod) {\n    if (!ctrlKey && !metaKey) {\n      return false;\n    }\n  } else {\n    if (ctrl !== ctrlKey) {\n      return false;\n    }\n    if (meta !== metaKey) {\n      return false;\n    }\n  }\n  if (shift !== shiftKey) {\n    return false;\n  }\n  if (key && (pressedKey.toLowerCase() === key.toLowerCase() || event.code.replace(\"Key\", \"\").toLowerCase() === key.toLowerCase())) {\n    return true;\n  }\n  return false;\n}\nfunction getHotkeyMatcher(hotkey) {\n  return event => isExactHotkey(parseHotkey(hotkey), event);\n}\nfunction getHotkeyHandler(hotkeys) {\n  return event => {\n    const _event = \"nativeEvent\" in event ? event.nativeEvent : event;\n    hotkeys.forEach(_ref => {\n      let [hotkey, handler, options = {\n        preventDefault: true\n      }] = _ref;\n      if (getHotkeyMatcher(hotkey)(_event)) {\n        if (options.preventDefault) {\n          event.preventDefault();\n        }\n        handler(_event);\n      }\n    });\n  };\n}\nexport { getHotkeyHandler, getHotkeyMatcher, parseHotkey };","map":{"version":3,"sources":["../../src/use-hotkeys/parse-hotkey.ts"],"names":[],"mappings":"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","sourcesContent":["export type KeyboardModifiers = {\n  alt: boolean;\n  ctrl: boolean;\n  meta: boolean;\n  mod: boolean;\n  shift: boolean;\n};\n\nexport type Hotkey = KeyboardModifiers & {\n  key?: string;\n};\n\ntype CheckHotkeyMatch = (event: KeyboardEvent) => boolean;\n\nexport function parseHotkey(hotkey: string): Hotkey {\n  const keys = hotkey\n    .toLowerCase()\n    .split('+')\n    .map((part) => part.trim());\n\n  const modifiers: KeyboardModifiers = {\n    alt: keys.includes('alt'),\n    ctrl: keys.includes('ctrl'),\n    meta: keys.includes('meta'),\n    mod: keys.includes('mod'),\n    shift: keys.includes('shift'),\n  };\n\n  const reservedKeys = ['alt', 'ctrl', 'meta', 'shift', 'mod'];\n\n  const freeKey = keys.find((key) => !reservedKeys.includes(key));\n\n  return {\n    ...modifiers,\n    key: freeKey,\n  };\n}\n\nfunction isExactHotkey(hotkey: Hotkey, event: KeyboardEvent): boolean {\n  const { alt, ctrl, meta, mod, shift, key } = hotkey;\n  const { altKey, ctrlKey, metaKey, shiftKey, key: pressedKey } = event;\n\n  if (alt !== altKey) {\n    return false;\n  }\n\n  if (mod) {\n    if (!ctrlKey && !metaKey) {\n      return false;\n    }\n  } else {\n    if (ctrl !== ctrlKey) {\n      return false;\n    }\n    if (meta !== metaKey) {\n      return false;\n    }\n  }\n  if (shift !== shiftKey) {\n    return false;\n  }\n\n  if (\n    key &&\n    (pressedKey.toLowerCase() === key.toLowerCase() ||\n      event.code.replace('Key', '').toLowerCase() === key.toLowerCase())\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nexport function getHotkeyMatcher(hotkey: string): CheckHotkeyMatch {\n  return (event) => isExactHotkey(parseHotkey(hotkey), event);\n}\n\nexport interface HotkeyItemOptions {\n  preventDefault?: boolean;\n}\n\ntype HotkeyItem = [\n  string,\n  (event: React.KeyboardEvent<HTMLElement> | KeyboardEvent) => void,\n  HotkeyItemOptions?\n];\n\nexport function getHotkeyHandler(hotkeys: HotkeyItem[]) {\n  return (event: React.KeyboardEvent<HTMLElement> | KeyboardEvent) => {\n    const _event = 'nativeEvent' in event ? event.nativeEvent : event;\n    hotkeys.forEach(([hotkey, handler, options = { preventDefault: true }]) => {\n      if (getHotkeyMatcher(hotkey)(_event)) {\n        if (options.preventDefault) {\n          event.preventDefault();\n        }\n\n        handler(_event);\n      }\n    });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}