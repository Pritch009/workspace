{"ast":null,"code":"import { useState } from 'react';\nfunction useQueue(_ref) {\n  let {\n    initialValues = [],\n    limit\n  } = _ref;\n  const [{\n    state,\n    queue\n  }, setState] = useState({\n    state: initialValues.slice(0, limit),\n    queue: initialValues.slice(limit)\n  });\n  const add = function () {\n    for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {\n      items[_key] = arguments[_key];\n    }\n    return setState(current => {\n      const results = [...current.state, ...current.queue, ...items];\n      return {\n        state: results.slice(0, limit),\n        queue: results.slice(limit)\n      };\n    });\n  };\n  const update = fn => setState(current => {\n    const results = fn([...current.state, ...current.queue]);\n    return {\n      state: results.slice(0, limit),\n      queue: results.slice(limit)\n    };\n  });\n  const cleanQueue = () => setState(current => ({\n    state: current.state,\n    queue: []\n  }));\n  return {\n    state,\n    queue,\n    add,\n    update,\n    cleanQueue\n  };\n}\nexport { useQueue };","map":{"version":3,"sources":["../../src/use-queue/use-queue.ts"],"names":[],"mappings":";AACO,SAAS,QAAQ,CAAA,IAAA,EAAgC;EAAA,IAA/B;IAAE,aAAa,GAAG,EAAE;IAAE;EAAK,CAAE,GAAA,IAAA;EACpD,MAAM,CAAC;IAAE,KAAK;IAAE;EAAK,CAAE,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAC;IAC5C,KAAK,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC;IACpC,KAAK,EAAE,aAAa,CAAC,KAAK,CAAC,KAAK;EACpC,CAAG,CAAC;EACF,MAAM,GAAG,GAAG,SAAA,CAAA;IAAA,SAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAAI,KAAK,OAAA,KAAA,CAAA,IAAA,GAAA,IAAA,MAAA,IAAA,GAAA,IAAA,EAAA,IAAA;MAAL,KAAK,CAAA,IAAA,IAAA,SAAA,CAAA,IAAA;IAAA;IAAA,OAAK,QAAQ,CAAE,OAAO,IAAK;MAC9C,MAAM,OAAO,GAAG,CAAC,GAAG,OAAO,CAAC,KAAK,EAAE,GAAG,OAAO,CAAC,KAAK,EAAE,GAAG,KAAK,CAAC;MAC9D,OAAO;QACL,KAAK,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC;QAC9B,KAAK,EAAE,OAAO,CAAC,KAAK,CAAC,KAAK;MAChC,CAAK;IACL,CAAG,CAAC;EAAA;EACF,MAAM,MAAM,GAAI,EAAE,IAAK,QAAQ,CAAE,OAAO,IAAK;IAC3C,MAAM,OAAO,GAAG,EAAE,CAAC,CAAC,GAAG,OAAO,CAAC,KAAK,EAAE,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;IACxD,OAAO;MACL,KAAK,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC;MAC9B,KAAK,EAAE,OAAO,CAAC,KAAK,CAAC,KAAK;IAChC,CAAK;EACL,CAAG,CAAC;EACF,MAAM,UAAU,GAAG,CAAA,KAAM,QAAQ,CAAE,OAAO,KAAM;IAAE,KAAK,EAAE,OAAO,CAAC,KAAK;IAAE,KAAK,EAAE;EAAE,CAAE,CAAC,CAAC;EACrF,OAAO;IACL,KAAK;IACL,KAAK;IACL,GAAG;IACH,MAAM;IACN;EACJ,CAAG;AACH","sourcesContent":["import { useState } from 'react';\n\nexport function useQueue<T>({ initialValues = [], limit }: { initialValues?: T[]; limit: number }) {\n  const [{ state, queue }, setState] = useState({\n    state: initialValues.slice(0, limit),\n    queue: initialValues.slice(limit),\n  });\n\n  const add = (...items: T[]) =>\n    setState((current) => {\n      const results = [...current.state, ...current.queue, ...items];\n\n      return {\n        state: results.slice(0, limit),\n        queue: results.slice(limit),\n      };\n    });\n\n  const update = (fn: (state: T[]) => T[]) =>\n    setState((current) => {\n      const results = fn([...current.state, ...current.queue]);\n\n      return {\n        state: results.slice(0, limit),\n        queue: results.slice(limit),\n      };\n    });\n\n  const cleanQueue = () => setState((current) => ({ state: current.state, queue: [] }));\n\n  return {\n    state,\n    queue,\n    add,\n    update,\n    cleanQueue,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}