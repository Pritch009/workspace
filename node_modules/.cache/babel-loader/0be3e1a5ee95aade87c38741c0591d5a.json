{"ast":null,"code":"import React, { forwardRef, useState, useRef } from 'react';\nimport { useMove, useDidUpdate, useMergedRef, clampUseMovePosition } from '@mantine/hooks';\nimport { rem } from '@mantine/styles';\nimport { Thumb } from '../Thumb/Thumb.js';\nimport useStyles from './ColorSlider.styles.js';\nimport { Box } from '../../Box/Box.js';\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source) if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)) {\n    if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n};\nconst ColorSlider = forwardRef((_a, ref) => {\n  var _b = _a,\n    {\n      value,\n      onChange,\n      onChangeEnd,\n      maxValue,\n      round,\n      size = \"md\",\n      thumbColor = \"transparent\",\n      __staticSelector = \"ColorSlider\",\n      focusable = true,\n      overlays,\n      classNames,\n      styles,\n      className,\n      unstyled,\n      variant\n    } = _b,\n    others = __objRest(_b, [\"value\", \"onChange\", \"onChangeEnd\", \"maxValue\", \"round\", \"size\", \"thumbColor\", \"__staticSelector\", \"focusable\", \"overlays\", \"classNames\", \"styles\", \"className\", \"unstyled\", \"variant\"]);\n  const {\n    classes,\n    cx\n  } = useStyles(null, {\n    classNames,\n    styles,\n    name: __staticSelector,\n    unstyled,\n    variant,\n    size\n  });\n  const [position, setPosition] = useState({\n    y: 0,\n    x: value / maxValue\n  });\n  const positionRef = useRef(position);\n  const getChangeValue = val => round ? Math.round(val * maxValue) : val * maxValue;\n  const {\n    ref: sliderRef\n  } = useMove(_ref => {\n    let {\n      x,\n      y\n    } = _ref;\n    positionRef.current = {\n      x,\n      y\n    };\n    onChange(getChangeValue(x));\n  }, {\n    onScrubEnd: () => {\n      const {\n        x\n      } = positionRef.current;\n      onChangeEnd(getChangeValue(x));\n    }\n  });\n  useDidUpdate(() => {\n    setPosition({\n      y: 0,\n      x: value / maxValue\n    });\n  }, [value]);\n  const handleArrow = (event, pos) => {\n    event.preventDefault();\n    const _position = clampUseMovePosition(pos);\n    onChange(getChangeValue(_position.x));\n    onChangeEnd(getChangeValue(_position.x));\n  };\n  const handleKeyDown = event => {\n    switch (event.key) {\n      case \"ArrowRight\":\n        {\n          handleArrow(event, {\n            x: position.x + 0.05,\n            y: position.y\n          });\n          break;\n        }\n      case \"ArrowLeft\":\n        {\n          handleArrow(event, {\n            x: position.x - 0.05,\n            y: position.y\n          });\n          break;\n        }\n    }\n  };\n  const layers = overlays.map((overlay, index) => /* @__PURE__ */React.createElement(\"div\", {\n    className: classes.sliderOverlay,\n    style: overlay,\n    key: index\n  }));\n  return /* @__PURE__ */React.createElement(Box, __spreadProps(__spreadValues({}, others), {\n    ref: useMergedRef(sliderRef, ref),\n    className: cx(classes.slider, className),\n    role: \"slider\",\n    \"aria-valuenow\": value,\n    \"aria-valuemax\": maxValue,\n    \"aria-valuemin\": 0,\n    tabIndex: focusable ? 0 : -1,\n    onKeyDown: handleKeyDown\n  }), layers, /* @__PURE__ */React.createElement(Thumb, {\n    __staticSelector,\n    classNames,\n    styles,\n    position,\n    style: {\n      top: rem(1),\n      backgroundColor: thumbColor\n    },\n    className: classes.sliderThumb,\n    size\n  }));\n});\nColorSlider.displayName = \"@mantine/core/ColorSlider\";\nexport { ColorSlider };","map":{"version":3,"sources":["../../../src/ColorPicker/ColorSlider/ColorSlider.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useState, forwardRef, useRef } from 'react';\nimport {\n  useMove,\n  clampUseMovePosition,\n  useDidUpdate,\n  UseMovePosition,\n  useMergedRef,\n} from '@mantine/hooks';\nimport { DefaultProps, MantineSize, Selectors, rem } from '@mantine/styles';\nimport { Box } from '../../Box';\nimport { Thumb, ThumbStylesNames } from '../Thumb/Thumb';\nimport useStyles from './ColorSlider.styles';\n\nexport type ColorSliderStylesNames =\n  | Exclude<Selectors<typeof useStyles>, 'sliderThumb'>\n  | ThumbStylesNames;\n\nexport interface BaseColorSliderProps\n  extends DefaultProps<ColorSliderStylesNames>,\n    Omit<React.ComponentPropsWithoutRef<'div'>, 'value' | 'onChange'> {\n  variant?: string;\n  value: number;\n  onChange(value: number): void;\n  onChangeEnd(value: number): void;\n  size?: MantineSize;\n  focusable?: boolean;\n  __staticSelector?: string;\n}\n\nexport interface ColorSliderProps extends BaseColorSliderProps {\n  maxValue: number;\n  overlays: React.CSSProperties[];\n  round: boolean;\n  thumbColor?: string;\n}\n\nexport const ColorSlider = forwardRef<HTMLDivElement, ColorSliderProps>(\n  (\n    {\n      value,\n      onChange,\n      onChangeEnd,\n      maxValue,\n      round,\n      size = 'md',\n      thumbColor = 'transparent',\n      __staticSelector = 'ColorSlider',\n      focusable = true,\n      overlays,\n      classNames,\n      styles,\n      className,\n      unstyled,\n      variant,\n      ...others\n    }: ColorSliderProps,\n    ref\n  ) => {\n    const { classes, cx } = useStyles(null, {\n      classNames,\n      styles,\n      name: __staticSelector,\n      unstyled,\n      variant,\n      size,\n    });\n\n    const [position, setPosition] = useState({ y: 0, x: value / maxValue });\n    const positionRef = useRef(position);\n    const getChangeValue = (val: number) => (round ? Math.round(val * maxValue) : val * maxValue);\n    const { ref: sliderRef } = useMove(\n      ({ x, y }) => {\n        positionRef.current = { x, y };\n        onChange(getChangeValue(x));\n      },\n      {\n        onScrubEnd: () => {\n          const { x } = positionRef.current;\n          onChangeEnd(getChangeValue(x));\n        },\n      }\n    );\n\n    useDidUpdate(() => {\n      setPosition({ y: 0, x: value / maxValue });\n    }, [value]);\n\n    const handleArrow = (event: React.KeyboardEvent<HTMLDivElement>, pos: UseMovePosition) => {\n      event.preventDefault();\n      const _position = clampUseMovePosition(pos);\n      onChange(getChangeValue(_position.x));\n      onChangeEnd(getChangeValue(_position.x));\n    };\n\n    const handleKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n      switch (event.key) {\n        case 'ArrowRight': {\n          handleArrow(event, { x: position.x + 0.05, y: position.y });\n          break;\n        }\n\n        case 'ArrowLeft': {\n          handleArrow(event, { x: position.x - 0.05, y: position.y });\n          break;\n        }\n      }\n    };\n\n    const layers = overlays.map((overlay, index) => (\n      <div className={classes.sliderOverlay} style={overlay} key={index} />\n    ));\n\n    return (\n      <Box\n        {...others}\n        ref={useMergedRef(sliderRef, ref)}\n        className={cx(classes.slider, className)}\n        role=\"slider\"\n        aria-valuenow={value}\n        aria-valuemax={maxValue}\n        aria-valuemin={0}\n        tabIndex={focusable ? 0 : -1}\n        onKeyDown={handleKeyDown}\n      >\n        {layers}\n\n        <Thumb\n          __staticSelector={__staticSelector}\n          classNames={classNames}\n          styles={styles}\n          position={position}\n          style={{ top: rem(1), backgroundColor: thumbColor }}\n          className={classes.sliderThumb}\n          size={size}\n        />\n      </Box>\n    );\n  }\n);\n\nColorSlider.displayName = '@mantine/core/ColorSlider';\n"]},"metadata":{},"sourceType":"module"}