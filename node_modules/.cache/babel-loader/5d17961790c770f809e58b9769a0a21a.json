{"ast":null,"code":"function escapeRegex(value) {\n  return value.replace(/[-[\\]{}()*+?.,\\\\^$|#]/g, \"\\\\$&\");\n}\nfunction highlighter(value, _highlight) {\n  if (_highlight == null) {\n    return [{\n      chunk: value,\n      highlighted: false\n    }];\n  }\n  const highlight = Array.isArray(_highlight) ? _highlight.map(escapeRegex) : escapeRegex(_highlight);\n  const shouldHighlight = Array.isArray(highlight) ? highlight.filter(part => part.trim().length > 0).length > 0 : highlight.trim() !== \"\";\n  if (!shouldHighlight) {\n    return [{\n      chunk: value,\n      highlighted: false\n    }];\n  }\n  const matcher = typeof highlight === \"string\" ? highlight.trim() : highlight.filter(part => part.trim().length !== 0).map(part => part.trim()).join(\"|\");\n  const re = new RegExp(`(${matcher})`, \"gi\");\n  const chunks = value.split(re).map(part => ({\n    chunk: part,\n    highlighted: re.test(part)\n  })).filter(_ref => {\n    let {\n      chunk\n    } = _ref;\n    return chunk;\n  });\n  return chunks;\n}\nexport { highlighter };","map":{"version":3,"sources":["../../../src/Highlight/highlighter/highlighter.ts"],"names":[],"mappings":"AAAA,SAAS,WAAW,CAAC,KAAK,EAAE;EAC1B,OAAO,KAAK,CAAC,OAAO,CAAC,wBAAwB,EAAE,MAAM,CAAC;AACxD;AACO,SAAS,WAAW,CAAC,KAAK,EAAE,UAAU,EAAE;EAC7C,IAAI,UAAU,IAAI,IAAI,EAAE;IACtB,OAAO,CAAC;MAAE,KAAK,EAAE,KAAK;MAAE,WAAW,EAAE;IAAK,CAAE,CAAC;EACjD;EACE,MAAM,SAAS,GAAG,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,UAAU,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,WAAW,CAAC,UAAU,CAAC;EACnG,MAAM,eAAe,GAAG,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,SAAS,CAAC,MAAM,CAAE,IAAI,IAAK,IAAI,CAAC,IAAI,CAAA,CAAE,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,GAAG,SAAS,CAAC,IAAI,CAAA,CAAE,KAAK,EAAE;EAC1I,IAAI,CAAC,eAAe,EAAE;IACpB,OAAO,CAAC;MAAE,KAAK,EAAE,KAAK;MAAE,WAAW,EAAE;IAAK,CAAE,CAAC;EACjD;EACE,MAAM,OAAO,GAAG,OAAO,SAAS,KAAK,QAAQ,GAAG,SAAS,CAAC,IAAI,CAAA,CAAE,GAAG,SAAS,CAAC,MAAM,CAAE,IAAI,IAAK,IAAI,CAAC,IAAI,CAAA,CAAE,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,GAAG,CAAE,IAAI,IAAK,IAAI,CAAC,IAAI,CAAA,CAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;EAC5J,MAAM,EAAE,GAAG,IAAI,MAAM,CAAE,IAAG,OAAQ,GAAE,EAAE,IAAI,CAAC;EAC3C,MAAM,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,GAAG,CAAE,IAAI,KAAM;IAAE,KAAK,EAAE,IAAI;IAAE,WAAW,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI;EAAC,CAAE,CAAC,CAAC,CAAC,MAAM,CAAC,IAAA;IAAA,IAAC;MAAE;IAAK,CAAE,GAAA,IAAA;IAAA,OAAK,KAAK;EAAA,EAAC;EACxH,OAAO,MAAM;AACf","sourcesContent":["function escapeRegex(value: string) {\n  return value.replace(/[-[\\]{}()*+?.,\\\\^$|#]/g, '\\\\$&');\n}\n\nexport function highlighter(value: string, _highlight: string | string[]) {\n  if (_highlight == null) {\n    return [{ chunk: value, highlighted: false }];\n  }\n\n  const highlight = Array.isArray(_highlight)\n    ? _highlight.map(escapeRegex)\n    : escapeRegex(_highlight);\n\n  const shouldHighlight = Array.isArray(highlight)\n    ? highlight.filter((part) => part.trim().length > 0).length > 0\n    : highlight.trim() !== '';\n\n  if (!shouldHighlight) {\n    return [{ chunk: value, highlighted: false }];\n  }\n\n  const matcher =\n    typeof highlight === 'string'\n      ? highlight.trim()\n      : highlight\n          .filter((part) => part.trim().length !== 0)\n          .map((part) => part.trim())\n          .join('|');\n\n  const re = new RegExp(`(${matcher})`, 'gi');\n  const chunks = value\n    .split(re)\n    .map((part) => ({ chunk: part, highlighted: re.test(part) }))\n    .filter(({ chunk }) => chunk);\n\n  return chunks;\n}\n"]},"metadata":{},"sourceType":"module"}