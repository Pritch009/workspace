{"ast":null,"code":"import { useState, useRef, useEffect } from 'react';\nimport { getLockStyles } from './utils/get-lock-styles.js';\nimport { injectStyles } from './utils/inject-style-tag.js';\nimport { insertStyleTag } from './utils/insert-style-tag.js';\nimport { makeStyleTag } from './utils/make-style-tag.js';\nfunction useScrollLock(lock) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    disableBodyPadding: false\n  };\n  const [scrollLocked, setScrollLocked] = useState(lock || false);\n  const scrollTop = useRef(0);\n  const {\n    disableBodyPadding\n  } = options;\n  const stylesheet = useRef(null);\n  const lockScroll = () => {\n    scrollTop.current = window.scrollY;\n    const styles = getLockStyles({\n      disableBodyPadding\n    });\n    const sheet = makeStyleTag();\n    injectStyles(sheet, styles);\n    insertStyleTag(sheet);\n    stylesheet.current = sheet;\n  };\n  const unlockScroll = () => {\n    if (!(stylesheet == null ? void 0 : stylesheet.current)) return;\n    stylesheet.current.parentNode.removeChild(stylesheet.current);\n    stylesheet.current = null;\n  };\n  useEffect(() => {\n    if (scrollLocked) {\n      lockScroll();\n    } else {\n      unlockScroll();\n    }\n    return unlockScroll;\n  }, [scrollLocked]);\n  useEffect(() => {\n    if (lock !== void 0) {\n      setScrollLocked(lock);\n    }\n  }, [lock]);\n  useEffect(() => {\n    if (lock === void 0 && typeof window !== \"undefined\") {\n      window.document.body.style.overflow === \"hidden\" && setScrollLocked(true);\n    }\n  }, [setScrollLocked]);\n  return [scrollLocked, setScrollLocked];\n}\nexport { useScrollLock };","map":{"version":3,"sources":["../../src/use-scroll-lock/use-scroll-lock.ts"],"names":[],"mappings":";;;;;AAKO,SAAS,aAAa,CAAC,IAAI,EAE/B;EAAA,IAFiC,OAAO,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAG;IAC5C,kBAAkB,EAAE;EACtB,CAAC;EACC,MAAM,CAAC,YAAY,EAAE,eAAe,CAAC,GAAG,QAAQ,CAAC,IAAI,IAAI,KAAK,CAAC;EAC/D,MAAM,SAAS,GAAG,MAAM,CAAC,CAAC,CAAC;EAC3B,MAAM;IAAE;EAAkB,CAAE,GAAG,OAAO;EACtC,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC;EAC/B,MAAM,UAAU,GAAG,CAAA,KAAM;IACvB,SAAS,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO;IAClC,MAAM,MAAM,GAAG,aAAa,CAAC;MAAE;IAAkB,CAAE,CAAC;IACpD,MAAM,KAAK,GAAG,YAAY,CAAA,CAAE;IAC5B,YAAY,CAAC,KAAK,EAAE,MAAM,CAAC;IAC3B,cAAc,CAAC,KAAK,CAAC;IACrB,UAAU,CAAC,OAAO,GAAG,KAAK;EAC9B,CAAG;EACD,MAAM,YAAY,GAAG,CAAA,KAAM;IACzB,IAAI,EAAE,UAAU,IAAI,IAAI,GAAG,KAAK,CAAC,GAAG,UAAU,CAAC,OAAO,CAAC,EACrD;IACF,UAAU,CAAC,OAAO,CAAC,UAAU,CAAC,WAAW,CAAC,UAAU,CAAC,OAAO,CAAC;IAC7D,UAAU,CAAC,OAAO,GAAG,IAAI;EAC7B,CAAG;EACD,SAAS,CAAC,MAAM;IACd,IAAI,YAAY,EAAE;MAChB,UAAU,CAAA,CAAE;IAClB,CAAK,MAAM;MACL,YAAY,CAAA,CAAE;IACpB;IACI,OAAO,YAAY;EACvB,CAAG,EAAE,CAAC,YAAY,CAAC,CAAC;EAClB,SAAS,CAAC,MAAM;IACd,IAAI,IAAI,KAAK,KAAK,CAAC,EAAE;MACnB,eAAe,CAAC,IAAI,CAAC;IAC3B;EACA,CAAG,EAAE,CAAC,IAAI,CAAC,CAAC;EACV,SAAS,CAAC,MAAM;IACd,IAAI,IAAI,KAAK,KAAK,CAAC,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;MACpD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,KAAK,QAAQ,IAAI,eAAe,CAAC,IAAI,CAAC;IAC/E;EACA,CAAG,EAAE,CAAC,eAAe,CAAC,CAAC;EACrB,OAAO,CAAC,YAAY,EAAE,eAAe,CAAC;AACxC","sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\nimport { getLockStyles } from './utils/get-lock-styles';\nimport { injectStyles } from './utils/inject-style-tag';\nimport { insertStyleTag } from './utils/insert-style-tag';\nimport { makeStyleTag } from './utils/make-style-tag';\n\nexport function useScrollLock(\n  lock?: boolean,\n  options = {\n    disableBodyPadding: false,\n  }\n) {\n  const [scrollLocked, setScrollLocked] = useState(lock || false);\n  const scrollTop = useRef(0);\n\n  const { disableBodyPadding } = options;\n\n  const stylesheet = useRef<CSSStyleSheet | any | null>(null);\n\n  const lockScroll = () => {\n    scrollTop.current = window.scrollY;\n\n    const styles = getLockStyles({ disableBodyPadding });\n\n    /**\n     * by applying styles via style tag\n     * we dont care about previous styles due to inheritance\n     * when scroll gets unlocked we delete that style tag\n     */\n    const sheet = makeStyleTag();\n\n    injectStyles(sheet, styles);\n    insertStyleTag(sheet);\n\n    stylesheet.current = sheet;\n  };\n\n  const unlockScroll = () => {\n    if (!stylesheet?.current) return;\n\n    stylesheet.current.parentNode.removeChild(stylesheet.current);\n    stylesheet.current = null;\n  };\n\n  useEffect(() => {\n    if (scrollLocked) {\n      lockScroll();\n    } else {\n      unlockScroll();\n    }\n\n    return unlockScroll;\n  }, [scrollLocked]);\n\n  useEffect(() => {\n    if (lock !== undefined) {\n      setScrollLocked(lock);\n    }\n  }, [lock]);\n\n  useEffect(() => {\n    if (lock === undefined && typeof window !== 'undefined') {\n      window.document.body.style.overflow === 'hidden' && setScrollLocked(true);\n    }\n  }, [setScrollLocked]);\n\n  return [scrollLocked, setScrollLocked] as const;\n}\n"]},"metadata":{},"sourceType":"module"}