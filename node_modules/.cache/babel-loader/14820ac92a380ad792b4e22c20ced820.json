{"ast":null,"code":"import { useState, useRef, useCallback, useEffect } from 'react';\nfunction getFullscreenElement() {\n  const _document = window.document;\n  const fullscreenElement = _document.fullscreenElement || _document.webkitFullscreenElement || _document.mozFullScreenElement || _document.msFullscreenElement;\n  return fullscreenElement;\n}\nasync function exitFullscreen() {\n  const _document = window.document;\n  if (typeof _document.exitFullscreen === \"function\") return _document.exitFullscreen();\n  if (typeof _document.msExitFullscreen === \"function\") return _document.msExitFullscreen();\n  if (typeof _document.webkitExitFullscreen === \"function\") return _document.webkitExitFullscreen();\n  if (typeof _document.mozCancelFullScreen === \"function\") return _document.mozCancelFullScreen();\n  return null;\n}\nasync function enterFullScreen(element) {\n  var _a, _b, _c, _d, _e;\n  const _element = element;\n  return ((_a = _element.requestFullscreen) == null ? void 0 : _a.call(_element)) || ((_b = _element.msRequestFullscreen) == null ? void 0 : _b.call(_element)) || ((_c = _element.webkitEnterFullscreen) == null ? void 0 : _c.call(_element)) || ((_d = _element.webkitRequestFullscreen) == null ? void 0 : _d.call(_element)) || ((_e = _element.mozRequestFullscreen) == null ? void 0 : _e.call(_element));\n}\nconst prefixes = [\"\", \"webkit\", \"moz\", \"ms\"];\nfunction addEvents(element, _ref2) {\n  let {\n    onFullScreen,\n    onError\n  } = _ref2;\n  prefixes.forEach(prefix => {\n    element.addEventListener(`${prefix}fullscreenchange`, onFullScreen);\n    element.addEventListener(`${prefix}fullscreenerror`, onError);\n  });\n  return () => {\n    prefixes.forEach(prefix => {\n      element.removeEventListener(`${prefix}fullscreenchange`, onFullScreen);\n      element.removeEventListener(`${prefix}fullscreenerror`, onError);\n    });\n  };\n}\nfunction useFullscreen() {\n  const [fullscreen, setFullscreen] = useState(false);\n  const _ref = useRef();\n  const handleFullscreenChange = useCallback(event => {\n    setFullscreen(event.target === getFullscreenElement());\n  }, [setFullscreen]);\n  const handleFullscreenError = useCallback(event => {\n    setFullscreen(false);\n    console.error(`[@mantine/hooks] use-fullscreen: Error attempting full-screen mode method: ${event} (${event.target})`);\n  }, [setFullscreen]);\n  const toggle = useCallback(async () => {\n    if (!getFullscreenElement()) {\n      await enterFullScreen(_ref.current);\n    } else {\n      await exitFullscreen();\n    }\n  }, []);\n  const ref = useCallback(element => {\n    if (element === null) {\n      _ref.current = window.document.documentElement;\n    } else {\n      _ref.current = element;\n    }\n  }, []);\n  useEffect(() => {\n    if (!_ref.current && window.document) {\n      _ref.current = window.document.documentElement;\n      return addEvents(_ref.current, {\n        onFullScreen: handleFullscreenChange,\n        onError: handleFullscreenError\n      });\n    }\n    if (_ref.current) {\n      return addEvents(_ref.current, {\n        onFullScreen: handleFullscreenChange,\n        onError: handleFullscreenError\n      });\n    }\n    return void 0;\n  }, []);\n  return {\n    ref,\n    toggle,\n    fullscreen\n  };\n}\nexport { useFullscreen };","map":{"version":3,"sources":["../../src/use-fullscreen/use-fullscreen.ts"],"names":[],"mappings":"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","sourcesContent":["import { useCallback, useRef, useState, useEffect } from 'react';\n\nfunction getFullscreenElement(): HTMLElement | null {\n  const _document = window.document as any;\n\n  const fullscreenElement =\n    _document.fullscreenElement ||\n    _document.webkitFullscreenElement ||\n    _document.mozFullScreenElement ||\n    _document.msFullscreenElement;\n\n  return fullscreenElement;\n}\n\nasync function exitFullscreen() {\n  const _document = window.document as any;\n\n  if (typeof _document.exitFullscreen === 'function') return _document.exitFullscreen();\n  if (typeof _document.msExitFullscreen === 'function') return _document.msExitFullscreen();\n  if (typeof _document.webkitExitFullscreen === 'function') return _document.webkitExitFullscreen();\n  if (typeof _document.mozCancelFullScreen === 'function') return _document.mozCancelFullScreen();\n\n  return null;\n}\n\nasync function enterFullScreen(element: HTMLElement) {\n  const _element = element as any;\n\n  return (\n    _element.requestFullscreen?.() ||\n    _element.msRequestFullscreen?.() ||\n    _element.webkitEnterFullscreen?.() ||\n    _element.webkitRequestFullscreen?.() ||\n    _element.mozRequestFullscreen?.()\n  );\n}\n\nconst prefixes = ['', 'webkit', 'moz', 'ms'];\n\nfunction addEvents(\n  element: HTMLElement,\n  {\n    onFullScreen,\n    onError,\n  }: { onFullScreen: (event: Event) => void; onError: (event: Event) => void }\n) {\n  prefixes.forEach((prefix) => {\n    element.addEventListener(`${prefix}fullscreenchange`, onFullScreen);\n    element.addEventListener(`${prefix}fullscreenerror`, onError);\n  });\n\n  return () => {\n    prefixes.forEach((prefix) => {\n      element.removeEventListener(`${prefix}fullscreenchange`, onFullScreen);\n      element.removeEventListener(`${prefix}fullscreenerror`, onError);\n    });\n  };\n}\n\nexport function useFullscreen<T extends HTMLElement = any>() {\n  const [fullscreen, setFullscreen] = useState<boolean>(false);\n\n  const _ref = useRef<T>();\n\n  const handleFullscreenChange = useCallback(\n    (event: Event) => {\n      setFullscreen(event.target === getFullscreenElement());\n    },\n    [setFullscreen]\n  );\n\n  const handleFullscreenError = useCallback(\n    (event: Event) => {\n      setFullscreen(false);\n      // eslint-disable-next-line no-console\n      console.error(\n        `[@mantine/hooks] use-fullscreen: Error attempting full-screen mode method: ${event} (${event.target})`\n      );\n    },\n    [setFullscreen]\n  );\n\n  const toggle = useCallback(async () => {\n    if (!getFullscreenElement()) {\n      await enterFullScreen(_ref.current);\n    } else {\n      await exitFullscreen();\n    }\n  }, []);\n\n  const ref = useCallback((element: T | null) => {\n    if (element === null) {\n      _ref.current = window.document.documentElement as T;\n    } else {\n      _ref.current = element;\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!_ref.current && window.document) {\n      _ref.current = window.document.documentElement as T;\n      return addEvents(_ref.current, {\n        onFullScreen: handleFullscreenChange,\n        onError: handleFullscreenError,\n      });\n    }\n\n    if (_ref.current) {\n      return addEvents(_ref.current, {\n        onFullScreen: handleFullscreenChange,\n        onError: handleFullscreenError,\n      });\n    }\n\n    return undefined;\n  }, []);\n\n  return { ref, toggle, fullscreen } as const;\n}\n"]},"metadata":{},"sourceType":"module"}