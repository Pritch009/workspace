{"ast":null,"code":"import { useState } from 'react';\nfunction useClipboard() {\n  let {\n    timeout = 2e3\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const [error, setError] = useState(null);\n  const [copied, setCopied] = useState(false);\n  const [copyTimeout, setCopyTimeout] = useState(null);\n  const handleCopyResult = value => {\n    clearTimeout(copyTimeout);\n    setCopyTimeout(setTimeout(() => setCopied(false), timeout));\n    setCopied(value);\n  };\n  const copy = valueToCopy => {\n    if (\"clipboard\" in navigator) {\n      navigator.clipboard.writeText(valueToCopy).then(() => handleCopyResult(true)).catch(err => setError(err));\n    } else {\n      setError(new Error(\"useClipboard: navigator.clipboard is not supported\"));\n    }\n  };\n  const reset = () => {\n    setCopied(false);\n    setError(null);\n    clearTimeout(copyTimeout);\n  };\n  return {\n    copy,\n    reset,\n    error,\n    copied\n  };\n}\nexport { useClipboard };","map":{"version":3,"sources":["../../src/use-clipboard/use-clipboard.ts"],"names":[],"mappings":";AACO,SAAS,YAAY,CAAA,EAAyB;EAAA,IAAxB;IAAE,OAAO,GAAG;EAAG,CAAE,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAG,CAAA,CAAE;EACjD,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC;EAC3C,MAAM,CAAC,WAAW,EAAE,cAAc,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,gBAAgB,GAAI,KAAK,IAAK;IAClC,YAAY,CAAC,WAAW,CAAC;IACzB,cAAc,CAAC,UAAU,CAAC,MAAM,SAAS,CAAC,KAAK,CAAC,EAAE,OAAO,CAAC,CAAC;IAC3D,SAAS,CAAC,KAAK,CAAC;EACpB,CAAG;EACD,MAAM,IAAI,GAAI,WAAW,IAAK;IAC5B,IAAI,WAAW,IAAI,SAAS,EAAE;MAC5B,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,MAAM,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAE,GAAG,IAAK,QAAQ,CAAC,GAAG,CAAC,CAAC;IACjH,CAAK,MAAM;MACL,QAAQ,CAAC,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;IAC/E;EACA,CAAG;EACD,MAAM,KAAK,GAAG,CAAA,KAAM;IAClB,SAAS,CAAC,KAAK,CAAC;IAChB,QAAQ,CAAC,IAAI,CAAC;IACd,YAAY,CAAC,WAAW,CAAC;EAC7B,CAAG;EACD,OAAO;IAAE,IAAI;IAAE,KAAK;IAAE,KAAK;IAAE;EAAM,CAAE;AACvC","sourcesContent":["import { useState } from 'react';\n\nexport function useClipboard({ timeout = 2000 } = {}) {\n  const [error, setError] = useState<Error>(null);\n  const [copied, setCopied] = useState(false);\n  const [copyTimeout, setCopyTimeout] = useState(null);\n\n  const handleCopyResult = (value: boolean) => {\n    clearTimeout(copyTimeout);\n    setCopyTimeout(setTimeout(() => setCopied(false), timeout));\n    setCopied(value);\n  };\n\n  const copy = (valueToCopy: any) => {\n    if ('clipboard' in navigator) {\n      navigator.clipboard\n        .writeText(valueToCopy)\n        .then(() => handleCopyResult(true))\n        .catch((err) => setError(err));\n    } else {\n      setError(new Error('useClipboard: navigator.clipboard is not supported'));\n    }\n  };\n\n  const reset = () => {\n    setCopied(false);\n    setError(null);\n    clearTimeout(copyTimeout);\n  };\n\n  return { copy, reset, error, copied };\n}\n"]},"metadata":{},"sourceType":"module"}