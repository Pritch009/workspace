{"ast":null,"code":"import React, { forwardRef, useState, useEffect } from 'react';\nimport { useComponentDefaultProps, rem } from '@mantine/styles';\nimport { useElementSize } from '@mantine/hooks';\nimport useStyles from './Spoiler.styles.js';\nimport { Box } from '../Box/Box.js';\nimport { Anchor } from '../Anchor/Anchor.js';\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source) if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)) {\n    if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n};\nconst defaultProps = {\n  maxHeight: 100,\n  transitionDuration: 200,\n  initialState: false\n};\nconst Spoiler = forwardRef((props, ref) => {\n  const _a = useComponentDefaultProps(\"Spoiler\", defaultProps, props),\n    {\n      className,\n      children,\n      maxHeight,\n      hideLabel,\n      showLabel,\n      transitionDuration,\n      controlRef,\n      initialState,\n      classNames,\n      styles,\n      unstyled,\n      variant\n    } = _a,\n    others = __objRest(_a, [\"className\", \"children\", \"maxHeight\", \"hideLabel\", \"showLabel\", \"transitionDuration\", \"controlRef\", \"initialState\", \"classNames\", \"styles\", \"unstyled\", \"variant\"]);\n  const {\n    classes,\n    cx\n  } = useStyles({\n    transitionDuration\n  }, {\n    name: \"Spoiler\",\n    classNames,\n    styles,\n    unstyled,\n    variant\n  });\n  const [show, setShowState] = useState(initialState);\n  const [spoiler, setSpoilerState] = useState(initialState);\n  const {\n    ref: contentRef,\n    height\n  } = useElementSize();\n  const spoilerMoreContent = show ? hideLabel : showLabel;\n  useEffect(() => {\n    setSpoilerState(maxHeight < height);\n  }, [height, maxHeight, children]);\n  return /* @__PURE__ */React.createElement(Box, __spreadValues({\n    className: cx(classes.root, className),\n    ref\n  }, others), /* @__PURE__ */React.createElement(\"div\", {\n    className: classes.content,\n    style: {\n      maxHeight: !show ? rem(maxHeight) : height ? rem(height) : void 0\n    }\n  }, /* @__PURE__ */React.createElement(\"div\", {\n    ref: contentRef\n  }, children)), spoiler && /* @__PURE__ */React.createElement(Anchor, {\n    component: \"button\",\n    ref: controlRef,\n    onClick: () => setShowState(opened => !opened),\n    className: classes.control\n  }, spoilerMoreContent));\n});\nSpoiler.displayName = \"@mantine/core/Spoiler\";\nexport { Spoiler };","map":{"version":3,"sources":["../../src/Spoiler/Spoiler.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useState, useEffect, forwardRef } from 'react';\nimport { DefaultProps, Selectors, useComponentDefaultProps, rem } from '@mantine/styles';\nimport { useElementSize } from '@mantine/hooks';\nimport { Anchor } from '../Anchor';\nimport { Box } from '../Box';\nimport useStyles, { SpoilerStylesParams } from './Spoiler.styles';\n\nexport type SpoilerStylesNames = Selectors<typeof useStyles>;\n\nexport interface SpoilerProps\n  extends DefaultProps<SpoilerStylesNames, SpoilerStylesParams>,\n    React.ComponentPropsWithoutRef<'div'> {\n  variant?: string;\n\n  /** Max height of visible content, when this point is reached spoiler appears */\n  maxHeight: number;\n\n  /** Label for close spoiler action */\n  hideLabel: React.ReactNode;\n\n  /** Label for open spoiler action */\n  showLabel: React.ReactNode;\n\n  /** Get ref of spoiler toggle button */\n  controlRef?: React.ForwardedRef<HTMLButtonElement>;\n\n  /** Initial spoiler state, true to wrap content in spoiler, false to show content without spoiler, opened state will be updated on mount */\n  initialState?: boolean;\n\n  /** Spoiler reveal transition duration in ms, 0 or null to turn off animation */\n  transitionDuration?: number;\n}\n\nconst defaultProps: Partial<SpoilerProps> = {\n  maxHeight: 100,\n  transitionDuration: 200,\n  initialState: false,\n};\n\nexport const Spoiler = forwardRef<HTMLDivElement, SpoilerProps>((props, ref) => {\n  const {\n    className,\n    children,\n    maxHeight,\n    hideLabel,\n    showLabel,\n    transitionDuration,\n    controlRef,\n    initialState,\n    classNames,\n    styles,\n    unstyled,\n    variant,\n    ...others\n  } = useComponentDefaultProps('Spoiler', defaultProps, props);\n\n  const { classes, cx } = useStyles(\n    { transitionDuration },\n    { name: 'Spoiler', classNames, styles, unstyled, variant }\n  );\n\n  const [show, setShowState] = useState(initialState);\n  const [spoiler, setSpoilerState] = useState(initialState);\n  const { ref: contentRef, height } = useElementSize();\n\n  const spoilerMoreContent = show ? hideLabel : showLabel;\n\n  useEffect(() => {\n    setSpoilerState(maxHeight < height);\n  }, [height, maxHeight, children]);\n\n  return (\n    <Box className={cx(classes.root, className)} ref={ref} {...others}>\n      <div\n        className={classes.content}\n        style={{\n          maxHeight: !show ? rem(maxHeight) : height ? rem(height) : undefined,\n        }}\n      >\n        <div ref={contentRef}>{children}</div>\n      </div>\n\n      {spoiler && (\n        <Anchor\n          component=\"button\"\n          ref={controlRef}\n          onClick={() => setShowState((opened) => !opened)}\n          className={classes.control}\n        >\n          {spoilerMoreContent}\n        </Anchor>\n      )}\n    </Box>\n  );\n});\n\nSpoiler.displayName = '@mantine/core/Spoiler';\n"]},"metadata":{},"sourceType":"module"}