{"ast":null,"code":"import { useState, useRef, useEffect } from 'react';\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nconst DEFAULT_EVENTS = [\"keypress\", \"mousemove\", \"touchmove\", \"click\", \"scroll\"];\nconst DEFAULT_OPTIONS = {\n  events: DEFAULT_EVENTS,\n  initialState: true\n};\nfunction useIdle(timeout, options) {\n  const {\n    events,\n    initialState\n  } = __spreadValues(__spreadValues({}, DEFAULT_OPTIONS), options);\n  const [idle, setIdle] = useState(initialState);\n  const timer = useRef();\n  useEffect(() => {\n    const handleEvents = () => {\n      setIdle(false);\n      if (timer.current) {\n        window.clearTimeout(timer.current);\n      }\n      timer.current = window.setTimeout(() => {\n        setIdle(true);\n      }, timeout);\n    };\n    events.forEach(event => document.addEventListener(event, handleEvents));\n    return () => {\n      events.forEach(event => document.removeEventListener(event, handleEvents));\n    };\n  }, [timeout]);\n  return idle;\n}\nexport { useIdle };","map":{"version":3,"sources":["../../src/use-idle/use-idle.ts"],"names":[],"mappings":";AAAA,IAAI,SAAS,GAAG,MAAM,CAAC,cAAc;AACrC,IAAI,mBAAmB,GAAG,MAAM,CAAC,qBAAqB;AACtD,IAAI,YAAY,GAAG,MAAM,CAAC,SAAS,CAAC,cAAc;AAClD,IAAI,YAAY,GAAG,MAAM,CAAC,SAAS,CAAC,oBAAoB;AACxD,IAAI,eAAe,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,KAAK,GAAG,IAAI,GAAG,GAAG,SAAS,CAAC,GAAG,EAAE,GAAG,EAAE;EAAE,UAAU,EAAE,IAAI;EAAE,YAAY,EAAE,IAAI;EAAE,QAAQ,EAAE,IAAI;EAAE;AAAK,CAAE,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK;AAC/J,IAAI,cAAc,GAAG,CAAC,CAAC,EAAE,CAAC,KAAK;EAC7B,KAAK,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAA,CAAE,CAAC,EAC5B,IAAI,YAAY,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,EAC5B,eAAe,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC;EACrC,IAAI,mBAAmB,EACrB,KAAK,IAAI,IAAI,IAAI,mBAAmB,CAAC,CAAC,CAAC,EAAE;IACvC,IAAI,YAAY,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,EAC5B,eAAe,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC;EACzC;EACE,OAAO,CAAC;AACV,CAAC;AAED,MAAM,cAAc,GAAG,CACrB,UAAU,EACV,WAAW,EACX,WAAW,EACX,OAAO,EACP,QAAQ,CACT;AACD,MAAM,eAAe,GAAG;EACtB,MAAM,EAAE,cAAc;EACtB,YAAY,EAAE;AAChB,CAAC;AACM,SAAS,OAAO,CAAC,OAAO,EAAE,OAAO,EAAE;EACxC,MAAM;IAAE,MAAM;IAAE;EAAY,CAAE,GAAG,cAAc,CAAC,cAAc,CAAC,CAAA,CAAE,EAAE,eAAe,CAAC,EAAE,OAAO,CAAC;EAC7F,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,GAAG,QAAQ,CAAC,YAAY,CAAC;EAC9C,MAAM,KAAK,GAAG,MAAM,CAAA,CAAE;EACtB,SAAS,CAAC,MAAM;IACd,MAAM,YAAY,GAAG,CAAA,KAAM;MACzB,OAAO,CAAC,KAAK,CAAC;MACd,IAAI,KAAK,CAAC,OAAO,EAAE;QACjB,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,OAAO,CAAC;MAC1C;MACM,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM;QACtC,OAAO,CAAC,IAAI,CAAC;MACrB,CAAO,EAAE,OAAO,CAAC;IACjB,CAAK;IACD,MAAM,CAAC,OAAO,CAAE,KAAK,IAAK,QAAQ,CAAC,gBAAgB,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;IACzE,OAAO,MAAM;MACX,MAAM,CAAC,OAAO,CAAE,KAAK,IAAK,QAAQ,CAAC,mBAAmB,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;IAClF,CAAK;EACL,CAAG,EAAE,CAAC,OAAO,CAAC,CAAC;EACb,OAAO,IAAI;AACb","sourcesContent":["import { useState, useEffect, useRef } from 'react';\n\nconst DEFAULT_EVENTS: (keyof DocumentEventMap)[] = [\n  'keypress',\n  'mousemove',\n  'touchmove',\n  'click',\n  'scroll',\n];\nconst DEFAULT_OPTIONS = {\n  events: DEFAULT_EVENTS,\n  initialState: true,\n};\n\nexport function useIdle(\n  timeout: number,\n  options?: Partial<{ events: (keyof DocumentEventMap)[]; initialState: boolean }>\n) {\n  const { events, initialState } = { ...DEFAULT_OPTIONS, ...options };\n  const [idle, setIdle] = useState<boolean>(initialState);\n  const timer = useRef<number>();\n\n  useEffect(() => {\n    const handleEvents = () => {\n      setIdle(false);\n\n      if (timer.current) {\n        window.clearTimeout(timer.current);\n      }\n\n      timer.current = window.setTimeout(() => {\n        setIdle(true);\n      }, timeout);\n    };\n\n    events.forEach((event) => document.addEventListener(event, handleEvents));\n\n    return () => {\n      events.forEach((event) => document.removeEventListener(event, handleEvents));\n    };\n  }, [timeout]);\n\n  return idle;\n}\n"]},"metadata":{},"sourceType":"module"}