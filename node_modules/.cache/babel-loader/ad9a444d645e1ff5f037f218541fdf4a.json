{"ast":null,"code":"import React, { forwardRef, useState } from 'react';\nimport useStyles from './Thumb.styles.js';\nimport { Box } from '../../Box/Box.js';\nimport { Transition } from '../../Transition/Transition.js';\nconst Thumb = forwardRef((_ref, ref) => {\n  let {\n    max,\n    min,\n    value,\n    position,\n    label,\n    dragging,\n    onMouseDown,\n    onKeyDownCapture,\n    color,\n    classNames,\n    styles,\n    size,\n    labelTransition,\n    labelTransitionDuration,\n    labelTransitionTimingFunction,\n    labelAlwaysOn,\n    thumbLabel,\n    onFocus,\n    onBlur,\n    showLabelOnHover,\n    isHovered,\n    children = null,\n    disabled,\n    unstyled,\n    thumbSize,\n    variant\n  } = _ref;\n  const {\n    classes,\n    cx,\n    theme\n  } = useStyles({\n    color,\n    disabled,\n    thumbSize\n  }, {\n    name: \"Slider\",\n    classNames,\n    styles,\n    unstyled,\n    variant,\n    size\n  });\n  const [focused, setFocused] = useState(false);\n  const isVisible = labelAlwaysOn || dragging || focused || showLabelOnHover && isHovered;\n  return /* @__PURE__ */React.createElement(Box, {\n    tabIndex: 0,\n    role: \"slider\",\n    \"aria-label\": thumbLabel,\n    \"aria-valuemax\": max,\n    \"aria-valuemin\": min,\n    \"aria-valuenow\": value,\n    ref,\n    className: cx(classes.thumb, {\n      [classes.dragging]: dragging\n    }),\n    onFocus: () => {\n      setFocused(true);\n      typeof onFocus === \"function\" && onFocus();\n    },\n    onBlur: () => {\n      setFocused(false);\n      typeof onBlur === \"function\" && onBlur();\n    },\n    onTouchStart: onMouseDown,\n    onMouseDown,\n    onKeyDownCapture,\n    onClick: event => event.stopPropagation(),\n    style: {\n      [theme.dir === \"rtl\" ? \"right\" : \"left\"]: `${position}%`\n    }\n  }, children, /* @__PURE__ */React.createElement(Transition, {\n    mounted: label != null && isVisible,\n    duration: labelTransitionDuration,\n    transition: labelTransition,\n    timingFunction: labelTransitionTimingFunction || theme.transitionTimingFunction\n  }, transitionStyles => /* @__PURE__ */React.createElement(\"div\", {\n    style: transitionStyles,\n    className: classes.label\n  }, label)));\n});\nThumb.displayName = \"@mantine/core/SliderThumb\";\nexport { Thumb };","map":{"version":3,"sources":["../../../src/Slider/Thumb/Thumb.tsx"],"names":[],"mappings":";;;;AAIY,MAAC,KAAK,GAAG,UAAU,CAAC,CAAA,IAAA,EA2B7B,GAAG,KAAK;EAAA,IA3BsB;IAC/B,GAAG;IACH,GAAG;IACH,KAAK;IACL,QAAQ;IACR,KAAK;IACL,QAAQ;IACR,WAAW;IACX,gBAAgB;IAChB,KAAK;IACL,UAAU;IACV,MAAM;IACN,IAAI;IACJ,eAAe;IACf,uBAAuB;IACvB,6BAA6B;IAC7B,aAAa;IACb,UAAU;IACV,OAAO;IACP,MAAM;IACN,gBAAgB;IAChB,SAAS;IACT,QAAQ,GAAG,IAAI;IACf,QAAQ;IACR,QAAQ;IACR,SAAS;IACT;EACF,CAAC,GAAA,IAAA;EACC,MAAM;IAAE,OAAO;IAAE,EAAE;IAAE;EAAK,CAAE,GAAG,SAAS,CAAC;IAAE,KAAK;IAAE,QAAQ;IAAE;EAAS,CAAE,EAAE;IAAE,IAAI,EAAE,QAAQ;IAAE,UAAU;IAAE,MAAM;IAAE,QAAQ;IAAE,OAAO;IAAE;EAAI,CAAE,CAAC;EACzI,MAAM,CAAC,OAAO,EAAE,UAAU,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,SAAS,GAAG,aAAa,IAAI,QAAQ,IAAI,OAAO,IAAI,gBAAgB,IAAI,SAAS;EACvF,OAAA,eAAuB,KAAK,CAAC,aAAa,CAAC,GAAG,EAAE;IAC9C,QAAQ,EAAE,CAAC;IACX,IAAI,EAAE,QAAQ;IACd,YAAY,EAAE,UAAU;IACxB,eAAe,EAAE,GAAG;IACpB,eAAe,EAAE,GAAG;IACpB,eAAe,EAAE,KAAK;IACtB,GAAG;IACH,SAAS,EAAE,EAAE,CAAC,OAAO,CAAC,KAAK,EAAE;MAAE,CAAC,OAAO,CAAC,QAAQ,GAAG;IAAQ,CAAE,CAAC;IAC9D,OAAO,EAAE,CAAA,KAAM;MACb,UAAU,CAAC,IAAI,CAAC;MAChB,OAAO,OAAO,KAAK,UAAU,IAAI,OAAO,CAAA,CAAE;IAChD,CAAK;IACD,MAAM,EAAE,CAAA,KAAM;MACZ,UAAU,CAAC,KAAK,CAAC;MACjB,OAAO,MAAM,KAAK,UAAU,IAAI,MAAM,CAAA,CAAE;IAC9C,CAAK;IACD,YAAY,EAAE,WAAW;IACzB,WAAW;IACX,gBAAgB;IAChB,OAAO,EAAG,KAAK,IAAK,KAAK,CAAC,eAAe,CAAA,CAAE;IAC3C,KAAK,EAAE;MAAE,CAAC,KAAK,CAAC,GAAG,KAAK,KAAK,GAAG,OAAO,GAAG,MAAM,GAAI,GAAE,QAAS;IAAE;EACrE,CAAG,EAAE,QAAQ,EAAA,eAAkB,KAAK,CAAC,aAAa,CAAC,UAAU,EAAE;IAC3D,OAAO,EAAE,KAAK,IAAI,IAAI,IAAI,SAAS;IACnC,QAAQ,EAAE,uBAAuB;IACjC,UAAU,EAAE,eAAe;IAC3B,cAAc,EAAE,6BAA6B,IAAI,KAAK,CAAC;EAC3D,CAAG,EAAG,gBAAgB,IAAA,eAAqB,KAAK,CAAC,aAAa,CAAC,KAAK,EAAE;IAClE,KAAK,EAAE,gBAAgB;IACvB,SAAS,EAAE,OAAO,CAAC;EACvB,CAAG,EAAE,KAAK,CAAC,CAAC,CAAC;AACb,CAAC,CAAA;AACD,KAAK,CAAC,WAAW,GAAG,2BAA2B","sourcesContent":["import React, { useState, forwardRef } from 'react';\nimport { DefaultProps, MantineNumberSize, MantineColor, Selectors } from '@mantine/styles';\nimport { Box } from '../../Box';\nimport { Transition, MantineTransition } from '../../Transition';\nimport useStyles from './Thumb.styles';\n\nexport type ThumbStylesNames = Selectors<typeof useStyles>;\n\nexport interface ThumbProps extends DefaultProps<ThumbStylesNames> {\n  max: number;\n  min: number;\n  value: number;\n  position: number;\n  dragging: boolean;\n  color: MantineColor;\n  size: MantineNumberSize;\n  label: React.ReactNode;\n  onKeyDownCapture?(event: React.KeyboardEvent<HTMLDivElement>): void;\n  onMouseDown?(event: React.MouseEvent<HTMLDivElement> | React.TouchEvent<HTMLDivElement>): void;\n  labelTransition?: MantineTransition;\n  labelTransitionDuration?: number;\n  labelTransitionTimingFunction?: string;\n  labelAlwaysOn: boolean;\n  thumbLabel: string;\n  onFocus?(): void;\n  onBlur?(): void;\n  showLabelOnHover?: boolean;\n  isHovered?: boolean;\n  children?: React.ReactNode;\n  disabled: boolean;\n  thumbSize: number;\n  variant: string;\n}\n\nexport const Thumb = forwardRef<HTMLDivElement, ThumbProps>(\n  (\n    {\n      max,\n      min,\n      value,\n      position,\n      label,\n      dragging,\n      onMouseDown,\n      onKeyDownCapture,\n      color,\n      classNames,\n      styles,\n      size,\n      labelTransition,\n      labelTransitionDuration,\n      labelTransitionTimingFunction,\n      labelAlwaysOn,\n      thumbLabel,\n      onFocus,\n      onBlur,\n      showLabelOnHover,\n      isHovered,\n      children = null,\n      disabled,\n      unstyled,\n      thumbSize,\n      variant,\n    }: ThumbProps,\n    ref\n  ) => {\n    const { classes, cx, theme } = useStyles(\n      { color, disabled, thumbSize },\n      { name: 'Slider', classNames, styles, unstyled, variant, size }\n    );\n    const [focused, setFocused] = useState(false);\n\n    const isVisible = labelAlwaysOn || dragging || focused || (showLabelOnHover && isHovered);\n\n    return (\n      <Box<'div'>\n        tabIndex={0}\n        role=\"slider\"\n        aria-label={thumbLabel}\n        aria-valuemax={max}\n        aria-valuemin={min}\n        aria-valuenow={value}\n        ref={ref}\n        className={cx(classes.thumb, { [classes.dragging]: dragging })}\n        onFocus={() => {\n          setFocused(true);\n          typeof onFocus === 'function' && onFocus();\n        }}\n        onBlur={() => {\n          setFocused(false);\n          typeof onBlur === 'function' && onBlur();\n        }}\n        onTouchStart={onMouseDown}\n        onMouseDown={onMouseDown}\n        onKeyDownCapture={onKeyDownCapture}\n        onClick={(event) => event.stopPropagation()}\n        style={{ [theme.dir === 'rtl' ? 'right' : 'left']: `${position}%` }}\n      >\n        {children}\n        <Transition\n          mounted={label != null && isVisible}\n          duration={labelTransitionDuration}\n          transition={labelTransition}\n          timingFunction={labelTransitionTimingFunction || theme.transitionTimingFunction}\n        >\n          {(transitionStyles) => (\n            <div style={transitionStyles} className={classes.label}>\n              {label}\n            </div>\n          )}\n        </Transition>\n      </Box>\n    );\n  }\n);\n\nThumb.displayName = '@mantine/core/SliderThumb';\n"]},"metadata":{},"sourceType":"module"}