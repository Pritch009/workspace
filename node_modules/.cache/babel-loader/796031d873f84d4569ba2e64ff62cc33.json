{"ast":null,"code":"import { useRef, useCallback, useEffect } from 'react';\nimport { useReducedMotion } from '../use-reduced-motion/use-reduced-motion.js';\nimport { useWindowEvent } from '../use-window-event/use-window-event.js';\nimport { easeInOutQuad } from './utils/ease-in-out-quad.js';\nimport { getRelativePosition } from './utils/get-relative-position.js';\nimport { getScrollStart } from './utils/get-scroll-start.js';\nimport { setScrollParam } from './utils/set-scroll-param.js';\nfunction useScrollIntoView() {\n  let {\n    duration = 1250,\n    axis = \"y\",\n    onScrollFinish,\n    easing = easeInOutQuad,\n    offset = 0,\n    cancelable = true,\n    isList = false\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const frameID = useRef(0);\n  const startTime = useRef(0);\n  const shouldStop = useRef(false);\n  const scrollableRef = useRef(null);\n  const targetRef = useRef(null);\n  const reducedMotion = useReducedMotion();\n  const cancel = () => {\n    if (frameID.current) {\n      cancelAnimationFrame(frameID.current);\n    }\n  };\n  const scrollIntoView = useCallback(function () {\n    let {\n      alignment = \"start\"\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var _a;\n    shouldStop.current = false;\n    if (frameID.current) {\n      cancel();\n    }\n    const start = (_a = getScrollStart({\n      parent: scrollableRef.current,\n      axis\n    })) != null ? _a : 0;\n    const change = getRelativePosition({\n      parent: scrollableRef.current,\n      target: targetRef.current,\n      axis,\n      alignment,\n      offset,\n      isList\n    }) - (scrollableRef.current ? 0 : start);\n    function animateScroll() {\n      if (startTime.current === 0) {\n        startTime.current = performance.now();\n      }\n      const now = performance.now();\n      const elapsed = now - startTime.current;\n      const t = reducedMotion || duration === 0 ? 1 : elapsed / duration;\n      const distance = start + change * easing(t);\n      setScrollParam({\n        parent: scrollableRef.current,\n        axis,\n        distance\n      });\n      if (!shouldStop.current && t < 1) {\n        frameID.current = requestAnimationFrame(animateScroll);\n      } else {\n        typeof onScrollFinish === \"function\" && onScrollFinish();\n        startTime.current = 0;\n        frameID.current = 0;\n        cancel();\n      }\n    }\n    animateScroll();\n  }, [axis, duration, easing, isList, offset, onScrollFinish, reducedMotion]);\n  const handleStop = () => {\n    if (cancelable) {\n      shouldStop.current = true;\n    }\n  };\n  useWindowEvent(\"wheel\", handleStop, {\n    passive: true\n  });\n  useWindowEvent(\"touchmove\", handleStop, {\n    passive: true\n  });\n  useEffect(() => cancel, []);\n  return {\n    scrollableRef,\n    targetRef,\n    scrollIntoView,\n    cancel\n  };\n}\nexport { useScrollIntoView };","map":{"version":3,"sources":["../../src/use-scroll-into-view/use-scroll-into-view.ts"],"names":[],"mappings":"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","sourcesContent":["import { useCallback, useRef, useEffect } from 'react';\nimport { useReducedMotion } from '../use-reduced-motion/use-reduced-motion';\nimport { useWindowEvent } from '../use-window-event/use-window-event';\nimport { easeInOutQuad } from './utils/ease-in-out-quad';\nimport { getRelativePosition } from './utils/get-relative-position';\nimport { getScrollStart } from './utils/get-scroll-start';\nimport { setScrollParam } from './utils/set-scroll-param';\n\ninterface ScrollIntoViewAnimation {\n  /** target element alignment relatively to parent based on current axis */\n  alignment?: 'start' | 'end' | 'center';\n}\n\ninterface ScrollIntoViewParams {\n  /** callback fired after scroll */\n  onScrollFinish?: () => void;\n\n  /** duration of scroll in milliseconds */\n  duration?: number;\n\n  /** axis of scroll */\n  axis?: 'x' | 'y';\n\n  /** custom mathematical easing function */\n  easing?: (t: number) => number;\n\n  /** additional distance between nearest edge and element */\n  offset?: number;\n\n  /** indicator if animation may be interrupted by user scrolling */\n  cancelable?: boolean;\n\n  /** prevents content jumping in scrolling lists with multiple targets */\n  isList?: boolean;\n}\n\nexport function useScrollIntoView<\n  Target extends HTMLElement,\n  Parent extends HTMLElement | null = null\n>({\n  duration = 1250,\n  axis = 'y',\n  onScrollFinish,\n  easing = easeInOutQuad,\n  offset = 0,\n  cancelable = true,\n  isList = false,\n}: ScrollIntoViewParams = {}) {\n  const frameID = useRef(0);\n  const startTime = useRef(0);\n  const shouldStop = useRef(false);\n\n  const scrollableRef = useRef<Parent>(null);\n  const targetRef = useRef<Target>(null);\n\n  const reducedMotion = useReducedMotion();\n\n  const cancel = (): void => {\n    if (frameID.current) {\n      cancelAnimationFrame(frameID.current);\n    }\n  };\n\n  const scrollIntoView = useCallback(\n    ({ alignment = 'start' }: ScrollIntoViewAnimation = {}) => {\n      shouldStop.current = false;\n\n      if (frameID.current) {\n        cancel();\n      }\n\n      const start = getScrollStart({ parent: scrollableRef.current, axis }) ?? 0;\n\n      const change =\n        getRelativePosition({\n          parent: scrollableRef.current,\n          target: targetRef.current,\n          axis,\n          alignment,\n          offset,\n          isList,\n        }) - (scrollableRef.current ? 0 : start);\n\n      function animateScroll() {\n        if (startTime.current === 0) {\n          startTime.current = performance.now();\n        }\n\n        const now = performance.now();\n        const elapsed = now - startTime.current;\n\n        // easing timing progress\n        const t = reducedMotion || duration === 0 ? 1 : elapsed / duration;\n\n        const distance = start + change * easing(t);\n\n        setScrollParam({\n          parent: scrollableRef.current,\n          axis,\n          distance,\n        });\n\n        if (!shouldStop.current && t < 1) {\n          frameID.current = requestAnimationFrame(animateScroll);\n        } else {\n          typeof onScrollFinish === 'function' && onScrollFinish();\n          startTime.current = 0;\n          frameID.current = 0;\n          cancel();\n        }\n      }\n      animateScroll();\n    },\n    [axis, duration, easing, isList, offset, onScrollFinish, reducedMotion]\n  );\n\n  const handleStop = () => {\n    if (cancelable) {\n      shouldStop.current = true;\n    }\n  };\n\n  /**\n   * detection of one of these events stops scroll animation\n   * wheel - mouse wheel / touch pad\n   * touchmove - any touchable device\n   */\n\n  useWindowEvent('wheel', handleStop, {\n    passive: true,\n  });\n\n  useWindowEvent('touchmove', handleStop, {\n    passive: true,\n  });\n\n  // cleanup requestAnimationFrame\n  useEffect(() => cancel, []);\n\n  return {\n    scrollableRef,\n    targetRef,\n    scrollIntoView,\n    cancel,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}