{"ast":null,"code":"import { useEffect } from 'react';\nimport { getHotkeyMatcher } from './parse-hotkey.js';\nexport { getHotkeyHandler } from './parse-hotkey.js';\nfunction shouldFireEvent(event, tagsToIgnore) {\n  let triggerOnContentEditable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  if (event.target instanceof HTMLElement) {\n    if (triggerOnContentEditable) {\n      return !tagsToIgnore.includes(event.target.tagName);\n    }\n    return !event.target.isContentEditable && !tagsToIgnore.includes(event.target.tagName);\n  }\n  return true;\n}\nfunction useHotkeys(hotkeys) {\n  let tagsToIgnore = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [\"INPUT\", \"TEXTAREA\", \"SELECT\"];\n  let triggerOnContentEditable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  useEffect(() => {\n    const keydownListener = event => {\n      hotkeys.forEach(_ref => {\n        let [hotkey, handler, options = {\n          preventDefault: true\n        }] = _ref;\n        if (getHotkeyMatcher(hotkey)(event) && shouldFireEvent(event, tagsToIgnore, triggerOnContentEditable)) {\n          if (options.preventDefault) {\n            event.preventDefault();\n          }\n          handler(event);\n        }\n      });\n    };\n    document.documentElement.addEventListener(\"keydown\", keydownListener);\n    return () => document.documentElement.removeEventListener(\"keydown\", keydownListener);\n  }, [hotkeys]);\n}\nexport { useHotkeys };","map":{"version":3,"sources":["../../src/use-hotkeys/use-hotkeys.ts"],"names":[],"mappings":";;;AAGA,SAAS,eAAe,CAAC,KAAK,EAAE,YAAY,EAAoC;EAAA,IAAlC,wBAAwB,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAG,KAAK;EAC5E,IAAI,KAAK,CAAC,MAAM,YAAY,WAAW,EAAE;IACvC,IAAI,wBAAwB,EAAE;MAC5B,OAAO,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC;IACzD;IACI,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,iBAAiB,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC;EAC1F;EACE,OAAO,IAAI;AACb;AACO,SAAS,UAAU,CAAC,OAAO,EAAoF;EAAA,IAAlF,YAAY,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAG,CAAC,OAAO,EAAE,UAAU,EAAE,QAAQ,CAAC;EAAA,IAAE,wBAAwB,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAG,KAAK;EAClH,SAAS,CAAC,MAAM;IACd,MAAM,eAAe,GAAI,KAAK,IAAK;MACjC,OAAO,CAAC,OAAO,CAAC,IAAA,IAA2D;QAAA,IAA1D,CAAC,MAAM,EAAE,OAAO,EAAE,OAAO,GAAG;UAAE,cAAc,EAAE;QAAI,CAAE,CAAC,GAAA,IAAA;QACpE,IAAI,gBAAgB,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,IAAI,eAAe,CAAC,KAAK,EAAE,YAAY,EAAE,wBAAwB,CAAC,EAAE;UACrG,IAAI,OAAO,CAAC,cAAc,EAAE;YAC1B,KAAK,CAAC,cAAc,CAAA,CAAE;UAClC;UACU,OAAO,CAAC,KAAK,CAAC;QACxB;MACA,CAAO,CAAC;IACR,CAAK;IACD,QAAQ,CAAC,eAAe,CAAC,gBAAgB,CAAC,SAAS,EAAE,eAAe,CAAC;IACrE,OAAO,MAAM,QAAQ,CAAC,eAAe,CAAC,mBAAmB,CAAC,SAAS,EAAE,eAAe,CAAC;EACzF,CAAG,EAAE,CAAC,OAAO,CAAC,CAAC;AACf","sourcesContent":["import { useEffect } from 'react';\nimport { getHotkeyHandler, getHotkeyMatcher, HotkeyItemOptions } from './parse-hotkey';\n\nexport type { HotkeyItemOptions };\nexport { getHotkeyHandler };\n\nexport type HotkeyItem = [string, (event: KeyboardEvent) => void, HotkeyItemOptions?];\n\nfunction shouldFireEvent(\n  event: KeyboardEvent,\n  tagsToIgnore: string[],\n  triggerOnContentEditable = false\n) {\n  if (event.target instanceof HTMLElement) {\n    if (triggerOnContentEditable) {\n      return !tagsToIgnore.includes(event.target.tagName);\n    }\n\n    return !event.target.isContentEditable && !tagsToIgnore.includes(event.target.tagName);\n  }\n\n  return true;\n}\n\nexport function useHotkeys(\n  hotkeys: HotkeyItem[],\n  tagsToIgnore: string[] = ['INPUT', 'TEXTAREA', 'SELECT'],\n  triggerOnContentEditable = false\n) {\n  useEffect(() => {\n    const keydownListener = (event: KeyboardEvent) => {\n      hotkeys.forEach(([hotkey, handler, options = { preventDefault: true }]) => {\n        if (\n          getHotkeyMatcher(hotkey)(event) &&\n          shouldFireEvent(event, tagsToIgnore, triggerOnContentEditable)\n        ) {\n          if (options.preventDefault) {\n            event.preventDefault();\n          }\n\n          handler(event);\n        }\n      });\n    };\n\n    document.documentElement.addEventListener('keydown', keydownListener);\n    return () => document.documentElement.removeEventListener('keydown', keydownListener);\n  }, [hotkeys]);\n}\n"]},"metadata":{},"sourceType":"module"}