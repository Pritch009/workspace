{"ast":null,"code":"import React, { forwardRef, useState, useRef, useEffect } from 'react';\nimport { clamp, assignRef, useMergedRef, useOs } from '@mantine/hooks';\nimport { rem, useComponentDefaultProps, getSize } from '@mantine/styles';\nimport { getInputMode } from './get-input-mode/get-input-mode.js';\nimport { Chevron } from './Chevron.js';\nimport useStyles, { CONTROL_SIZES } from './NumberInput.styles.js';\nimport { TextInput } from '../TextInput/TextInput.js';\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source) if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)) {\n    if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n};\nconst defaultFormatter = value => value || \"\";\nconst defaultParser = num => {\n  if (num === \"-\") {\n    return num;\n  }\n  let tempNum = num;\n  if (tempNum[0] === \".\") {\n    tempNum = `0${num}`;\n  }\n  const parsedNum = parseFloat(tempNum);\n  if (Number.isNaN(parsedNum)) {\n    return \"\";\n  }\n  return num;\n};\nconst CHEVRON_SIZES = {\n  xs: rem(10),\n  sm: rem(14),\n  md: rem(16),\n  lg: rem(18),\n  xl: rem(20)\n};\nconst defaultProps = {\n  step: 1,\n  hideControls: false,\n  size: \"sm\",\n  precision: 0,\n  noClampOnBlur: false,\n  removeTrailingZeros: false,\n  decimalSeparator: \".\",\n  formatter: defaultFormatter,\n  parser: defaultParser,\n  type: \"text\"\n};\nconst NumberInput = forwardRef((props, ref) => {\n  const _a = useComponentDefaultProps(\"NumberInput\", defaultProps, props),\n    {\n      readOnly,\n      disabled,\n      value,\n      onChange,\n      decimalSeparator,\n      thousandsSeparator,\n      min,\n      max,\n      startValue,\n      step,\n      stepHoldInterval,\n      stepHoldDelay,\n      onFocus,\n      onBlur,\n      onKeyDown,\n      onKeyUp,\n      hideControls,\n      radius,\n      variant,\n      precision,\n      removeTrailingZeros,\n      defaultValue,\n      noClampOnBlur,\n      handlersRef,\n      classNames,\n      styles,\n      size,\n      rightSection,\n      rightSectionWidth,\n      formatter,\n      parser,\n      inputMode,\n      unstyled,\n      type\n    } = _a,\n    others = __objRest(_a, [\"readOnly\", \"disabled\", \"value\", \"onChange\", \"decimalSeparator\", \"thousandsSeparator\", \"min\", \"max\", \"startValue\", \"step\", \"stepHoldInterval\", \"stepHoldDelay\", \"onFocus\", \"onBlur\", \"onKeyDown\", \"onKeyUp\", \"hideControls\", \"radius\", \"variant\", \"precision\", \"removeTrailingZeros\", \"defaultValue\", \"noClampOnBlur\", \"handlersRef\", \"classNames\", \"styles\", \"size\", \"rightSection\", \"rightSectionWidth\", \"formatter\", \"parser\", \"inputMode\", \"unstyled\", \"type\"]);\n  const {\n    classes,\n    cx\n  } = useStyles({\n    radius\n  }, {\n    classNames,\n    styles,\n    unstyled,\n    name: \"NumberInput\",\n    variant,\n    size\n  });\n  const parsePrecision = val => {\n    if (val === \"\") return \"\";\n    let result = val.toFixed(precision);\n    if (removeTrailingZeros && precision > 0) {\n      result = result.replace(new RegExp(`[0]{0,${precision}}$`), \"\");\n      if (result.endsWith(\".\")) {\n        result = result.slice(0, -1);\n      }\n    }\n    return result;\n  };\n  const formatNum = val => {\n    let parsedStr = val;\n    if (decimalSeparator) {\n      parsedStr = parsedStr.replace(\".\", decimalSeparator);\n    }\n    return formatter(parsedStr);\n  };\n  const parseNum = val => {\n    let num = val;\n    if (decimalSeparator) {\n      num = num.replaceAll(thousandsSeparator, \"\").replace(decimalSeparator, \".\");\n    }\n    return parser(num);\n  };\n  const formatInternalValue = val => formatNum(parsePrecision(val));\n  const [internalValue, _setInternalValue] = useState(typeof value === \"number\" ? value : typeof defaultValue === \"number\" ? defaultValue : \"\");\n  const [inputValue, setInputValue] = useState(() => formatInternalValue(internalValue));\n  const inputRef = useRef();\n  const [isFocussed, setIsFocussed] = useState(false);\n  const setInternalValue = (val, forceInputValueUpdate) => {\n    if (!isFocussed || forceInputValueUpdate) {\n      const newInputValue = formatInternalValue(val);\n      if (newInputValue !== inputValue) {\n        setInputValue(newInputValue);\n      }\n    }\n    if (val !== internalValue) {\n      _setInternalValue(val);\n    }\n  };\n  const _min = typeof min === \"number\" ? min : -Infinity;\n  const _max = typeof max === \"number\" ? max : Infinity;\n  const incrementRef = useRef();\n  incrementRef.current = () => {\n    var _a2;\n    let newInternalValue;\n    if (internalValue === \"\") {\n      newInternalValue = (_a2 = startValue != null ? startValue : min) != null ? _a2 : 0;\n    } else {\n      newInternalValue = parseFloat(parsePrecision(clamp(internalValue + step, _min, _max)));\n    }\n    setInternalValue(newInternalValue, true);\n    onChange == null ? void 0 : onChange(newInternalValue);\n  };\n  const decrementRef = useRef();\n  decrementRef.current = () => {\n    var _a2;\n    let newInternalValue;\n    if (internalValue === \"\") {\n      newInternalValue = (_a2 = startValue != null ? startValue : min) != null ? _a2 : 0;\n    } else {\n      newInternalValue = parseFloat(parsePrecision(clamp(internalValue - step, _min, _max)));\n    }\n    setInternalValue(newInternalValue, true);\n    onChange == null ? void 0 : onChange(newInternalValue);\n  };\n  assignRef(handlersRef, {\n    increment: incrementRef.current,\n    decrement: decrementRef.current\n  });\n  useEffect(() => {\n    if (isFocussed) {\n      return;\n    }\n    if (value === void 0) {\n      setInternalValue(internalValue, true);\n    } else {\n      setInternalValue(value, true);\n    }\n  }, [value, isFocussed]);\n  const shouldUseStepInterval = stepHoldDelay !== void 0 && stepHoldInterval !== void 0;\n  const onStepTimeoutRef = useRef(null);\n  const stepCountRef = useRef(0);\n  const onStepDone = () => {\n    if (onStepTimeoutRef.current) {\n      window.clearTimeout(onStepTimeoutRef.current);\n    }\n    onStepTimeoutRef.current = null;\n    stepCountRef.current = 0;\n  };\n  const onStepHandleChange = isIncrement => {\n    if (isIncrement) {\n      incrementRef.current();\n    } else {\n      decrementRef.current();\n    }\n    stepCountRef.current += 1;\n  };\n  const onStepLoop = isIncrement => {\n    onStepHandleChange(isIncrement);\n    if (shouldUseStepInterval) {\n      const interval = typeof stepHoldInterval === \"number\" ? stepHoldInterval : stepHoldInterval(stepCountRef.current);\n      onStepTimeoutRef.current = window.setTimeout(() => onStepLoop(isIncrement), interval);\n    }\n  };\n  const onStep = (event, isIncrement) => {\n    event.preventDefault();\n    inputRef.current.focus();\n    onStepHandleChange(isIncrement);\n    if (shouldUseStepInterval) {\n      onStepTimeoutRef.current = window.setTimeout(() => onStepLoop(isIncrement), stepHoldDelay);\n    }\n  };\n  useEffect(() => {\n    onStepDone();\n    return onStepDone;\n  }, []);\n  const controls = /* @__PURE__ */React.createElement(\"div\", {\n    className: classes.rightSection\n  }, /* @__PURE__ */React.createElement(\"button\", {\n    type: \"button\",\n    tabIndex: -1,\n    \"aria-hidden\": true,\n    disabled: internalValue >= max,\n    className: cx(classes.control, classes.controlUp),\n    onPointerDown: event => {\n      onStep(event, true);\n    },\n    onPointerUp: onStepDone,\n    onPointerLeave: onStepDone\n  }, /* @__PURE__ */React.createElement(Chevron, {\n    size: getSize({\n      size,\n      sizes: CHEVRON_SIZES\n    }),\n    direction: \"up\"\n  })), /* @__PURE__ */React.createElement(\"button\", {\n    type: \"button\",\n    tabIndex: -1,\n    \"aria-hidden\": true,\n    disabled: internalValue <= min,\n    className: cx(classes.control, classes.controlDown),\n    onPointerDown: event => {\n      onStep(event, false);\n    },\n    onPointerUp: onStepDone,\n    onPointerLeave: onStepDone\n  }, /* @__PURE__ */React.createElement(Chevron, {\n    size: getSize({\n      size,\n      sizes: CHEVRON_SIZES\n    }),\n    direction: \"down\"\n  })));\n  const processInputValue = newInputValue => {\n    let normalizedInputValue = newInputValue;\n    if (normalizedInputValue[0] === `${decimalSeparator}` || normalizedInputValue[0] === \".\") {\n      normalizedInputValue = `0${normalizedInputValue}`;\n    }\n    const parsedValue = parseFloat(parsePrecision(parseFloat(parseNum(normalizedInputValue))));\n    const clampedValue = !noClampOnBlur ? clamp(parsedValue, _min, _max) : parsedValue;\n    const finalValue = Number.isNaN(clampedValue) ? \"\" : clampedValue;\n    const internalValueChanged = internalValue !== finalValue;\n    setInputValue(newInputValue);\n    setInternalValue(finalValue);\n    if (internalValueChanged) {\n      onChange == null ? void 0 : onChange(finalValue);\n    }\n  };\n  const handleChange = event => {\n    const evt = event.nativeEvent;\n    if (evt.isComposing) {\n      return;\n    }\n    processInputValue(event.target.value);\n  };\n  const handleFocus = event => {\n    setIsFocussed(true);\n    onFocus == null ? void 0 : onFocus(event);\n  };\n  const handleBlur = event => {\n    setIsFocussed(false);\n    onBlur == null ? void 0 : onBlur(event);\n  };\n  const handleKeyDown = event => {\n    typeof onKeyDown === \"function\" && onKeyDown(event);\n    if (event.repeat && shouldUseStepInterval && (event.key === \"ArrowUp\" || event.key === \"ArrowDown\")) {\n      event.preventDefault();\n      return;\n    }\n    if (!readOnly) {\n      if (event.key === \"ArrowUp\") {\n        onStep(event, true);\n      } else if (event.key === \"ArrowDown\") {\n        onStep(event, false);\n      }\n    }\n  };\n  const handleKeyUp = event => {\n    typeof onKeyUp === \"function\" && onKeyUp(event);\n    if (event.key === \"ArrowUp\" || event.key === \"ArrowDown\") {\n      onStepDone();\n    }\n  };\n  return /* @__PURE__ */React.createElement(TextInput, __spreadProps(__spreadValues({}, others), {\n    type,\n    variant,\n    value: inputValue,\n    disabled,\n    readOnly,\n    ref: useMergedRef(inputRef, ref),\n    onChange: handleChange,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    onKeyDown: handleKeyDown,\n    onKeyUp: handleKeyUp,\n    rightSection: rightSection || (disabled || readOnly || hideControls || variant === \"unstyled\" ? null : controls),\n    rightSectionWidth: rightSectionWidth != null ? rightSectionWidth : `calc(${getSize({\n      size,\n      sizes: CONTROL_SIZES\n    })} + ${rem(1)})`,\n    radius,\n    max,\n    min,\n    step,\n    size,\n    styles,\n    classNames,\n    inputMode: inputMode || getInputMode(step, precision, useOs()),\n    __staticSelector: \"NumberInput\",\n    unstyled\n  }));\n});\nNumberInput.displayName = \"@mantine/core/NumberInput\";\nexport { NumberInput };","map":{"version":3,"sources":["../../src/NumberInput/NumberInput.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, forwardRef } from 'react';\nimport { useMergedRef, assignRef, useOs, clamp } from '@mantine/hooks';\nimport { DefaultProps, Selectors, useComponentDefaultProps, rem, getSize } from '@mantine/styles';\nimport { TextInput } from '../TextInput';\nimport { InputStylesNames, InputWrapperStylesNames } from '../Input';\nimport { getInputMode } from './get-input-mode/get-input-mode';\nimport { Chevron } from './Chevron';\nimport useStyles, { CONTROL_SIZES } from './NumberInput.styles';\n\nexport type InnerNumberInputStylesNames = Selectors<typeof useStyles>;\nexport type NumberInputStylesNames =\n  | InputStylesNames\n  | InputWrapperStylesNames\n  | InnerNumberInputStylesNames;\n\nexport interface NumberInputHandlers {\n  increment(): void;\n  decrement(): void;\n}\n\ntype Formatter = (value: string | '') => string;\ntype Parser = (value: string | '') => string;\n\nexport interface NumberInputProps\n  extends DefaultProps<NumberInputStylesNames>,\n    Omit<\n      React.ComponentPropsWithoutRef<typeof TextInput>,\n      'onChange' | 'value' | 'classNames' | 'styles' | 'type'\n    > {\n  /** Called when value changes */\n  onChange?(value: number | ''): void;\n\n  /** Input value for controlled component */\n  value?: number | '';\n\n  /** Default value for uncontrolled component */\n  defaultValue?: number | '';\n\n  /** The decimal separator */\n  decimalSeparator?: string;\n\n  /** The thousands separator */\n  thousandsSeparator?: string;\n\n  /** Maximum possible value */\n  max?: number;\n\n  /** Minimal possible value */\n  min?: number;\n\n  /** First value if no initial value was set and increment/decrement is triggered using controls or up/down arrows */\n  startValue?: number;\n\n  /** Number by which value will be incremented/decremented with controls and up/down arrows */\n  step?: number;\n\n  /** Delay before stepping the value. Can be a number of milliseconds or a function that receives the current step count and returns the delay in milliseconds. */\n  stepHoldInterval?: number | ((stepCount: number) => number);\n\n  /** Initial delay in milliseconds before stepping the value. */\n  stepHoldDelay?: number;\n\n  /** Removes increment/decrement controls */\n  hideControls?: boolean;\n\n  /** Amount of digits after the decimal point  */\n  precision?: number;\n\n  /** Only works if a precision is given, removes the trailing zeros, false by default */\n  removeTrailingZeros?: boolean;\n\n  /** Prevent value clamp on blur */\n  noClampOnBlur?: boolean;\n\n  /** Get increment/decrement handlers */\n  handlersRef?: React.ForwardedRef<NumberInputHandlers | undefined>;\n\n  /** Formats the number into the input */\n  formatter?: Formatter;\n\n  /** Parses the value from formatter, should be used with formatter at the same time */\n  parser?: Parser;\n\n  /** Input type, defaults to text */\n  type?: 'text' | 'number';\n}\n\nconst defaultFormatter: Formatter = (value) => value || '';\nconst defaultParser: Parser = (num) => {\n  if (num === '-') {\n    return num;\n  }\n\n  let tempNum = num;\n\n  if (tempNum[0] === '.') {\n    tempNum = `0${num}`;\n  }\n\n  const parsedNum = parseFloat(tempNum);\n\n  if (Number.isNaN(parsedNum)) {\n    return '';\n  }\n\n  return num;\n};\n\nconst CHEVRON_SIZES = {\n  xs: rem(10),\n  sm: rem(14),\n  md: rem(16),\n  lg: rem(18),\n  xl: rem(20),\n};\n\nconst defaultProps: Partial<NumberInputProps> = {\n  step: 1,\n  hideControls: false,\n  size: 'sm',\n  precision: 0,\n  noClampOnBlur: false,\n  removeTrailingZeros: false,\n  decimalSeparator: '.',\n  formatter: defaultFormatter,\n  parser: defaultParser,\n  type: 'text',\n};\n\nexport const NumberInput = forwardRef<HTMLInputElement, NumberInputProps>((props, ref) => {\n  const {\n    readOnly,\n    disabled,\n    value,\n    onChange,\n    decimalSeparator,\n    thousandsSeparator,\n    min,\n    max,\n    startValue,\n    step,\n    stepHoldInterval,\n    stepHoldDelay,\n    onFocus,\n    onBlur,\n    onKeyDown,\n    onKeyUp,\n    hideControls,\n    radius,\n    variant,\n    precision,\n    removeTrailingZeros,\n    defaultValue,\n    noClampOnBlur,\n    handlersRef,\n    classNames,\n    styles,\n    size,\n    rightSection,\n    rightSectionWidth,\n    formatter,\n    parser,\n    inputMode,\n    unstyled,\n    type,\n    ...others\n  } = useComponentDefaultProps('NumberInput', defaultProps, props);\n\n  const { classes, cx } = useStyles(\n    { radius },\n    { classNames, styles, unstyled, name: 'NumberInput', variant, size }\n  );\n\n  const parsePrecision = (val: number | '') => {\n    if (val === '') return '';\n\n    let result = val.toFixed(precision);\n\n    if (removeTrailingZeros && precision > 0) {\n      result = result.replace(new RegExp(`[0]{0,${precision}}$`), '');\n      if (result.endsWith('.')) {\n        result = result.slice(0, -1);\n      }\n    }\n\n    return result;\n  };\n\n  const formatNum = (val: string) => {\n    let parsedStr = val;\n    if (decimalSeparator) {\n      parsedStr = parsedStr.replace('.', decimalSeparator);\n    }\n\n    return formatter(parsedStr);\n  };\n\n  const parseNum = (val: string): string | '' => {\n    let num = val;\n\n    if (decimalSeparator) {\n      num = num.replaceAll(thousandsSeparator, '').replace(decimalSeparator, '.');\n    }\n\n    return parser(num);\n  };\n\n  const formatInternalValue = (val: number | '') => formatNum(parsePrecision(val));\n\n  // Parsed value that will be used for uncontrolled state and for setting the inputValue\n  const [internalValue, _setInternalValue] = useState<number | ''>(\n    typeof value === 'number' ? value : typeof defaultValue === 'number' ? defaultValue : ''\n  );\n\n  // Value of input field. Gets changed through user input and on internalValue change\n  const [inputValue, setInputValue] = useState(() => formatInternalValue(internalValue));\n\n  const inputRef = useRef<HTMLInputElement>();\n\n  const [isFocussed, setIsFocussed] = useState(false);\n\n  const setInternalValue = (val: number | '', forceInputValueUpdate?: boolean) => {\n    if (!isFocussed || forceInputValueUpdate) {\n      const newInputValue = formatInternalValue(val);\n      if (newInputValue !== inputValue) {\n        // Make sure to update/reset the input value even if the internal value stays the same\n        // E. g. this may happen if the internalValue is \"10\" and the user entered \"10abc\"\n        setInputValue(newInputValue);\n      }\n    }\n\n    if (val !== internalValue) {\n      _setInternalValue(val);\n    }\n  };\n\n  const _min = typeof min === 'number' ? min : -Infinity;\n  const _max = typeof max === 'number' ? max : Infinity;\n\n  const incrementRef = useRef<() => void>();\n  incrementRef.current = () => {\n    let newInternalValue: number;\n    if (internalValue === '') {\n      newInternalValue = startValue ?? min ?? 0;\n    } else {\n      newInternalValue = parseFloat(parsePrecision(clamp(internalValue + step, _min, _max)));\n    }\n\n    setInternalValue(newInternalValue, true);\n    onChange?.(newInternalValue);\n  };\n\n  const decrementRef = useRef<() => void>();\n  decrementRef.current = () => {\n    let newInternalValue: number;\n    if (internalValue === '') {\n      newInternalValue = startValue ?? min ?? 0;\n    } else {\n      newInternalValue = parseFloat(parsePrecision(clamp(internalValue - step, _min, _max)));\n    }\n\n    setInternalValue(newInternalValue, true);\n    onChange?.(newInternalValue);\n  };\n\n  assignRef(handlersRef, { increment: incrementRef.current, decrement: decrementRef.current });\n\n  useEffect(() => {\n    if (isFocussed) {\n      return;\n    }\n\n    if (value === undefined) {\n      // For uncontrolled inputs reapply internalValue\n      setInternalValue(internalValue, true);\n    } else {\n      // For controlled inputs apply value\n      setInternalValue(value, true);\n    }\n  }, [value, isFocussed]);\n\n  const shouldUseStepInterval = stepHoldDelay !== undefined && stepHoldInterval !== undefined;\n  const onStepTimeoutRef = useRef<number>(null);\n  const stepCountRef = useRef<number>(0);\n\n  const onStepDone = () => {\n    if (onStepTimeoutRef.current) {\n      window.clearTimeout(onStepTimeoutRef.current);\n    }\n    onStepTimeoutRef.current = null;\n    stepCountRef.current = 0;\n  };\n\n  const onStepHandleChange = (isIncrement: boolean) => {\n    if (isIncrement) {\n      incrementRef.current();\n    } else {\n      decrementRef.current();\n    }\n    stepCountRef.current += 1;\n  };\n\n  const onStepLoop = (isIncrement: boolean) => {\n    onStepHandleChange(isIncrement);\n\n    if (shouldUseStepInterval) {\n      const interval =\n        typeof stepHoldInterval === 'number'\n          ? stepHoldInterval\n          : stepHoldInterval(stepCountRef.current);\n      onStepTimeoutRef.current = window.setTimeout(() => onStepLoop(isIncrement), interval);\n    }\n  };\n\n  const onStep = (\n    event: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>,\n    isIncrement: boolean\n  ) => {\n    event.preventDefault();\n    inputRef.current.focus();\n    onStepHandleChange(isIncrement);\n    if (shouldUseStepInterval) {\n      onStepTimeoutRef.current = window.setTimeout(() => onStepLoop(isIncrement), stepHoldDelay);\n    }\n  };\n\n  useEffect(() => {\n    onStepDone();\n    return onStepDone;\n  }, []);\n\n  const controls = (\n    <div className={classes.rightSection}>\n      <button\n        type=\"button\"\n        tabIndex={-1}\n        aria-hidden\n        disabled={internalValue >= max}\n        className={cx(classes.control, classes.controlUp)}\n        onPointerDown={(event) => {\n          onStep(event, true);\n        }}\n        onPointerUp={onStepDone}\n        onPointerLeave={onStepDone}\n      >\n        <Chevron size={getSize({ size, sizes: CHEVRON_SIZES })} direction=\"up\" />\n      </button>\n      <button\n        type=\"button\"\n        tabIndex={-1}\n        aria-hidden\n        disabled={internalValue <= min}\n        className={cx(classes.control, classes.controlDown)}\n        onPointerDown={(event) => {\n          onStep(event, false);\n        }}\n        onPointerUp={onStepDone}\n        onPointerLeave={onStepDone}\n      >\n        <Chevron size={getSize({ size, sizes: CHEVRON_SIZES })} direction=\"down\" />\n      </button>\n    </div>\n  );\n\n  /**\n   * Parse new input value and propagate it via `onChange` to parent.\n   */\n  const processInputValue = (newInputValue: string) => {\n    let normalizedInputValue = newInputValue;\n    if (normalizedInputValue[0] === `${decimalSeparator}` || normalizedInputValue[0] === '.') {\n      normalizedInputValue = `0${normalizedInputValue}`;\n    }\n\n    const parsedValue = parseFloat(parsePrecision(parseFloat(parseNum(normalizedInputValue))));\n    const clampedValue = !noClampOnBlur ? clamp(parsedValue, _min, _max) : parsedValue;\n    const finalValue = Number.isNaN(clampedValue) ? '' : clampedValue;\n\n    const internalValueChanged = internalValue !== finalValue;\n\n    setInputValue(newInputValue);\n    setInternalValue(finalValue);\n\n    if (internalValueChanged) {\n      onChange?.(finalValue);\n    }\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const evt = event.nativeEvent as InputEvent;\n    if (evt.isComposing) {\n      return;\n    }\n\n    processInputValue(event.target.value);\n  };\n\n  const handleFocus = (event: React.FocusEvent<HTMLInputElement>) => {\n    setIsFocussed(true);\n    onFocus?.(event);\n  };\n\n  const handleBlur = (event: React.FocusEvent<HTMLInputElement>) => {\n    setIsFocussed(false);\n    onBlur?.(event);\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    typeof onKeyDown === 'function' && onKeyDown(event);\n    if (\n      event.repeat &&\n      shouldUseStepInterval &&\n      (event.key === 'ArrowUp' || event.key === 'ArrowDown')\n    ) {\n      event.preventDefault();\n      return;\n    }\n\n    if (!readOnly) {\n      if (event.key === 'ArrowUp') {\n        onStep(event, true);\n      } else if (event.key === 'ArrowDown') {\n        onStep(event, false);\n      }\n    }\n  };\n\n  const handleKeyUp = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    typeof onKeyUp === 'function' && onKeyUp(event);\n    if (event.key === 'ArrowUp' || event.key === 'ArrowDown') {\n      onStepDone();\n    }\n  };\n\n  return (\n    <TextInput\n      {...others}\n      type={type}\n      variant={variant}\n      value={inputValue}\n      disabled={disabled}\n      readOnly={readOnly}\n      ref={useMergedRef(inputRef, ref)}\n      onChange={handleChange}\n      onFocus={handleFocus}\n      onBlur={handleBlur}\n      onKeyDown={handleKeyDown}\n      onKeyUp={handleKeyUp}\n      rightSection={\n        rightSection ||\n        (disabled || readOnly || hideControls || variant === 'unstyled' ? null : controls)\n      }\n      rightSectionWidth={\n        rightSectionWidth ?? `calc(${getSize({ size, sizes: CONTROL_SIZES })} + ${rem(1)})`\n      }\n      radius={radius}\n      max={max}\n      min={min}\n      step={step}\n      size={size}\n      styles={styles}\n      classNames={classNames}\n      inputMode={inputMode || getInputMode(step, precision, useOs())}\n      __staticSelector=\"NumberInput\"\n      unstyled={unstyled}\n    />\n  );\n});\n\nNumberInput.displayName = '@mantine/core/NumberInput';\n"]},"metadata":{},"sourceType":"module"}