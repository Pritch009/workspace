{"ast":null,"code":"import { createStyles, getSize, getBreakpointValue, em } from '@mantine/styles';\nimport { getSortedBreakpoints } from './get-sorted-breakpoints/get-sorted-breakpoints.js';\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar useStyles = createStyles((theme, _ref) => {\n  let {\n    spacing,\n    breakpoints,\n    cols,\n    verticalSpacing\n  } = _ref;\n  const hasVerticalSpacing = verticalSpacing != null;\n  const gridBreakpoints = getSortedBreakpoints(theme, breakpoints).reduce((acc, breakpoint) => {\n    var _a, _b;\n    const property = \"maxWidth\" in breakpoint ? \"max-width\" : \"min-width\";\n    const breakpointSize = getSize({\n      size: property === \"max-width\" ? breakpoint.maxWidth : breakpoint.minWidth,\n      sizes: theme.breakpoints,\n      units: \"em\"\n    });\n    const breakpointValue = getBreakpointValue(breakpointSize) - (property === \"max-width\" ? 1 : 0);\n    acc[`@media (${property}: ${em(breakpointValue)})`] = {\n      gridTemplateColumns: `repeat(${breakpoint.cols}, minmax(0, 1fr))`,\n      gap: `${getSize({\n        size: (_a = breakpoint.verticalSpacing) != null ? _a : hasVerticalSpacing ? verticalSpacing : spacing,\n        sizes: theme.spacing\n      })} ${getSize({\n        size: (_b = breakpoint.spacing) != null ? _b : spacing,\n        sizes: theme.spacing\n      })}`\n    };\n    return acc;\n  }, {});\n  return {\n    root: __spreadValues({\n      boxSizing: \"border-box\",\n      display: \"grid\",\n      gridTemplateColumns: `repeat(${cols}, minmax(0, 1fr))`,\n      gap: `${getSize({\n        size: hasVerticalSpacing ? verticalSpacing : spacing,\n        sizes: theme.spacing\n      })} ${getSize({\n        size: spacing,\n        sizes: theme.spacing\n      })}`\n    }, gridBreakpoints)\n  };\n});\nexport default useStyles;","map":{"version":3,"sources":["../../src/SimpleGrid/SimpleGrid.styles.ts"],"names":[],"mappings":"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","sourcesContent":["import { createStyles, MantineNumberSize, getBreakpointValue, getSize, em } from '@mantine/styles';\nimport { getSortedBreakpoints } from './get-sorted-breakpoints/get-sorted-breakpoints';\n\nexport interface SimpleGridBreakpoint {\n  maxWidth?: MantineNumberSize;\n  minWidth?: MantineNumberSize;\n  cols: number;\n  spacing?: MantineNumberSize;\n  verticalSpacing?: MantineNumberSize;\n}\n\nexport interface SimpleGridStylesParams {\n  spacing: MantineNumberSize;\n  verticalSpacing: MantineNumberSize;\n  breakpoints: SimpleGridBreakpoint[];\n  cols: number;\n}\n\nexport default createStyles(\n  (theme, { spacing, breakpoints, cols, verticalSpacing }: SimpleGridStylesParams) => {\n    const hasVerticalSpacing = verticalSpacing != null;\n\n    const gridBreakpoints = getSortedBreakpoints(theme, breakpoints).reduce((acc, breakpoint) => {\n      const property = 'maxWidth' in breakpoint ? 'max-width' : 'min-width';\n      const breakpointSize = getSize({\n        size: property === 'max-width' ? breakpoint.maxWidth : breakpoint.minWidth,\n        sizes: theme.breakpoints,\n        units: 'em',\n      });\n\n      const breakpointValue =\n        getBreakpointValue(breakpointSize) - (property === 'max-width' ? 1 : 0);\n\n      acc[`@media (${property}: ${em(breakpointValue)})`] = {\n        gridTemplateColumns: `repeat(${breakpoint.cols}, minmax(0, 1fr))`,\n        gap: `${getSize({\n          size: breakpoint.verticalSpacing ?? (hasVerticalSpacing ? verticalSpacing : spacing),\n          sizes: theme.spacing,\n        })} ${getSize({\n          size: breakpoint.spacing ?? spacing,\n          sizes: theme.spacing,\n        })}`,\n      };\n\n      return acc;\n    }, {});\n\n    return {\n      root: {\n        boxSizing: 'border-box',\n        display: 'grid',\n        gridTemplateColumns: `repeat(${cols}, minmax(0, 1fr))`,\n        gap: `${getSize({\n          size: hasVerticalSpacing ? verticalSpacing : spacing,\n          sizes: theme.spacing,\n        })} ${getSize({ size: spacing, sizes: theme.spacing })}`,\n        ...gridBreakpoints,\n      },\n    };\n  }\n);\n"]},"metadata":{},"sourceType":"module"}