{"ast":null,"code":"import { useState, useRef, useCallback } from 'react';\nfunction useIntersection(options) {\n  const [entry, setEntry] = useState(null);\n  const observer = useRef();\n  const ref = useCallback(element => {\n    if (observer.current) {\n      observer.current.disconnect();\n      observer.current = null;\n    }\n    if (element === null) {\n      setEntry(null);\n      return;\n    }\n    observer.current = new IntersectionObserver(_ref => {\n      let [_entry] = _ref;\n      setEntry(_entry);\n    }, options);\n    observer.current.observe(element);\n  }, [options == null ? void 0 : options.rootMargin, options == null ? void 0 : options.root, options == null ? void 0 : options.threshold]);\n  return {\n    ref,\n    entry\n  };\n}\nexport { useIntersection };","map":{"version":3,"sources":["../../src/use-intersection/use-intersection.ts"],"names":[],"mappings":";AACO,SAAS,eAAe,CAAC,OAAO,EAAE;EACvC,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,QAAQ,GAAG,MAAM,CAAA,CAAE;EACzB,MAAM,GAAG,GAAG,WAAW,CAAE,OAAO,IAAK;IACnC,IAAI,QAAQ,CAAC,OAAO,EAAE;MACpB,QAAQ,CAAC,OAAO,CAAC,UAAU,CAAA,CAAE;MAC7B,QAAQ,CAAC,OAAO,GAAG,IAAI;IAC7B;IACI,IAAI,OAAO,KAAK,IAAI,EAAE;MACpB,QAAQ,CAAC,IAAI,CAAC;MACd;IACN;IACI,QAAQ,CAAC,OAAO,GAAG,IAAI,oBAAoB,CAAC,IAAA,IAAc;MAAA,IAAb,CAAC,MAAM,CAAC,GAAA,IAAA;MACnD,QAAQ,CAAC,MAAM,CAAC;IACtB,CAAK,EAAE,OAAO,CAAC;IACX,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC;EACrC,CAAG,EAAE,CAAC,OAAO,IAAI,IAAI,GAAG,KAAK,CAAC,GAAG,OAAO,CAAC,UAAU,EAAE,OAAO,IAAI,IAAI,GAAG,KAAK,CAAC,GAAG,OAAO,CAAC,IAAI,EAAE,OAAO,IAAI,IAAI,GAAG,KAAK,CAAC,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;EAC1I,OAAO;IAAE,GAAG;IAAE;EAAK,CAAE;AACvB","sourcesContent":["import { useCallback, useRef, useState } from 'react';\n\nexport function useIntersection<T extends HTMLElement = any>(\n  options?: ConstructorParameters<typeof IntersectionObserver>[1]\n) {\n  const [entry, setEntry] = useState<IntersectionObserverEntry>(null);\n\n  const observer = useRef<IntersectionObserver>();\n\n  const ref = useCallback(\n    (element: T | null) => {\n      if (observer.current) {\n        observer.current.disconnect();\n        observer.current = null;\n      }\n\n      if (element === null) {\n        setEntry(null);\n        return;\n      }\n\n      observer.current = new IntersectionObserver(([_entry]) => {\n        setEntry(_entry);\n      }, options);\n\n      observer.current.observe(element);\n    },\n    [options?.rootMargin, options?.root, options?.threshold]\n  );\n\n  return { ref, entry };\n}\n"]},"metadata":{},"sourceType":"module"}