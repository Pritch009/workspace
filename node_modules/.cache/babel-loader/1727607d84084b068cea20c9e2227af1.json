{"ast":null,"code":"import React from 'react';\nimport { getSafeId } from '@mantine/utils';\nimport { useId, useUncontrolled } from '@mantine/hooks';\nimport { AccordionContextProvider } from './Accordion.context.js';\nimport { ACCORDION_ERRORS } from './Accordion.errors.js';\nfunction AccordionProvider(_ref) {\n  let {\n    children,\n    multiple,\n    value,\n    defaultValue,\n    onChange,\n    id,\n    loop,\n    transitionDuration,\n    disableChevronRotation,\n    chevronPosition,\n    chevronSize,\n    order,\n    chevron,\n    variant,\n    radius,\n    classNames,\n    styles,\n    unstyled\n  } = _ref;\n  const uid = useId(id);\n  const [_value, handleChange] = useUncontrolled({\n    value,\n    defaultValue,\n    finalValue: multiple ? [] : null,\n    onChange\n  });\n  const isItemActive = itemValue => Array.isArray(_value) ? _value.includes(itemValue) : itemValue === _value;\n  const handleItemChange = itemValue => {\n    const nextValue = Array.isArray(_value) ? _value.includes(itemValue) ? _value.filter(selectedValue => selectedValue !== itemValue) : [..._value, itemValue] : itemValue === _value ? null : itemValue;\n    handleChange(nextValue);\n  };\n  return /* @__PURE__ */React.createElement(AccordionContextProvider, {\n    value: {\n      isItemActive,\n      onChange: handleItemChange,\n      getControlId: getSafeId(`${uid}-control`, ACCORDION_ERRORS.value),\n      getRegionId: getSafeId(`${uid}-panel`, ACCORDION_ERRORS.value),\n      transitionDuration,\n      disableChevronRotation,\n      chevronPosition,\n      chevronSize,\n      order,\n      chevron,\n      loop,\n      variant,\n      radius,\n      classNames,\n      styles,\n      unstyled\n    }\n  }, children);\n}\nexport { AccordionProvider };","map":{"version":3,"sources":["../../src/Accordion/AccordionProvider.tsx"],"names":[],"mappings":";;;;;AAKO,SAAS,iBAAiB,CAAA,IAAA,EAmB9B;EAAA,IAnB+B;IAChC,QAAQ;IACR,QAAQ;IACR,KAAK;IACL,YAAY;IACZ,QAAQ;IACR,EAAE;IACF,IAAI;IACJ,kBAAkB;IAClB,sBAAsB;IACtB,eAAe;IACf,WAAW;IACX,KAAK;IACL,OAAO;IACP,OAAO;IACP,MAAM;IACN,UAAU;IACV,MAAM;IACN;EACF,CAAC,GAAA,IAAA;EACC,MAAM,GAAG,GAAG,KAAK,CAAC,EAAE,CAAC;EACrB,MAAM,CAAC,MAAM,EAAE,YAAY,CAAC,GAAG,eAAe,CAAC;IAC7C,KAAK;IACL,YAAY;IACZ,UAAU,EAAE,QAAQ,GAAG,EAAE,GAAG,IAAI;IAChC;EACJ,CAAG,CAAC;EACF,MAAM,YAAY,GAAI,SAAS,IAAK,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,SAAS,KAAK,MAAM;EAC7G,MAAM,gBAAgB,GAAI,SAAS,IAAK;IACtC,MAAM,SAAS,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC,MAAM,CAAE,aAAa,IAAK,aAAa,KAAK,SAAS,CAAC,GAAG,CAAC,GAAG,MAAM,EAAE,SAAS,CAAC,GAAG,SAAS,KAAK,MAAM,GAAG,IAAI,GAAG,SAAS;IACvM,YAAY,CAAC,SAAS,CAAC;EAC3B,CAAG;EACD,OAAA,eAAuB,KAAK,CAAC,aAAa,CAAC,wBAAwB,EAAE;IACnE,KAAK,EAAE;MACL,YAAY;MACZ,QAAQ,EAAE,gBAAgB;MAC1B,YAAY,EAAE,SAAS,CAAE,GAAE,GAAI,UAAS,EAAE,gBAAgB,CAAC,KAAK,CAAC;MACjE,WAAW,EAAE,SAAS,CAAE,GAAE,GAAI,QAAO,EAAE,gBAAgB,CAAC,KAAK,CAAC;MAC9D,kBAAkB;MAClB,sBAAsB;MACtB,eAAe;MACf,WAAW;MACX,KAAK;MACL,OAAO;MACP,IAAI;MACJ,OAAO;MACP,MAAM;MACN,UAAU;MACV,MAAM;MACN;IACN;EACA,CAAG,EAAE,QAAQ,CAAC;AACd","sourcesContent":["import React from 'react';\nimport { getSafeId } from '@mantine/utils';\nimport { useUncontrolled, useId } from '@mantine/hooks';\nimport { MantineNumberSize, ClassNames, Styles } from '@mantine/styles';\nimport { AccordionContextProvider } from './Accordion.context';\nimport {\n  AccordionValue,\n  AccordionChevronPosition,\n  AccordionHeadingOrder,\n  AccordionVariant,\n} from './Accordion.types';\nimport { ACCORDION_ERRORS } from './Accordion.errors';\nimport type { AccordionStylesNames } from './Accordion';\n\nexport interface AccordionProviderProps<Multiple extends boolean = false> {\n  /** Base id, used to generate ids that connect labels with controls, by default generated randomly */\n  id?: string;\n\n  /** Determines whether arrow key presses should loop though items (first to last and last to first) */\n  loop?: boolean;\n\n  /** Accordion content */\n  children: React.ReactNode;\n\n  /** Determines whether multiple items can be opened at a time */\n  multiple?: Multiple;\n\n  /** Value for controlled component */\n  value?: AccordionValue<Multiple>;\n\n  /** Default value for uncontrolled component */\n  defaultValue?: AccordionValue<Multiple>;\n\n  /** Callback for controlled component */\n  onChange?(value: AccordionValue<Multiple>): void;\n\n  /** Transition duration in ms, set 0 to disable transitions */\n  transitionDuration?: number;\n\n  /** Determines whether chevron rotation should be disabled */\n  disableChevronRotation?: boolean;\n\n  /** Determines position of the chevron */\n  chevronPosition?: AccordionChevronPosition;\n\n  /** Chevron size */\n  chevronSize?: number | string;\n\n  /** Heading order, has no effect on visuals */\n  order?: AccordionHeadingOrder;\n\n  /** Replaces chevron on all items */\n  chevron?: React.ReactNode;\n\n  /** Controls visuals */\n  variant?: AccordionVariant;\n\n  /** Key of theme.radius or any valid CSS value to set border-radius, ignored when variant=\"default\" */\n  radius?: MantineNumberSize;\n}\n\ninterface _AccordionProviderProps<Multiple extends boolean = false>\n  extends AccordionProviderProps<Multiple> {\n  classNames?: ClassNames<AccordionStylesNames>;\n  styles?: Styles<AccordionStylesNames>;\n  unstyled?: boolean;\n}\n\nexport function AccordionProvider<Multiple extends boolean = false>({\n  children,\n  multiple,\n  value,\n  defaultValue,\n  onChange,\n  id,\n  loop,\n  transitionDuration,\n  disableChevronRotation,\n  chevronPosition,\n  chevronSize,\n  order,\n  chevron,\n  variant,\n  radius,\n  classNames,\n  styles,\n  unstyled,\n}: _AccordionProviderProps<Multiple>) {\n  const uid = useId(id);\n  const [_value, handleChange] = useUncontrolled({\n    value,\n    defaultValue,\n    finalValue: multiple ? ([] as any) : null,\n    onChange,\n  });\n\n  const isItemActive = (itemValue: string) =>\n    Array.isArray(_value) ? _value.includes(itemValue) : itemValue === _value;\n\n  const handleItemChange = (itemValue: string) => {\n    const nextValue: AccordionValue<Multiple> = Array.isArray(_value)\n      ? _value.includes(itemValue)\n        ? _value.filter((selectedValue) => selectedValue !== itemValue)\n        : [..._value, itemValue]\n      : itemValue === _value\n      ? null\n      : (itemValue as any);\n\n    handleChange(nextValue);\n  };\n\n  return (\n    <AccordionContextProvider\n      value={{\n        isItemActive,\n        onChange: handleItemChange,\n        getControlId: getSafeId(`${uid}-control`, ACCORDION_ERRORS.value),\n        getRegionId: getSafeId(`${uid}-panel`, ACCORDION_ERRORS.value),\n        transitionDuration,\n        disableChevronRotation,\n        chevronPosition,\n        chevronSize,\n        order,\n        chevron,\n        loop,\n        variant,\n        radius,\n        classNames,\n        styles,\n        unstyled,\n      }}\n    >\n      {children}\n    </AccordionContextProvider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}