{"ast":null,"code":"import { useState } from 'react';\nfunction useSelectionState() {\n  let initialSelection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [[], []];\n  const [selection, setSelection] = useState(initialSelection);\n  const handleSelect = (listIndex, value) => setSelection(currentSelection => {\n    const listSelection = currentSelection[listIndex];\n    let result = listSelection;\n    if (typeof value === \"string\") {\n      if (listSelection.includes(value)) {\n        result = listSelection.filter(item => item !== value);\n      } else {\n        result = [...listSelection, value];\n      }\n    }\n    const clone = [...currentSelection];\n    clone[listIndex] = result;\n    return clone;\n  });\n  const handleDeselect = (listIndex, values) => setSelection(currentSelection => {\n    const clone = [...currentSelection];\n    clone[listIndex] = currentSelection[listIndex].filter(item => !values.includes(item));\n    return clone;\n  });\n  const handleDeselectAll = listIndex => setSelection(currentSelection => {\n    const clone = [...currentSelection];\n    clone[listIndex] = [];\n    return clone;\n  });\n  const handlers = {\n    select: handleSelect,\n    deselect: handleDeselect,\n    deselectAll: handleDeselectAll\n  };\n  return [selection, handlers];\n}\nexport { useSelectionState };","map":{"version":3,"sources":["../../../src/TransferList/use-selection-state/use-selection-state.ts"],"names":[],"mappings":";AACO,SAAS,iBAAiB,CAAA,EAA8B;EAAA,IAA7B,gBAAgB,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAG,CAAC,EAAE,EAAE,EAAE,CAAC;EAC3D,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,GAAG,QAAQ,CAAC,gBAAgB,CAAC;EAC5D,MAAM,YAAY,GAAG,CAAC,SAAS,EAAE,KAAK,KAAK,YAAY,CAAE,gBAAgB,IAAK;IAC5E,MAAM,aAAa,GAAG,gBAAgB,CAAC,SAAS,CAAC;IACjD,IAAI,MAAM,GAAG,aAAa;IAC1B,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;MAC7B,IAAI,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;QACjC,MAAM,GAAG,aAAa,CAAC,MAAM,CAAE,IAAI,IAAK,IAAI,KAAK,KAAK,CAAC;MAC/D,CAAO,MAAM;QACL,MAAM,GAAG,CAAC,GAAG,aAAa,EAAE,KAAK,CAAC;MAC1C;IACA;IACI,MAAM,KAAK,GAAG,CAAC,GAAG,gBAAgB,CAAC;IACnC,KAAK,CAAC,SAAS,CAAC,GAAG,MAAM;IACzB,OAAO,KAAK;EAChB,CAAG,CAAC;EACF,MAAM,cAAc,GAAG,CAAC,SAAS,EAAE,MAAM,KAAK,YAAY,CAAE,gBAAgB,IAAK;IAC/E,MAAM,KAAK,GAAG,CAAC,GAAG,gBAAgB,CAAC;IACnC,KAAK,CAAC,SAAS,CAAC,GAAG,gBAAgB,CAAC,SAAS,CAAC,CAAC,MAAM,CAAE,IAAI,IAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IACvF,OAAO,KAAK;EAChB,CAAG,CAAC;EACF,MAAM,iBAAiB,GAAI,SAAS,IAAK,YAAY,CAAE,gBAAgB,IAAK;IAC1E,MAAM,KAAK,GAAG,CAAC,GAAG,gBAAgB,CAAC;IACnC,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;IACrB,OAAO,KAAK;EAChB,CAAG,CAAC;EACF,MAAM,QAAQ,GAAG;IACf,MAAM,EAAE,YAAY;IACpB,QAAQ,EAAE,cAAc;IACxB,WAAW,EAAE;EACjB,CAAG;EACD,OAAO,CAAC,SAAS,EAAE,QAAQ,CAAC;AAC9B","sourcesContent":["import { useState } from 'react';\n\nexport type Selection = [string[], string[]];\n\nexport function useSelectionState(initialSelection: Selection = [[], []]) {\n  const [selection, setSelection] = useState<Selection>(initialSelection);\n\n  const handleSelect = (listIndex: 0 | 1, value: string) =>\n    setSelection((currentSelection) => {\n      const listSelection = currentSelection[listIndex];\n      let result = listSelection;\n\n      if (typeof value === 'string') {\n        if (listSelection.includes(value)) {\n          result = listSelection.filter((item) => item !== value);\n        } else {\n          result = [...listSelection, value];\n        }\n      }\n\n      const clone: Selection = [...currentSelection];\n      clone[listIndex] = result;\n      return clone;\n    });\n\n  const handleDeselect = (listIndex: 0 | 1, values: string[]) =>\n    setSelection((currentSelection) => {\n      const clone: Selection = [...currentSelection];\n      clone[listIndex] = currentSelection[listIndex].filter((item) => !values.includes(item));\n      return clone;\n    });\n\n  const handleDeselectAll = (listIndex: 0 | 1) =>\n    setSelection((currentSelection) => {\n      const clone: Selection = [...currentSelection];\n      clone[listIndex] = [];\n      return clone;\n    });\n\n  const handlers = {\n    select: handleSelect,\n    deselect: handleDeselect,\n    deselectAll: handleDeselectAll,\n  };\n\n  return [selection, handlers] as const;\n}\n"]},"metadata":{},"sourceType":"module"}